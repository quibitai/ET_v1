/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/allocations/{allocation_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the allocation.
                 * @example 77688
                 */
                allocation_gid: components["parameters"]["allocation_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get an allocation
         * @description Returns the complete allocation record for a single allocation.
         */
        get: operations["getAllocation"];
        /**
         * Update an allocation
         * @description An existing allocation can be updated by making a PUT request on the URL for
         *     that allocation. Only the fields provided in the `data` block will be updated;
         *     any unspecified fields will remain unchanged.
         *
         *     Returns the complete updated allocation record.
         */
        put: operations["updateAllocation"];
        post?: never;
        /**
         * Delete an allocation
         * @description A specific, existing allocation can be deleted by making a DELETE request on the URL for that allocation.
         *
         *     Returns an empty data record.
         */
        delete: operations["deleteAllocation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/allocations": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple allocations
         * @description Returns a list of allocations filtered to a specific project, user or placeholder.
         */
        get: operations["getAllocations"];
        put?: never;
        /**
         * Create an allocation
         * @description Creates a new allocation.
         *
         *     Returns the full record of the newly created allocation.
         */
        post: operations["createAllocation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attachments/{attachment_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the attachment.
                 * @example 12345
                 */
                attachment_gid: components["parameters"]["attachment_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get an attachment
         * @description Get the full record for a single attachment.
         */
        get: operations["getAttachment"];
        put?: never;
        post?: never;
        /**
         * Delete an attachment
         * @description Deletes a specific, existing attachment.
         *
         *     Returns an empty data record.
         */
        delete: operations["deleteAttachment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attachments": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get attachments from an object
         * @description Returns the compact records for all attachments on the object.
         *
         *     There are three possible `parent` values for this request: `project`, `project_brief`, and `task`. For a project, an attachment refers to a file uploaded to the "Key resources" section in the project Overview. For a project brief, an attachment refers to inline files in the project brief itself. For a task, an attachment refers to a file directly associated to that task.
         *
         *     Note that within the Asana app, inline images in the task description do not appear in the index of image thumbnails nor as stories in the task. However, requests made to `GET /attachments` for a task will return all of the images in the task, including inline images.
         */
        get: operations["getAttachmentsForObject"];
        put?: never;
        /**
         * Upload an attachment
         * @description <b>Required scope: </b><code>attachments:write</code>
         *
         *     Upload an attachment.
         *
         *     This method uploads an attachment on an object and returns the compact
         *     record for the created attachment object. This is possible by either:
         *
         *     - Providing the URL of the external resource being attached, or
         *     - Downloading the file content first and then uploading it as any other attachment. Note that it is not possible to attach
         *     files from third party services such as Dropbox, Box, Vimeo & Google Drive via the API
         *
         *     The 100MB size limit on attachments in Asana is enforced on this endpoint.
         *
         *     This endpoint expects a multipart/form-data encoded request containing the full contents of the file to be uploaded.
         *
         *     Requests made should follow the HTTP/1.1 specification that line
         *     terminators are of the form `CRLF` or `\r\n` outlined
         *     [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules) in order for the server to reliably and properly handle the request.
         *
         *     For file names that contain non-ASCII characters, the file name should be URL-encoded. For example, a file named `résumé.pdf` should be encoded as
         *     `r%C3%A9sum%C3%A9.pdf` and the `filename` parameter in the `Content-Disposition` header should be set to the encoded file name.
         *
         *     Below is an example of a cURL request with the `Content-Disposition` header:
         *
         *     ```
         *     export ASANA_PAT="<YOUR_ASANA_PERSONAL_ACCESS_TOKEN>"
         *     export PARENT_ID="<PARENT_GID>"
         *     export ENCODED_NAME="r%C3%A9sum%C3%A9.pdf"
         *     curl --location 'https://app.asana.com/api/1.0/attachments' \
         *       --header 'Content-Type: multipart/form-data' \
         *       --header 'Accept: application/json' \
         *       --header "Authorization: Bearer $ASANA_PAT" \
         *       --form "parent=$PARENT_ID" \
         *       --form "file=@/Users/exampleUser/Downloads/résumé.pdf;headers=\"Content-Disposition: form-data; name="file"; filename="$ENCODED_NAME.pdf"; filename*=UTF-8''$ENCODED_NAME.pdf\""
         *     ```
         */
        post: operations["createAttachmentForObject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{workspace_gid}/audit_log_events": {
        parameters: {
            query?: {
                /** @description Filter to events created after this time (inclusive). */
                start_at?: components["parameters"]["audit_log_start_at"];
                /** @description Filter to events created before this time (exclusive). */
                end_at?: components["parameters"]["audit_log_end_at"];
                /** @description Filter to events of this type.
                 *     Refer to the [supported audit log events](/docs/audit-log-events#supported-audit-log-events) for a full list of values. */
                event_type?: components["parameters"]["audit_log_event_type"];
                /** @description Filter to events with an actor of this type.
                 *     This only needs to be included if querying for actor types without an ID. If `actor_gid` is included, this should be excluded. */
                actor_type?: components["parameters"]["audit_log_actor_type"];
                /** @description Filter to events triggered by the actor with this ID. */
                actor_gid?: components["parameters"]["audit_log_actor_gid"];
                /** @description Filter to events with this resource ID. */
                resource_gid?: components["parameters"]["audit_log_resource_gid"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get audit log events
         * @description Retrieve the audit log events that have been captured in your domain.
         *
         *     This endpoint will return a list of [AuditLogEvent](/reference/audit-log-api) objects, sorted by creation time in ascending order. Note that the Audit Log API captures events from October 8th, 2021 and later. Queries for events before this date will not return results.
         *
         *     There are a number of query parameters (below) that can be used to filter the set of [AuditLogEvent](/reference/audit-log-api) objects that are returned in the response. Any combination of query parameters is valid. When no filters are provided, all of the events that have been captured in your domain will match.
         *
         *     The list of events will always be [paginated](/docs/pagination). The default limit is 1000 events. The next set of events can be retrieved using the `offset` from the previous response. If there are no events that match the provided filters in your domain, the endpoint will return `null` for the `next_page` field. Querying again with the same filters may return new events if they were captured after the last request. Once a response includes a `next_page` with an `offset`, subsequent requests can be made with the latest `offset` to poll for new events that match the provided filters.
         *
         *     *Note: If the filters you provided match events in your domain and `next_page` is present in the response, we will continue to send `next_page` on subsequent requests even when there are no more events that match the filters. This was put in place so that you can implement an audit log stream that will return future events that match these filters. If you are not interested in future events that match the filters you have defined, you can rely on checking empty `data` response for the end of current events that match your filters.*
         *
         *     When no `offset` is provided, the response will begin with the oldest events that match the provided filters. It is important to note that [AuditLogEvent](/reference/audit-log-api) objects will be permanently deleted from our systems after 90 days. If you wish to keep a permanent record of these events, we recommend using a SIEM tool to ingest and store these logs.
         */
        get: operations["getAuditLogEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batch": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit parallel requests
         * @description Make multiple requests in parallel to Asana's API.
         */
        post: operations["createBatchRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/custom_field_settings": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a project's custom fields
         * @description Returns a list of all of the custom fields settings on a project, in compact form. Note that, as in all queries to collections which return compact representation, `opt_fields` can be used to include more data than is returned in the compact representation. See the [documentation for input/output options](https://developers.asana.com/docs/inputoutput-options) for more information.
         */
        get: operations["getCustomFieldSettingsForProject"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/portfolios/{portfolio_gid}/custom_field_settings": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a portfolio's custom fields
         * @description Returns a list of all of the custom fields settings on a portfolio, in compact form.
         */
        get: operations["getCustomFieldSettingsForPortfolio"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom_fields": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a custom field
         * @description Creates a new custom field in a workspace. Every custom field is required
         *     to be created in a specific workspace, and this workspace cannot be
         *     changed once set.
         *
         *     A custom field’s name must be unique within a workspace and not conflict
         *     with names of existing task properties such as `Due Date` or `Assignee`.
         *     A custom field’s type must be one of `text`, `enum`, `multi_enum`, `number`,
         *     `date`, or `people`.
         *
         *     Returns the full record of the newly created custom field.
         */
        post: operations["createCustomField"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom_fields/{custom_field_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the custom field.
                 * @example 12345
                 */
                custom_field_gid: components["parameters"]["custom_field_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a custom field
         * @description Get the complete definition of a custom field’s metadata.
         *
         *     Since custom fields can be defined for one of a number of types, and
         *     these types have different data and behaviors, there are fields that are
         *     relevant to a particular type. For instance, as noted above, enum_options
         *     is only relevant for the enum type and defines the set of choices that
         *     the enum could represent. The examples below show some of these
         *     type-specific custom field definitions.
         */
        get: operations["getCustomField"];
        /**
         * Update a custom field
         * @description A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged
         *     When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field.
         *     A custom field’s `type` cannot be updated.
         *     An enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`.
         *     Locked custom fields can only be updated by the user who locked the field.
         *     Returns the complete updated custom field record.
         */
        put: operations["updateCustomField"];
        post?: never;
        /**
         * Delete a custom field
         * @description A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field.
         *     Locked custom fields can only be deleted by the user who locked the field.
         *     Returns an empty data record.
         */
        delete: operations["deleteCustomField"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{workspace_gid}/custom_fields": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a workspace's custom fields
         * @description Returns a list of the compact representation of all of the custom fields in a workspace.
         */
        get: operations["getCustomFieldsForWorkspace"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom_fields/{custom_field_gid}/enum_options": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the custom field.
                 * @example 12345
                 */
                custom_field_gid: components["parameters"]["custom_field_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create an enum option
         * @description Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list.
         *     Locked custom fields can only have enum options added by the user who locked the field.
         *     Returns the full record of the newly created enum option.
         */
        post: operations["createEnumOptionForCustomField"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom_fields/{custom_field_gid}/enum_options/insert": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the custom field.
                 * @example 12345
                 */
                custom_field_gid: components["parameters"]["custom_field_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reorder a custom field's enum
         * @description Moves a particular enum option to be either before or after another specified enum option in the custom field.
         *     Locked custom fields can only be reordered by the user who locked the field.
         */
        post: operations["insertEnumOptionForCustomField"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enum_options/{enum_option_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the enum option.
                 * @example 124578
                 */
                enum_option_gid: string;
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Update an enum option
         * @description Updates an existing enum option. Enum custom fields require at least one enabled enum option.
         *     Locked custom fields can only be updated by the user who locked the field.
         *     Returns the full record of the updated enum option.
         */
        put: operations["updateEnumOption"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom_types": {
        parameters: {
            query: {
                /**
                 * @description Globally unique identifier for the project, which is used as a filter when retrieving all custom types.
                 * @example 1331
                 */
                project: components["parameters"]["project_query_param"];
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all custom types associated with an object
         * @description Returns a list of all of the custom types associated with an object. Currently, only projects are supported. Note that, as in all queries to collections which return compact representation, `opt_fields` can be used to include more data than is returned in the compact representation. See the [documentation for input/output options](https://developers.asana.com/docs/inputoutput-options) for more information.
         */
        get: operations["getCustomTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query: {
                /**
                 * @description A resource ID to subscribe to. The resource can be a task, project, or goal.
                 * @example 12345
                 */
                resource: string;
                /**
                 * @description A sync token received from the last request, or none on first sync. Events will be returned from the point in time that the sync token was generated.
                 *     *Note: On your first request, omit the sync token. The response will be the same as for an expired sync token, and will include a new valid sync token.If the sync token is too old (which may happen from time to time) the API will return a `412 Precondition Failed` error, and include a fresh sync token in the response.*
                 * @example de4774f6915eae04714ca93bb2f5ee81
                 */
                sync?: string;
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get events on a resource
         * @description Returns the full record for all events that have occurred since the sync
         *     token was created.
         *
         *     A `GET` request to the endpoint `/[path_to_resource]/events` can be made in
         *     lieu of including the resource ID in the data for the request.
         *
         *     Asana limits a single sync token to 100 events. If more than 100 events exist
         *     for a given resource, `has_more: true` will be returned in the response, indicating
         *     that there are more events to pull.
         *
         *     *Note: The resource returned will be the resource that triggered the
         *     event. This may be different from the one that the events were requested
         *     for. For example, a subscription to a project will contain events for
         *     tasks contained within the project.*
         */
        get: operations["getEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goal_relationships/{goal_relationship_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal relationship.
                 * @example 12345
                 */
                goal_relationship_gid: components["parameters"]["goal_relationship_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a goal relationship
         * @description Returns the complete updated goal relationship record for a single goal relationship.
         */
        get: operations["getGoalRelationship"];
        /**
         * Update a goal relationship
         * @description An existing goal relationship can be updated by making a PUT request on the URL for
         *     that goal relationship. Only the fields provided in the `data` block will be updated;
         *     any unspecified fields will remain unchanged.
         *
         *     Returns the complete updated goal relationship record.
         */
        put: operations["updateGoalRelationship"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goal_relationships": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get goal relationships
         * @description Returns compact goal relationship records.
         */
        get: operations["getGoalRelationships"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goals/{goal_gid}/addSupportingRelationship": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a supporting goal relationship
         * @description Creates a goal relationship by adding a supporting resource to a given goal.
         *
         *     Returns the newly created goal relationship record.
         */
        post: operations["addSupportingRelationship"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goals/{goal_gid}/removeSupportingRelationship": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Removes a supporting goal relationship
         * @description Removes a goal relationship for a given parent goal.
         */
        post: operations["removeSupportingRelationship"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goals/{goal_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a goal
         * @description <b>Required scope: </b><code>goals:read</code>
         *
         *     <table>
         *       <tr>
         *         <th>Field</th>
         *         <th>Required Scope</th>
         *       </tr>
         *       <tr>
         *         <td><code>time_period</code></td>
         *         <td><code>time_periods:read</code></td>
         *       </tr>
         *     </table>
         *
         *     Returns the complete goal record for a single goal.
         */
        get: operations["getGoal"];
        /**
         * Update a goal
         * @description An existing goal can be updated by making a PUT request on the URL for
         *     that goal. Only the fields provided in the `data` block will be updated;
         *     any unspecified fields will remain unchanged.
         *
         *     Returns the complete updated goal record.
         */
        put: operations["updateGoal"];
        post?: never;
        /**
         * Delete a goal
         * @description A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.
         *
         *     Returns an empty data record.
         */
        delete: operations["deleteGoal"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goals": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get goals
         * @description <b>Required scope: </b><code>goals:read</code>
         *
         *     Returns compact goal records.
         */
        get: operations["getGoals"];
        put?: never;
        /**
         * Create a goal
         * @description Creates a new goal in a workspace or team.
         *
         *     Returns the full record of the newly created goal.
         */
        post: operations["createGoal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goals/{goal_gid}/setMetric": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a goal metric
         * @description Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
         */
        post: operations["createGoalMetric"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goals/{goal_gid}/setMetricCurrentValue": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update a goal metric
         * @description Updates a goal's existing metric's `current_number_value` if one exists,
         *     otherwise responds with a 400 status code.
         *
         *     Returns the complete updated goal metric record.
         */
        post: operations["updateGoalMetric"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goals/{goal_gid}/addFollowers": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a collaborator to a goal
         * @description Adds followers to a goal. Returns the goal the followers were added to.
         *     Each goal can be associated with zero or more followers in the system.
         *     Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         */
        post: operations["addFollowers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goals/{goal_gid}/removeFollowers": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove a collaborator from a goal
         * @description Removes followers from a goal. Returns the goal the followers were removed from.
         *     Each goal can be associated with zero or more followers in the system.
         *     Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         */
        post: operations["removeFollowers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goals/{goal_gid}/parentGoals": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get parent goals from a goal
         * @description <b>Required scope: </b><code>goals:read</code>
         *
         *     Returns a compact representation of all of the parent goals of a goal.
         */
        get: operations["getParentGoalsForGoal"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{job_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the job.
                 * @example 12345
                 */
                job_gid: components["parameters"]["job_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a job by id
         * @description Returns the full record for a job.
         */
        get: operations["getJob"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/memberships": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple memberships
         * @description Returns compact `goal_membership`, `project_membership`, `portfolio_membership`, or `custom_field_membership` records. The possible types for `parent` in this request are `goal`, `project`, `portfolio`, or `custom_field`. An additional member (user GID or team GID) can be passed in to filter to a specific membership. Team as members are not supported for portfolios or custom fields yet.
         */
        get: operations["getMemberships"];
        put?: never;
        /**
         * Create a membership
         * @description Creates a new membership in a `goal`, `project`, `portfolio`, or `custom_field`. Teams or Users can be members of `goals` or `projects`. Portfolios and custom fields only support `users` as members.
         *
         *     Returns the full record of the newly created membership.
         */
        post: operations["createMembership"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/memberships/{membership_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the membership.
                 * @example 12345
                 */
                membership_gid: components["parameters"]["membership_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a membership
         * @description Returns a `project_membership`, `goal_membership`, `portfolio_membership`, or `custom_field_membership` record for a membership id.
         */
        get: operations["getMembership"];
        /**
         * Update a membership
         * @description An existing membership can be updated by making a `PUT` request on the membership. Only the fields provided in the `data` block will be updated;
         *     any unspecified fields will remain unchanged. Memberships on `goals`, `projects`, `portfolios`, and `custom_fields` can be updated.
         *
         *     Returns the full record of the updated membership.
         */
        put: operations["updateMembership"];
        post?: never;
        /**
         * Delete a membership
         * @description A specific, existing membership for a `goal`, `project`, `portfolio` or `custom_field` can be deleted by making a `DELETE` request
         *     on the URL for that membership.
         *
         *     Returns an empty data record.
         */
        delete: operations["deleteMembership"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization_exports": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create an organization export request
         * @description This method creates a request to export an Organization. Asana will complete the export at some point after you create the request.
         */
        post: operations["createOrganizationExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization_exports/{organization_export_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the organization export.
                 * @example 12345
                 */
                organization_export_gid: components["parameters"]["organization_export_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get details on an org export request
         * @description Returns details of a previously-requested Organization export.
         */
        get: operations["getOrganizationExport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/portfolio_memberships": {
        parameters: {
            query?: {
                /**
                 * @description The portfolio to filter results on.
                 * @example 12345
                 */
                portfolio?: components["parameters"]["portfolio_query_param"];
                /**
                 * @description The workspace to filter results on.
                 * @example 12345
                 */
                workspace?: components["parameters"]["workspace_query_param"];
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user?: components["parameters"]["user_query_param"];
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple portfolio memberships
         * @description Returns a list of portfolio memberships in compact representation. You must specify `portfolio`, `portfolio` and `user`, or `workspace` and `user`.
         */
        get: operations["getPortfolioMemberships"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/portfolio_memberships/{portfolio_membership_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /** @example 1331 */
                portfolio_membership_gid: components["parameters"]["portfolio_membership_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a portfolio membership
         * @description Returns the complete portfolio record for a single portfolio membership.
         */
        get: operations["getPortfolioMembership"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/portfolios/{portfolio_gid}/portfolio_memberships": {
        parameters: {
            query?: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user?: components["parameters"]["user_query_param"];
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get memberships from a portfolio
         * @description Returns the compact portfolio membership records for the portfolio.
         */
        get: operations["getPortfolioMembershipsForPortfolio"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/portfolios": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple portfolios
         * @description <b>Required scope: </b><code>portfolios:read</code>
         *
         *     Returns a list of the portfolios in compact representation that are owned by the current API user.
         */
        get: operations["getPortfolios"];
        put?: never;
        /**
         * Create a portfolio
         * @description Creates a new portfolio in the given workspace with the supplied name.
         *
         *     Note that portfolios created in the Asana UI may have some state
         *     (like the “Priority” custom field) which is automatically added
         *     to the portfolio when it is created. Portfolios created via our
         *     API will *not* be created with the same initial state to allow
         *     integrations to create their own starting state on a portfolio.
         */
        post: operations["createPortfolio"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/portfolios/{portfolio_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a portfolio
         * @description <b>Required scope: </b><code>portfolios:read</code>
         *
         *     Returns the complete portfolio record for a single portfolio.
         */
        get: operations["getPortfolio"];
        /**
         * Update a portfolio
         * @description An existing portfolio can be updated by making a PUT request on the URL for
         *     that portfolio. Only the fields provided in the `data` block will be updated;
         *     any unspecified fields will remain unchanged.
         *
         *     Returns the complete updated portfolio record.
         */
        put: operations["updatePortfolio"];
        post?: never;
        /**
         * Delete a portfolio
         * @description An existing portfolio can be deleted by making a DELETE request on
         *     the URL for that portfolio.
         *
         *     Returns an empty data record.
         */
        delete: operations["deletePortfolio"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/portfolios/{portfolio_gid}/items": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get portfolio items
         * @description <b>Required scope: </b><code>portfolios:read</code>
         *
         *     Get a list of the items in compact form in a portfolio.
         */
        get: operations["getItemsForPortfolio"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/portfolios/{portfolio_gid}/addItem": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a portfolio item
         * @description Add an item to a portfolio.
         *     Returns an empty data block.
         */
        post: operations["addItemForPortfolio"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/portfolios/{portfolio_gid}/removeItem": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove a portfolio item
         * @description Remove an item from a portfolio.
         *     Returns an empty data block.
         */
        post: operations["removeItemForPortfolio"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/portfolios/{portfolio_gid}/addCustomFieldSetting": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a custom field to a portfolio
         * @description Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
         */
        post: operations["addCustomFieldSettingForPortfolio"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/portfolios/{portfolio_gid}/removeCustomFieldSetting": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove a custom field from a portfolio
         * @description Removes a custom field setting from a portfolio.
         */
        post: operations["removeCustomFieldSettingForPortfolio"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/portfolios/{portfolio_gid}/addMembers": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add users to a portfolio
         * @description Adds the specified list of users as members of the portfolio.
         *     Returns the updated portfolio record.
         */
        post: operations["addMembersForPortfolio"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/portfolios/{portfolio_gid}/removeMembers": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove users from a portfolio
         * @description Removes the specified list of users from members of the portfolio.
         *     Returns the updated portfolio record.
         */
        post: operations["removeMembersForPortfolio"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project_briefs/{project_brief_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project brief.
                 * @example 12345
                 */
                project_brief_gid: components["parameters"]["project_brief_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a project brief
         * @description Get the full record for a project brief.
         */
        get: operations["getProjectBrief"];
        /**
         * Update a project brief
         * @description An existing project brief can be updated by making a PUT request on the URL for
         *     that project brief. Only the fields provided in the `data` block will be updated;
         *     any unspecified fields will remain unchanged.
         *
         *     Returns the complete updated project brief record.
         */
        put: operations["updateProjectBrief"];
        post?: never;
        /**
         * Delete a project brief
         * @description Deletes a specific, existing project brief.
         *
         *     Returns an empty data record.
         */
        delete: operations["deleteProjectBrief"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/project_briefs": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a project brief
         * @description Creates a new project brief.
         *
         *     Returns the full record of the newly created project brief.
         */
        post: operations["createProjectBrief"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project_memberships/{project_membership_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /** @example 1331 */
                project_membership_gid: components["parameters"]["project_membership_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a project membership
         * @description Returns the complete project record for a single project membership.
         */
        get: operations["getProjectMembership"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/project_memberships": {
        parameters: {
            query?: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user?: components["parameters"]["user_query_param"];
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get memberships from a project
         * @description Returns the compact project membership records for the project.
         */
        get: operations["getProjectMembershipsForProject"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project_statuses/{project_status_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The project status update to get.
                 * @example 321654
                 */
                project_status_gid: components["parameters"]["project_status_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a project status
         * @description *Deprecated: new integrations should prefer the `/status_updates/{status_gid}` route.*
         *
         *     Returns the complete record for a single status update.
         */
        get: operations["getProjectStatus"];
        put?: never;
        post?: never;
        /**
         * Delete a project status
         * @description *Deprecated: new integrations should prefer the `/status_updates/{status_gid}` route.*
         *
         *     Deletes a specific, existing project status update.
         *
         *     Returns an empty data record.
         */
        delete: operations["deleteProjectStatus"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/project_statuses": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get statuses from a project
         * @description *Deprecated: new integrations should prefer the `/status_updates` route.*
         *
         *     Returns the compact project status update records for all updates on the project.
         */
        get: operations["getProjectStatusesForProject"];
        put?: never;
        /**
         * Create a project status
         * @description *Deprecated: new integrations should prefer the `/status_updates` route.*
         *
         *     Creates a new status update on the project.
         *
         *     Returns the full record of the newly created project status update.
         */
        post: operations["createProjectStatusForProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project_templates/{project_template_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project template.
                 * @example 1331
                 */
                project_template_gid: components["parameters"]["project_template_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a project template
         * @description <b>Required scope: </b><code>project_templates:read</code>
         *
         *     Returns the complete project template record for a single project template.
         */
        get: operations["getProjectTemplate"];
        put?: never;
        post?: never;
        /**
         * Delete a project template
         * @description A specific, existing project template can be deleted by making a DELETE request on the URL for that project template.
         *
         *     Returns an empty data record.
         */
        delete: operations["deleteProjectTemplate"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project_templates": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple project templates
         * @description <b>Required scope: </b><code>project_templates:read</code>
         *
         *     Returns the compact project template records for all project templates in the given team or workspace.
         */
        get: operations["getProjectTemplates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_gid}/project_templates": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a team's project templates
         * @description <b>Required scope: </b><code>project_templates:read</code>
         *
         *     Returns the compact project template records for all project templates in the team.
         */
        get: operations["getProjectTemplatesForTeam"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project_templates/{project_template_gid}/instantiateProject": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project template.
                 * @example 1331
                 */
                project_template_gid: components["parameters"]["project_template_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Instantiate a project from a project template
         * @description <b>Required scope: </b><code>projects:write</code>
         *
         *     Creates and returns a job that will asynchronously handle the project instantiation.
         *
         *     To form this request, it is recommended to first make a request to [get a project template](/reference/getprojecttemplate). Then, from the response, copy the `gid` from the object in the `requested_dates` array. This `gid` should be used in `requested_dates` to instantiate a project.
         *
         *     _Note: The body of this request will differ if your workspace is an organization. To determine if your workspace is an organization, use the [is_organization](/reference/workspaces) parameter._
         */
        post: operations["instantiateProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple projects
         * @description <b>Required scope: </b><code>projects:read</code>
         *
         *     Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned.
         *     *Note: This endpoint may timeout for large domains. Try filtering by team!*
         */
        get: operations["getProjects"];
        put?: never;
        /**
         * Create a project
         * @description <b>Required scope: </b><code>projects:write</code>
         *
         *     Create a new project in a workspace or team.
         *
         *     Every project is required to be created in a specific workspace or
         *     organization, and this cannot be changed once set. Note that you can use
         *     the `workspace` parameter regardless of whether or not it is an
         *     organization.
         *
         *     If the workspace for your project is an organization, you must also
         *     supply a `team` to share the project with.
         *
         *     Returns the full record of the newly created project.
         */
        post: operations["createProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a project
         * @description <b>Required scope: </b><code>projects:read</code>
         *
         *     <table>
         *       <tr>
         *         <th>Field</th>
         *         <th>Required Scope</th>
         *       </tr>
         *       <tr>
         *         <td><code>custom_field_settings</code></td>
         *         <td><code>custom_fields:read</code></td>
         *       </tr>
         *       <tr>
         *         <td><code>custom_fields</code></td>
         *         <td><code>custom_fields:read</code></td>
         *       </tr>
         *     </table>
         *
         *     Returns the complete project record for a single project.
         */
        get: operations["getProject"];
        /**
         * Update a project
         * @description <b>Required scope: </b><code>projects:write</code>
         *
         *     A specific, existing project can be updated by making a PUT request on
         *     the URL for that project. Only the fields provided in the `data` block
         *     will be updated; any unspecified fields will remain unchanged.
         *
         *     When using this method, it is best to specify only those fields you wish
         *     to change, or else you may overwrite changes made by another user since
         *     you last retrieved the task.
         *
         *     Returns the complete updated project record.
         */
        put: operations["updateProject"];
        post?: never;
        /**
         * Delete a project
         * @description <b>Required scope: </b><code>projects:delete</code>
         *
         *     A specific, existing project can be deleted by making a DELETE request on
         *     the URL for that project.
         *
         *     Returns an empty data record.
         */
        delete: operations["deleteProject"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/duplicate": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Duplicate a project
         * @description <b>Required scope: </b><code>projects:write</code>
         *
         *     Creates and returns a job that will asynchronously handle the duplication.
         */
        post: operations["duplicateProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/projects": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get projects a task is in
         * @description <b>Required scope: </b><code>projects:read</code>
         *
         *     Returns a compact representation of all of the projects the task is in.
         */
        get: operations["getProjectsForTask"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_gid}/projects": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a team's projects
         * @description <b>Required scope: </b><code>projects:read</code>
         *
         *     Returns the compact project records for all projects in the team.
         */
        get: operations["getProjectsForTeam"];
        put?: never;
        /**
         * Create a project in a team
         * @description <b>Required scope: </b><code>projects:write</code>
         *
         *     Creates a project shared with the given team.
         *
         *     Returns the full record of the newly created project.
         */
        post: operations["createProjectForTeam"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{workspace_gid}/projects": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get all projects in a workspace
         * @description <b>Required scope: </b><code>projects:read</code>
         *
         *     Returns the compact project records for all projects in the workspace.
         *     *Note: This endpoint may timeout for large domains. Prefer the `/teams/{team_gid}/projects` endpoint.*
         */
        get: operations["getProjectsForWorkspace"];
        put?: never;
        /**
         * Create a project in a workspace
         * @description <b>Required scope: </b><code>projects:write</code>
         *
         *     Creates a project in the workspace.
         *
         *     If the workspace for your project is an organization, you must also
         *     supply a team to share the project with.
         *
         *     Returns the full record of the newly created project.
         */
        post: operations["createProjectForWorkspace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/addCustomFieldSetting": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a custom field to a project
         * @description <b>Required scope: </b><code>projects:write</code>
         *
         *     Custom fields are associated with projects by way of custom field settings.  This method creates a setting for the project.
         */
        post: operations["addCustomFieldSettingForProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/removeCustomFieldSetting": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove a custom field from a project
         * @description <b>Required scope: </b><code>projects:write</code>
         *
         *     Removes a custom field setting from a project.
         */
        post: operations["removeCustomFieldSettingForProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/task_counts": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get task count of a project
         * @description <b>Required scope: </b><code>projects:read</code>
         *
         *     <table>
         *       <tr>
         *         <th>Field</th>
         *         <th>Required Scope</th>
         *       </tr>
         *       <tr>
         *         <td><code>custom_field_settings</code></td>
         *         <td><code>custom_fields:read</code></td>
         *       </tr>
         *       <tr>
         *         <td><code>custom_fields</code></td>
         *         <td><code>custom_fields:read</code></td>
         *       </tr>
         *     </table>
         *
         *     Get an object that holds task count fields. **All fields are excluded by default**. You must [opt in](/docs/inputoutput-options) using `opt_fields` to get any information from this endpoint.
         *
         *     This endpoint has an additional [rate limit](/docs/rate-limits) and each field counts especially high against our [cost limits](/docs/rate-limits#cost-limits).
         *
         *     Milestones are just tasks, so they are included in the `num_tasks`, `num_incomplete_tasks`, and `num_completed_tasks` counts.
         */
        get: operations["getTaskCountsForProject"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/addMembers": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add users to a project
         * @description Adds the specified list of users as members of the project. Note that a user being added as a member may also be added as a *follower* as a result of this operation. This is because the user's default notification settings (i.e., in the "Notifications" tab of "My Profile Settings") will override this endpoint's default behavior of setting "Tasks added" notifications to `false`.
         *     Returns the updated project record.
         */
        post: operations["addMembersForProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/removeMembers": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove users from a project
         * @description Removes the specified list of users from members of the project.
         *     Returns the updated project record.
         */
        post: operations["removeMembersForProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/addFollowers": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add followers to a project
         * @description Adds the specified list of users as followers to the project. Followers are a subset of members who have opted in to receive "tasks added" notifications for a project. Therefore, if the users are not already members of the project, they will also become members as a result of this operation.
         *     Returns the updated project record.
         */
        post: operations["addFollowersForProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/removeFollowers": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove followers from a project
         * @description Removes the specified list of users from following the project, this will not affect project membership status.
         *     Returns the updated project record.
         */
        post: operations["removeFollowersForProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/saveAsTemplate": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a project template from a project
         * @description Creates and returns a job that will asynchronously handle the project template creation.
         */
        post: operations["projectSaveAsTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rule_triggers/{rule_trigger_gid}/run": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the incoming web request trigger. This value is a path parameter that is automatically generated for the API endpoint.
                 * @example 12345
                 */
                rule_trigger_gid: components["parameters"]["rule_trigger_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Trigger a rule
         * @description Trigger a rule which uses an ["incoming web request"](/docs/incoming-web-requests) trigger.
         */
        post: operations["triggerRule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sections/{section_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The globally unique identifier for the section.
                 * @example 321654
                 */
                section_gid: components["parameters"]["section_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a section
         * @description Returns the complete record for a single section.
         */
        get: operations["getSection"];
        /**
         * Update a section
         * @description A specific, existing section can be updated by making a PUT request on
         *     the URL for that project. Only the fields provided in the `data` block
         *     will be updated; any unspecified fields will remain unchanged. (note that
         *     at this time, the only field that can be updated is the `name` field.)
         *
         *     When using this method, it is best to specify only those fields you wish
         *     to change, or else you may overwrite changes made by another user since
         *     you last retrieved the task.
         *
         *     Returns the complete updated section record.
         */
        put: operations["updateSection"];
        post?: never;
        /**
         * Delete a section
         * @description A specific, existing section can be deleted by making a DELETE request on
         *     the URL for that section.
         *
         *     Note that sections must be empty to be deleted.
         *
         *     The last remaining section cannot be deleted.
         *
         *     Returns an empty data block.
         */
        delete: operations["deleteSection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/sections": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get sections in a project
         * @description Returns the compact records for all sections in the specified project.
         */
        get: operations["getSectionsForProject"];
        put?: never;
        /**
         * Create a section in a project
         * @description Creates a new section in a project.
         *     Returns the full record of the newly created section.
         */
        post: operations["createSectionForProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sections/{section_gid}/addTask": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The globally unique identifier for the section.
                 * @example 321654
                 */
                section_gid: components["parameters"]["section_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add task to section
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     Add a task to a specific, existing section. This will remove the task from other sections of the project.
         *
         *     The task will be inserted at the top of a section unless an insert_before or insert_after parameter is declared.
         *
         *     This does not work for separators (tasks with the resource_subtype of section).
         */
        post: operations["addTaskForSection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/sections/insert": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Move or Insert sections
         * @description Move sections relative to each other. One of
         *     `before_section` or `after_section` is required.
         *
         *     Sections cannot be moved between projects.
         *
         *     Returns an empty data block.
         */
        post: operations["insertSectionForProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status_updates/{status_update_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The status update to get.
                 * @example 321654
                 */
                status_update_gid: components["parameters"]["status_update_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a status update
         * @description Returns the complete record for a single status update.
         */
        get: operations["getStatus"];
        put?: never;
        post?: never;
        /**
         * Delete a status update
         * @description Deletes a specific, existing status update.
         *
         *     Returns an empty data record.
         */
        delete: operations["deleteStatus"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status_updates": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get status updates from an object
         * @description Returns the compact status update records for all updates on the object.
         */
        get: operations["getStatusesForObject"];
        put?: never;
        /**
         * Create a status update
         * @description Creates a new status update on an object.
         *     Returns the full record of the newly created status update.
         */
        post: operations["createStatusForObject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stories/{story_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the story.
                 * @example 35678
                 */
                story_gid: components["parameters"]["story_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a story
         * @description <b>Required scope: </b><code>stories:read</code>
         *
         *     Returns the full record for a single story.
         */
        get: operations["getStory"];
        /**
         * Update a story
         * @description Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
         */
        put: operations["updateStory"];
        post?: never;
        /**
         * Delete a story
         * @description Deletes a story. A user can only delete stories they have created.
         *
         *     Returns an empty data record.
         */
        delete: operations["deleteStory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/stories": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get stories from a task
         * @description <b>Required scope: </b><code>stories:read</code>
         *
         *     Returns the compact records for all stories on the task.
         */
        get: operations["getStoriesForTask"];
        put?: never;
        /**
         * Create a story on a task
         * @description Adds a story to a task. This endpoint currently only allows for comment
         *     stories to be created. The comment will be authored by the currently
         *     authenticated user, and timestamped when the server receives the request.
         *
         *     Returns the full record for the new story added to the task.
         */
        post: operations["createStoryForTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple tags
         * @description Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
         */
        get: operations["getTags"];
        put?: never;
        /**
         * Create a tag
         * @description Creates a new tag in a workspace or organization.
         *
         *     Every tag is required to be created in a specific workspace or
         *     organization, and this cannot be changed once set. Note that you can use
         *     the workspace parameter regardless of whether or not it is an
         *     organization.
         *
         *     Returns the full record of the newly created tag.
         */
        post: operations["createTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{tag_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the tag.
                 * @example 11235
                 */
                tag_gid: components["parameters"]["tag_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a tag
         * @description Returns the complete tag record for a single tag.
         */
        get: operations["getTag"];
        /**
         * Update a tag
         * @description Updates the properties of a tag. Only the fields provided in the `data`
         *     block will be updated; any unspecified fields will remain unchanged.
         *
         *     When using this method, it is best to specify only those fields you wish
         *     to change, or else you may overwrite changes made by another user since
         *     you last retrieved the tag.
         *
         *     Returns the complete updated tag record.
         */
        put: operations["updateTag"];
        post?: never;
        /**
         * Delete a tag
         * @description A specific, existing tag can be deleted by making a DELETE request on
         *     the URL for that tag.
         *
         *     Returns an empty data record.
         */
        delete: operations["deleteTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/tags": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a task's tags
         * @description Get a compact representation of all of the tags the task has.
         */
        get: operations["getTagsForTask"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{workspace_gid}/tags": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get tags in a workspace
         * @description Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
         */
        get: operations["getTagsForWorkspace"];
        put?: never;
        /**
         * Create a tag in a workspace
         * @description Creates a new tag in a workspace or organization.
         *
         *     Every tag is required to be created in a specific workspace or
         *     organization, and this cannot be changed once set. Note that you can use
         *     the workspace parameter regardless of whether or not it is an
         *     organization.
         *
         *     Returns the full record of the newly created tag.
         */
        post: operations["createTagForWorkspace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task_templates": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple task templates
         * @description Returns the compact task template records for some filtered set of task templates. You must specify a `project`
         */
        get: operations["getTaskTemplates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task_templates/{task_template_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the task template.
                 * @example 1331
                 */
                task_template_gid: components["parameters"]["task_template_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a task template
         * @description Returns the complete task template record for a single task template.
         */
        get: operations["getTaskTemplate"];
        put?: never;
        post?: never;
        /**
         * Delete a task template
         * @description A specific, existing task template can be deleted by making a DELETE request on the URL for that task template. Returns an empty data record.
         */
        delete: operations["deleteTaskTemplate"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task_templates/{task_template_gid}/instantiateTask": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the task template.
                 * @example 1331
                 */
                task_template_gid: components["parameters"]["task_template_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Instantiate a task from a task template
         * @description Creates and returns a job that will asynchronously handle the task instantiation.
         */
        post: operations["instantiateTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple tasks
         * @description <b>Required scope: </b><code>tasks:read</code>
         *
         *     Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.
         *
         *     For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/reference/searchtasksforworkspace).
         */
        get: operations["getTasks"];
        put?: never;
        /**
         * Create a task
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     Creating a new task is as easy as POSTing to the `/tasks` endpoint with a
         *     data block containing the fields you’d like to set on the task. Any
         *     unspecified fields will take on default values.
         *
         *     Every task is required to be created in a specific workspace, and this
         *     workspace cannot be changed once set. The workspace need not be set
         *     explicitly if you specify `projects` or a `parent` task instead.
         */
        post: operations["createTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a task
         * @description <b>Required scope: </b><code>tasks:read</code>
         *
         *     <table>
         *       <tr>
         *         <th>Field</th>
         *         <th>Required Scope</th>
         *       </tr>
         *       <tr>
         *         <td><code>memberships</code></td>
         *         <td><code>projects:read</code>, <code>project_sections:read</code></td>
         *       </tr>
         *       <tr>
         *         <td><code>actual_time_minutes</code></td>
         *         <td><code>time_tracking_entries:read</code></td>
         *       </tr>
         *       <tr>
         *         <td><code>custom_fields</code></td>
         *         <td><code>custom_fields:read</code></td>
         *       </tr>
         *     </table>
         *
         *     Returns the complete task record for a single task.
         */
        get: operations["getTask"];
        /**
         * Update a task
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     A specific, existing task can be updated by making a PUT request on the
         *     URL for that task. Only the fields provided in the `data` block will be
         *     updated; any unspecified fields will remain unchanged.
         *
         *     When using this method, it is best to specify only those fields you wish
         *     to change, or else you may overwrite changes made by another user since
         *     you last retrieved the task.
         *
         *     Returns the complete updated task record.
         */
        put: operations["updateTask"];
        post?: never;
        /**
         * Delete a task
         * @description <b>Required scope: </b><code>tasks:delete</code>
         *
         *     A specific, existing task can be deleted by making a DELETE request on
         *     the URL for that task. Deleted tasks go into the “trash” of the user
         *     making the delete request. Tasks can be recovered from the trash within a
         *     period of 30 days; afterward they are completely removed from the system.
         *
         *     Returns an empty data record.
         */
        delete: operations["deleteTask"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/duplicate": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Duplicate a task
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     Creates and returns a job that will asynchronously handle the duplication.
         */
        post: operations["duplicateTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_gid}/tasks": {
        parameters: {
            query?: {
                /**
                 * @description Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.
                 *
                 * @example 2012-02-22T02:06:58.158Z
                 */
                completed_since?: components["parameters"]["completed_since"];
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get tasks from a project
         * @description <b>Required scope: </b><code>tasks:read</code>
         *
         *     Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
         */
        get: operations["getTasksForProject"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sections/{section_gid}/tasks": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.
                 *
                 * @example 2012-02-22T02:06:58.158Z
                 */
                completed_since?: components["parameters"]["completed_since"];
            };
            header?: never;
            path: {
                /**
                 * @description The globally unique identifier for the section.
                 * @example 321654
                 */
                section_gid: components["parameters"]["section_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get tasks from a section
         * @description <b>Required scope: </b><code>tasks:read</code>
         *
         *     *Board view only*: Returns the compact section records for all tasks within the given section.
         */
        get: operations["getTasksForSection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{tag_gid}/tasks": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the tag.
                 * @example 11235
                 */
                tag_gid: components["parameters"]["tag_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get tasks from a tag
         * @description <b>Required scope: </b><code>tasks:read</code>
         *
         *     Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
         */
        get: operations["getTasksForTag"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user_task_lists/{user_task_list_gid}/tasks": {
        parameters: {
            query?: {
                /**
                 * @description Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.
                 *
                 * @example 2012-02-22T02:06:58.158Z
                 */
                completed_since?: components["parameters"]["completed_since"];
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the user task list.
                 * @example 12345
                 */
                user_task_list_gid: components["parameters"]["user_task_list_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get tasks from a user task list
         * @description <b>Required scope: </b><code>tasks:read</code>
         *
         *     Returns the compact list of tasks in a user’s My Tasks list.
         *     *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.*
         *     *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
         */
        get: operations["getTasksForUserTaskList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/subtasks": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get subtasks from a task
         * @description <b>Required scope: </b><code>tasks:read</code>
         *
         *     Returns a compact representation of all of the subtasks of a task.
         */
        get: operations["getSubtasksForTask"];
        put?: never;
        /**
         * Create a subtask
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
         */
        post: operations["createSubtaskForTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/setParent": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set the parent of a task
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent.
         */
        post: operations["setParentForTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/dependencies": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get dependencies from a task
         * @description <b>Required scope: </b><code>tasks:read</code>
         *
         *     Returns the compact representations of all of the dependencies of a task.
         */
        get: operations["getDependenciesForTask"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/addDependencies": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set dependencies for a task
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.
         */
        post: operations["addDependenciesForTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/removeDependencies": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unlink dependencies from a task
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     Unlinks a set of dependencies from this task.
         */
        post: operations["removeDependenciesForTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/dependents": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get dependents from a task
         * @description <b>Required scope: </b><code>tasks:read</code>
         *
         *     Returns the compact representations of all of the dependents of a task.
         */
        get: operations["getDependentsForTask"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/addDependents": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set dependents for a task
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
         */
        post: operations["addDependentsForTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/removeDependents": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unlink dependents from a task
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     Unlinks a set of dependents from this task.
         */
        post: operations["removeDependentsForTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/addProject": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a project to a task
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     Adds the task to the specified project, in the optional location
         *     specified. If no location arguments are given, the task will be added to
         *     the end of the project.
         *
         *     `addProject` can also be used to reorder a task within a project or
         *     section that already contains it.
         *
         *     At most one of `insert_before`, `insert_after`, or `section` should be
         *     specified. Inserting into a section in an non-order-dependent way can be
         *     done by specifying section, otherwise, to insert within a section in a
         *     particular place, specify `insert_before` or `insert_after` and a task
         *     within the section to anchor the position of this task.
         *
         *     A task can have at most 20 projects multi-homed to it.
         *
         *     Returns an empty data block.
         */
        post: operations["addProjectForTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/removeProject": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove a project from a task
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     Removes the task from the specified project. The task will still exist in
         *     the system, but it will not be in the project anymore.
         *
         *     Returns an empty data block.
         */
        post: operations["removeProjectForTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/addTag": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a tag to a task
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     Adds a tag to a task. Returns an empty data block.
         */
        post: operations["addTagForTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/removeTag": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove a tag from a task
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     Removes a tag from a task. Returns an empty data block.
         */
        post: operations["removeTagForTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/addFollowers": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add followers to a task
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     Adds followers to a task. Returns an empty data block.
         *     Each task can be associated with zero or more followers in the system.
         *     Requests to add/remove followers, if successful, will return the complete updated task record, described above.
         */
        post: operations["addFollowersForTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/removeFollowers": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove followers from a task
         * @description <b>Required scope: </b><code>tasks:write</code>
         *
         *     Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
         */
        post: operations["removeFollowerForTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{workspace_gid}/tasks/custom_id/{custom_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
                /**
                 * @description Generated custom ID for a task.
                 * @example EX-1
                 */
                custom_id: components["parameters"]["custom_id"];
            };
            cookie?: never;
        };
        /**
         * Get a task for a given custom ID
         * @description <b>Required scope: </b><code>tasks:read</code>
         *
         *     <table>
         *       <tr>
         *         <th>Field</th>
         *         <th>Required Scope</th>
         *       </tr>
         *       <tr>
         *         <td><code>memberships</code></td>
         *         <td><code>projects:read</code>, <code>project_sections:read</code></td>
         *       </tr>
         *       <tr>
         *         <td><code>actual_time_minutes</code></td>
         *         <td><code>time_tracking_entries:read</code></td>
         *       </tr>
         *       <tr>
         *         <td><code>custom_fields</code></td>
         *         <td><code>custom_fields:read</code></td>
         *       </tr>
         *     </table>
         *
         *     Returns a task given a custom ID shortcode.
         */
        get: operations["getTaskForCustomID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{workspace_gid}/tasks/search": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Performs full-text search on both task name and description
                 * @example Bug
                 */
                text?: string;
                /** @description Filters results by the task's resource_subtype */
                resource_subtype?: "default_task" | "milestone";
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "assignee.any"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "assignee.not"?: string;
                /**
                 * @description Comma-separated list of portfolio IDs
                 * @example 12345,23456,34567
                 */
                "portfolios.any"?: string;
                /**
                 * @description Comma-separated list of project IDs
                 * @example 12345,23456,34567
                 */
                "projects.any"?: string;
                /**
                 * @description Comma-separated list of project IDs
                 * @example 12345,23456,34567
                 */
                "projects.not"?: string;
                /**
                 * @description Comma-separated list of project IDs
                 * @example 12345,23456,34567
                 */
                "projects.all"?: string;
                /**
                 * @description Comma-separated list of section or column IDs
                 * @example 12345,23456,34567
                 */
                "sections.any"?: string;
                /**
                 * @description Comma-separated list of section or column IDs
                 * @example 12345,23456,34567
                 */
                "sections.not"?: string;
                /**
                 * @description Comma-separated list of section or column IDs
                 * @example 12345,23456,34567
                 */
                "sections.all"?: string;
                /**
                 * @description Comma-separated list of tag IDs
                 * @example 12345,23456,34567
                 */
                "tags.any"?: string;
                /**
                 * @description Comma-separated list of tag IDs
                 * @example 12345,23456,34567
                 */
                "tags.not"?: string;
                /**
                 * @description Comma-separated list of tag IDs
                 * @example 12345,23456,34567
                 */
                "tags.all"?: string;
                /**
                 * @description Comma-separated list of team IDs
                 * @example 12345,23456,34567
                 */
                "teams.any"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "followers.any"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "followers.not"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "created_by.any"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "created_by.not"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "assigned_by.any"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "assigned_by.not"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "liked_by.not"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "commented_on_by.not"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "due_on.before"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "due_on.after"?: string;
                /**
                 * @description ISO 8601 date string or `null`
                 * @example 2019-09-15
                 */
                due_on?: string | null;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "due_at.before"?: string;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "due_at.after"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "start_on.before"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "start_on.after"?: string;
                /**
                 * @description ISO 8601 date string or `null`
                 * @example 2019-09-15
                 */
                start_on?: string | null;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "created_on.before"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "created_on.after"?: string;
                /**
                 * @description ISO 8601 date string or `null`
                 * @example 2019-09-15
                 */
                created_on?: string | null;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "created_at.before"?: string;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "created_at.after"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "completed_on.before"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "completed_on.after"?: string;
                /**
                 * @description ISO 8601 date string or `null`
                 * @example 2019-09-15
                 */
                completed_on?: string | null;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "completed_at.before"?: string;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "completed_at.after"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "modified_on.before"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "modified_on.after"?: string;
                /**
                 * @description ISO 8601 date string or `null`
                 * @example 2019-09-15
                 */
                modified_on?: string | null;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "modified_at.before"?: string;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "modified_at.after"?: string;
                /**
                 * @description Filter to incomplete tasks with dependents
                 * @example false
                 */
                is_blocking?: boolean;
                /**
                 * @description Filter to tasks with incomplete dependencies
                 * @example false
                 */
                is_blocked?: boolean;
                /**
                 * @description Filter to tasks with attachments
                 * @example false
                 */
                has_attachment?: boolean;
                /**
                 * @description Filter to completed tasks
                 * @example false
                 */
                completed?: boolean;
                /**
                 * @description Filter to subtasks
                 * @example false
                 */
                is_subtask?: boolean;
                /**
                 * @description One of `due_date`, `created_at`, `completed_at`, `likes`, or `modified_at`, defaults to `modified_at`
                 * @example likes
                 */
                sort_by?: "due_date" | "created_at" | "completed_at" | "likes" | "modified_at";
                /**
                 * @description Default `false`
                 * @example true
                 */
                sort_ascending?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Search tasks in a workspace
         * @description <b>Required scope: </b><code>tasks:read</code>
         *
         *     To mirror the functionality of the Asana web app's advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need.
         *     #### Premium access
         *     Like the Asana web product's advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:
         *
         *     - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace
         *
         *     Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a `402 Payment Required` error.
         *     #### Pagination
         *     Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the `limit` query parameter.
         *     #### Eventual consistency
         *     Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product.
         *     #### Rate limits
         *     You may receive a `429 Too Many Requests` response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits).
         *     #### Custom field parameters
         *     | Parameter name | Custom field type | Accepted type |
         *     |---|---|---|
         *     | custom_fields.{gid}.is_set | All | Boolean |
         *     | custom_fields.{gid}.value | Text | String |
         *     | custom_fields.{gid}.value | Number | Number |
         *     | custom_fields.{gid}.value | Enum | Enum option ID |
         *     | custom_fields.{gid}.starts_with | Text only | String |
         *     | custom_fields.{gid}.ends_with | Text only | String |
         *     | custom_fields.{gid}.contains | Text only | String |
         *     | custom_fields.{gid}.less_than | Number only | Number |
         *     | custom_fields.{gid}.greater_than | Number only | Number |
         *
         *
         *     For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be `custom_fields.12345.is_set=true`. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: `custom_fields.12345.value=67890`.
         *
         *     **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field
         *
         *     *Note: If you specify `projects.any` and `sections.any`, you will receive tasks for the project **and** tasks for the section. If you're looking for only tasks in a section, omit the `projects.any` from the request.*
         */
        get: operations["searchTasksForWorkspace"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team_memberships/{team_membership_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /** @example 724362 */
                team_membership_gid: components["parameters"]["team_membership_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a team membership
         * @description Returns the complete team membership record for a single team membership.
         */
        get: operations["getTeamMembership"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team_memberships": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get team memberships
         * @description Returns compact team membership records.
         */
        get: operations["getTeamMemberships"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_gid}/team_memberships": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get memberships from a team
         * @description Returns the compact team memberships for the team.
         */
        get: operations["getTeamMembershipsForTeam"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_gid}/team_memberships": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user_gid: components["parameters"]["user_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get memberships from a user
         * @description Returns the compact team membership records for the user.
         */
        get: operations["getTeamMembershipsForUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a team
         * @description Creates a team within the current workspace.
         */
        post: operations["createTeam"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a team
         * @description <b>Required scope: </b><code>teams:read</code>
         *
         *     Returns the full record for a single team.
         */
        get: operations["getTeam"];
        /**
         * Update a team
         * @description Updates a team within the current workspace.
         */
        put: operations["updateTeam"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{workspace_gid}/teams": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get teams in a workspace
         * @description <b>Required scope: </b><code>teams:read</code>
         *
         *     Returns the compact records for all teams in the workspace visible to the authorized user.
         */
        get: operations["getTeamsForWorkspace"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_gid}/teams": {
        parameters: {
            query: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description The workspace or organization to filter teams on.
                 * @example 1331
                 */
                organization: string;
            };
            header?: never;
            path: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user_gid: components["parameters"]["user_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get teams for a user
         * @description <b>Required scope: </b><code>teams:read</code>
         *
         *     Returns the compact records for all teams to which the given user is assigned.
         */
        get: operations["getTeamsForUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_gid}/addUser": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a user to a team
         * @description The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.
         *
         *     Returns the complete team membership record for the newly added user.
         */
        post: operations["addUserForTeam"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_gid}/removeUser": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove a user from a team
         * @description The user making this call must be a member of the team in order to remove themselves or others.
         */
        post: operations["removeUserForTeam"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time_periods/{time_period_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the time period.
                 * @example 917392
                 */
                time_period_gid: components["parameters"]["time_period_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a time period
         * @description Returns the full record for a single time period.
         */
        get: operations["getTimePeriod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time_periods": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get time periods
         * @description Returns compact time period records.
         */
        get: operations["getTimePeriods"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_gid}/time_tracking_entries": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get time tracking entries for a task
         * @description Returns time tracking entries for a given task.
         */
        get: operations["getTimeTrackingEntriesForTask"];
        put?: never;
        /**
         * Create a time tracking entry
         * @description Creates a time tracking entry on a given task.
         *
         *     Returns the record of the newly created time tracking entry.
         */
        post: operations["createTimeTrackingEntry"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time_tracking_entries/{time_tracking_entry_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the time tracking entry.
                 * @example 917392
                 */
                time_tracking_entry_gid: components["parameters"]["time_tracking_entry_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a time tracking entry
         * @description Returns the complete time tracking entry record for a single time tracking entry.
         */
        get: operations["getTimeTrackingEntry"];
        /**
         * Update a time tracking entry
         * @description A specific, existing time tracking entry can be updated by making a `PUT` request on
         *     the URL for that time tracking entry. Only the fields provided in the `data` block
         *     will be updated; any unspecified fields will remain unchanged.
         *
         *     When using this method, it is best to specify only those fields you wish
         *     to change, or else you may overwrite changes made by another user since
         *     you last retrieved the task.
         *
         *     Returns the complete updated time tracking entry record.
         */
        put: operations["updateTimeTrackingEntry"];
        post?: never;
        /**
         * Delete a time tracking entry
         * @description A specific, existing time tracking entry can be deleted by making a `DELETE` request on
         *     the URL for that time tracking entry.
         *
         *     Returns an empty data record.
         */
        delete: operations["deleteTimeTrackingEntry"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{workspace_gid}/typeahead": {
        parameters: {
            query: {
                /** @description The type of values the typeahead should return. You can choose from one of the following: `custom_field`, `goal`, `project`, `project_template`, `portfolio`, `tag`, `task`, `team`, and `user`. Note that unlike in the names of endpoints, the types listed here are in singular form (e.g. `task`). Using multiple types is not yet supported. */
                resource_type: "custom_field" | "goal" | "project" | "project_template" | "portfolio" | "tag" | "task" | "team" | "user";
                /** @description *Deprecated: new integrations should prefer the resource_type field.* */
                type?: "custom_field" | "portfolio" | "project" | "tag" | "task" | "user";
                /**
                 * @description The string that will be used to search for relevant objects. If an empty string is passed in, the API will return results.
                 * @example Greg
                 */
                query?: string;
                /**
                 * @description The number of results to return. The default is 20 if this parameter is omitted, with a minimum of 1 and a maximum of 100. If there are fewer results found than requested, all will be returned.
                 * @example 20
                 */
                count?: number;
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get objects via typeahead
         * @description <b>Required scope: </b><code>workspace.typeahead:read</code>
         *
         *     Retrieves objects in the workspace based via an auto-completion/typeahead
         *     search algorithm. This feature is meant to provide results quickly, so do
         *     not rely on this API to provide extremely accurate search results. The
         *     result set is limited to a single page of results with a maximum size, so
         *     you won’t be able to fetch large numbers of results.
         *
         *     The typeahead search API provides search for objects from a single
         *     workspace. This endpoint should be used to query for objects when
         *     creating an auto-completion/typeahead search feature. This API is meant
         *     to provide results quickly and should not be relied upon for accurate or
         *     exhaustive search results. The results sets are limited in size and
         *     cannot be paginated.
         *
         *     Queries return a compact representation of each object which is typically
         *     the gid and name fields. Interested in a specific set of fields or all of
         *     the fields?! Of course you are. Use field selectors to manipulate what
         *     data is included in a response.
         *
         *     Resources with type `user` are returned in order of most contacted to
         *     least contacted. This is determined by task assignments, adding the user
         *     to projects, and adding the user as a follower to tasks, messages,
         *     etc.
         *
         *     Resources with type `project` are returned in order of recency. This is
         *     determined when the user visits the project, is added to the project, and
         *     completes tasks in the project.
         *
         *     Resources with type `task` are returned with priority placed on tasks
         *     the user is following, but no guarantee on the order of those tasks.
         *
         *     Resources with type `project_template` are returned with priority
         *     placed on favorited project templates.
         *
         *     Leaving the `query` string empty or omitted will give you results, still
         *     following the resource ordering above. This could be used to list users or
         *     projects that are relevant for the requesting user's api token.
         */
        get: operations["typeaheadForWorkspace"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user_task_lists/{user_task_list_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the user task list.
                 * @example 12345
                 */
                user_task_list_gid: components["parameters"]["user_task_list_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a user task list
         * @description <b>Required scope: </b><code>tasks:read</code>
         *
         *     Returns the full record for a user task list.
         */
        get: operations["getUserTaskList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_gid}/user_task_list": {
        parameters: {
            query: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description The workspace in which to get the user task list.
                 * @example 1234
                 */
                workspace: string;
            };
            header?: never;
            path: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user_gid: components["parameters"]["user_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a user's task list
         * @description <b>Required scope: </b><code>tasks:read</code>
         *
         *     Returns the full record for a user's task list.
         */
        get: operations["getUserTaskListForUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: {
                /**
                 * @description The workspace or organization ID to filter users on.
                 * @example 1331
                 */
                workspace?: string;
                /**
                 * @description The team ID to filter users on.
                 * @example 15627
                 */
                team?: string;
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple users
         * @description <b>Required scope: </b><code>users:read</code>
         *
         *     Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter.
         *     Results are sorted by user ID.
         */
        get: operations["getUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user_gid: components["parameters"]["user_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a user
         * @description <b>Required scope: </b><code>users:read</code>
         *
         *     <table>
         *       <tr>
         *         <th>Field</th>
         *         <th>Required Scope</th>
         *       </tr>
         *       <tr>
         *         <td><code>workspaces</code></td>
         *         <td><code>workspaces:read</code></td>
         *       </tr>
         *     </table>
         *
         *     Returns the full user record for the single user with the provided ID.
         */
        get: operations["getUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_gid}/favorites": {
        parameters: {
            query: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /** @description The resource type of favorites to be returned. */
                resource_type: "portfolio" | "project" | "tag" | "task" | "user" | "project_template";
                /**
                 * @description The workspace in which to get favorites.
                 * @example 1234
                 */
                workspace: string;
            };
            header?: never;
            path: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user_gid: components["parameters"]["user_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a user's favorites
         * @description <b>Required scope: </b><code>users:read</code>
         *
         *     Returns all of a user's favorites within a specified workspace and of a given type. The results are ordered exactly as they appear in the user's Asana sidebar in the web application. Note that this endpoint currently only returns favorites for the current user (i.e., the user associated with the authentication token).
         */
        get: operations["getFavoritesForUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_gid}/users": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get users in a team
         * @description <b>Required scope: </b><code>users:read</code>
         *
         *     Returns the compact records for all users that are members of the team.
         *     Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
         */
        get: operations["getUsersForTeam"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{workspace_gid}/users": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get users in a workspace or organization
         * @description <b>Required scope: </b><code>users:read</code>
         *
         *     Returns the compact records for all users in the specified workspace or organization.
         *     Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
         */
        get: operations["getUsersForWorkspace"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple webhooks
         * @description Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
         */
        get: operations["getWebhooks"];
        put?: never;
        /**
         * Establish a webhook
         * @description Establishing a webhook is a two-part process. First, a simple HTTP POST
         *     request initiates the creation similar to creating any other resource.
         *
         *     Next, in the middle of this request comes the confirmation handshake.
         *     When a webhook is created, we will send a test POST to the target with an
         *     `X-Hook-Secret` header. The target must respond with a `200 OK` or `204
         *     No Content` and a matching `X-Hook-Secret` header to confirm that this
         *     webhook subscription is indeed expected. We strongly recommend storing
         *     this secret to be used to verify future webhook event signatures.
         *
         *     The POST request to create the webhook will then return with the status
         *     of the request. If you do not acknowledge the webhook’s confirmation
         *     handshake it will fail to setup, and you will receive an error in
         *     response to your attempt to create it. This means you need to be able to
         *     receive and complete the webhook *while* the POST request is in-flight
         *     (in other words, have a server that can handle requests asynchronously).
         *
         *     Invalid hostnames like localhost will receive a 403 Forbidden status code.
         *
         *     ```
         *     # Request
         *     curl -H "Authorization: Bearer <personal_access_token>" \
         *     -X POST https://app.asana.com/api/1.0/webhooks \
         *     -d "resource=8675309" \
         *     -d "target=https://example.com/receive-webhook/7654"
         *     ```
         *
         *     ```
         *     # Handshake sent to https://example.com/
         *     POST /receive-webhook/7654
         *     X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81
         *     ```
         *
         *     ```
         *     # Handshake response sent by example.com
         *     HTTP/1.1 200
         *     X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81
         *     ```
         *
         *     ```
         *     # Response
         *     HTTP/1.1 201
         *     {
         *       "data": {
         *         "gid": "43214",
         *         "resource": {
         *           "gid": "8675309",
         *           "name": "Bugs"
         *         },
         *         "target": "https://example.com/receive-webhook/7654",
         *         "active": false,
         *         "last_success_at": null,
         *         "last_failure_at": null,
         *         "last_failure_content": null
         *       },
         *       "X-Hook-Secret": "b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81"
         *     }
         *     ```
         */
        post: operations["createWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{webhook_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the webhook.
                 * @example 12345
                 */
                webhook_gid: components["parameters"]["webhook_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a webhook
         * @description Returns the full record for the given webhook.
         */
        get: operations["getWebhook"];
        /**
         * Update a webhook
         * @description An existing webhook's filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook's previous `filters` array will be completely overwritten by the `filters` sent in the PUT request.
         */
        put: operations["updateWebhook"];
        post?: never;
        /**
         * Delete a webhook
         * @description This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
         */
        delete: operations["deleteWebhook"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace_memberships/{workspace_membership_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /** @example 12345 */
                workspace_membership_gid: components["parameters"]["workspace_membership_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a workspace membership
         * @description Returns the complete workspace record for a single workspace membership.
         */
        get: operations["getWorkspaceMembership"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_gid}/workspace_memberships": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user_gid: components["parameters"]["user_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get workspace memberships for a user
         * @description Returns the compact workspace membership records for the user.
         */
        get: operations["getWorkspaceMembershipsForUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{workspace_gid}/workspace_memberships": {
        parameters: {
            query?: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user?: components["parameters"]["user_query_param"];
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get the workspace memberships for a workspace
         * @description Returns the compact workspace membership records for the workspace.
         */
        get: operations["getWorkspaceMembershipsForWorkspace"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple workspaces
         * @description <b>Required scope: </b><code>workspaces:read</code>
         *
         *     Returns the compact records for all workspaces visible to the authorized user.
         */
        get: operations["getWorkspaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{workspace_gid}": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get a workspace
         * @description <b>Required scope: </b><code>workspaces:read</code>
         *
         *     Returns the full workspace record for a single workspace.
         */
        get: operations["getWorkspace"];
        /**
         * Update a workspace
         * @description A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged.
         *     Currently the only field that can be modified for a workspace is its name.
         *     Returns the complete, updated workspace record.
         */
        put: operations["updateWorkspace"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{workspace_gid}/addUser": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a user to a workspace or organization
         * @description Add a user to a workspace or organization.
         *     The user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.
         */
        post: operations["addUserForWorkspace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{workspace_gid}/removeUser": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove a user from a workspace or organization
         * @description Remove a user from a workspace or organization.
         *     The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address.
         *     Returns an empty data record.
         */
        post: operations["removeUserForWorkspace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/{workspace_gid}/events": {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description A sync token received from the last request, or none on first sync. Events will be returned from the point in time that the sync token was generated.
                 *     *Note: On your first request, omit the sync token. The response will be the same as for an expired sync token, and will include a new valid sync token. If the sync token is too old (which may happen from time to time) the API will return a `412 Precondition Failed` error, and include a fresh sync token in the response.*
                 * @example de4774f6915eae04714ca93bb2f5ee81
                 */
                sync?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /**
         * Get workspace events
         * @description Returns the full record for all events that have occurred since the sync token was created.
         *     The response is a list of events and the schema of each event is as described [here](/reference/events).
         *     Asana limits a single sync token to 1000 events. If more than 1000 events exist for a given domain, `has_more: true` will be returned in the response, indicating that there are more events to pull.
         */
        get: operations["getWorkspaceEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description A generic Asana Resource, containing a globally unique identifier. */
        AllocationBase: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example allocation
             */
            readonly resource_type?: string;
            /**
             * Format: date
             * @description The localized day on which the allocation starts.
             * @example 2024-02-28
             */
            start_date?: string;
            /**
             * Format: date
             * @description The localized day on which the allocation ends.
             * @example 2024-02-28
             */
            end_date?: string;
            /** @description The amount of time associated with the allocation, represented as a percentage or number of hours */
            effort?: {
                /**
                 * @description The units used for tracking effort on an allocation, either "hours" or "percent".
                 * @enum {string}
                 */
                type?: "hours" | "percent";
                /**
                 * @description The numeric effort value on the allocation.
                 * @example 50
                 */
                value?: number;
            } | null;
        };
        AllocationResponse: components["schemas"]["AllocationBase"] & {
            assignee?: components["schemas"]["UserCompact"] & {
                /**
                 * @description The name of allocation resource.
                 * @example Greg Sanchez
                 */
                name?: string;
            };
            /** @description The user who created the allocation. */
            created_by?: components["schemas"]["UserCompact"];
            /** @description The project the allocation is on. */
            parent?: components["schemas"]["ProjectCompact"];
            /**
             * @description The subtype of the allocation.
             * @example project_allocation
             */
            resource_subtype?: string;
        };
        AllocationRequest: components["schemas"]["AllocationBase"] & {
            /** @description Globally unique identifier for the user or placeholder assigned to the allocation. */
            assignee?: string;
            /** @description Globally unique identifier for the project the allocation is on. */
            parent?: string;
        };
        AddCustomFieldSettingRequest: {
            custom_field: string | components["schemas"]["CustomFieldRequest"];
            /**
             * @description Whether this field should be considered important to this container (for instance, to display in the list view of items in the container).
             * @example true
             */
            is_important?: boolean;
            /**
             * @description A gid of a Custom Field Setting on this container, before which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.
             * @example 1331
             */
            insert_before?: string;
            /**
             * @description A gid of a Custom Field Setting on this container, after which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.
             * @example 1331
             */
            insert_after?: string;
        };
        AddFollowersRequest: {
            /**
             * @description An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
             * @example 521621,621373
             */
            followers: string;
        };
        AddMembersRequest: {
            /**
             * @description An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
             * @example 521621,621373
             */
            members: string;
        };
        /** @description A generic Asana Resource, containing a globally unique identifier. */
        AsanaNamedResource: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example task
             */
            readonly resource_type?: string;
            /**
             * @description The name of the object.
             * @example Bug Task
             */
            name?: string;
        };
        /** @description A generic Asana Resource, containing a globally unique identifier. */
        AsanaResource: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example task
             */
            readonly resource_type?: string;
        };
        AttachmentBase: components["schemas"]["AttachmentCompact"];
        /** @description An *attachment* object represents any file attached to a task in Asana, whether it's an uploaded file or one associated via a third-party service such as Dropbox or Google Drive. */
        AttachmentCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example attachment
             */
            readonly resource_type?: string;
            /**
             * @description The name of the file.
             * @example Screenshot.png
             */
            readonly name?: string;
            /**
             * @description The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `onedrive`, `box`, `vimeo`, and `external`.
             * @example dropbox
             */
            resource_subtype?: string;
        };
        AttachmentRequest: {
            /**
             * @description The type of the attachment. Must be one of the given values. If not specified, a file attachment of type `asana` will be assumed. Note that if the value of `resource_subtype` is `external`, a `parent`, `name`, and `url` must also be provided.
             *
             * @example external
             * @enum {string}
             */
            resource_subtype?: "asana" | "dropbox" | "gdrive" | "onedrive" | "box" | "vimeo" | "external";
            /**
             * Format: binary
             * @description Required for `asana` attachments.
             *
             */
            file?: string;
            /** @description Required identifier of the parent task, project, or project_brief, as a string.
             *      */
            parent: string;
            /** @description The URL of the external resource being attached. Required for attachments of type `external`.
             *      */
            url?: string;
            /** @description The name of the external resource being attached. Required for attachments of type `external`.
             *      */
            name?: string;
            /** @description *Optional*. Only relevant for external attachments with a parent task.
             *     A boolean indicating whether the current app should be connected with
             *     the attachment for the purposes of showing an app components widget.
             *     Requires the app to have been added to a project the parent task is in.
             *     This property can only be set if an OAuth token is used to authenticate the request.
             *
             *     Criteria for displaying app widget:
             *     1. An OAuth token must be used to authenticate the request
             *     2. The app needs to have its `widget_metadata_url` configured in the developer console
             *     3. The task the attachment is being attached to must be in a project with the app installed */
            connect_to_app?: boolean;
        };
        AttachmentResponse: components["schemas"]["AttachmentBase"] & {
            /**
             * Format: date-time
             * @description The time at which this resource was created.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
            /**
             * Format: uri
             * @description The URL containing the content of the attachment.
             *     *Note:* May be null if the attachment is hosted by [Box](https://www.box.com/) and will be null if the attachment is a Video Message hosted by [Vimeo](https://vimeo.com/). If present, this URL may only be valid for two minutes from the time of retrieval. You should avoid persisting this URL somewhere and just refresh it on demand to ensure you do not keep stale URLs.
             * @example https://s3.amazonaws.com/assets/123/Screenshot.png
             */
            readonly download_url?: string | null;
            /**
             * Format: uri
             * @example https://s3.amazonaws.com/assets/123/Screenshot.png
             */
            readonly permanent_url?: string | null;
            /**
             * @description The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `box`, and `vimeo`.
             * @example dropbox
             */
            readonly host?: string;
            parent?: components["schemas"]["TaskCompact"] & ({
                /**
                 * @description The resource subtype of the parent resource that the filter applies to.
                 * @example default_task
                 */
                resource_subtype?: string | null;
            } | null);
            /**
             * @description The size of the attachment in bytes. Only present when the `resource_subtype` is `asana`.
             * @example 12345
             */
            readonly size?: number;
            /**
             * Format: uri
             * @description The URL where the attachment can be viewed, which may be friendlier to users in a browser than just directing them to a raw file. May be null if no view URL exists for the service.
             * @example https://www.dropbox.com/s/123/Screenshot.png
             */
            readonly view_url?: string | null;
            /** @description Whether the attachment is connected to the app making the request for the purposes of showing an app components widget. Only present when the `resource_subtype` is `external` or `gdrive`. */
            readonly connected_to_app?: boolean;
        };
        /** @description An object representing a single event within an Asana domain.
         *
         *     Every audit log event is comprised of an `event_type`, `actor`, `resource`, and `context`. Some events will include additional metadata about the event under `details`. See our [currently supported list of events](/docs/audit-log-events#supported-audit-log-events) for more details. */
        AuditLogEvent: {
            /**
             * @description Globally unique identifier of the `AuditLogEvent`, as a string.
             * @example 12345
             */
            gid?: string;
            /**
             * Format: date-time
             * @description The time the event was created.
             * @example 2021-01-01T00:00:00.000Z
             */
            created_at?: string;
            /**
             * @description The type of the event.
             * @example task_deleted
             */
            event_type?: string;
            /**
             * @description The category that this `event_type` belongs to.
             * @example deletion
             */
            event_category?: string;
            actor?: components["schemas"]["AuditLogEventActor"];
            resource?: components["schemas"]["AuditLogEventResource"];
            details?: components["schemas"]["AuditLogEventDetails"];
            context?: components["schemas"]["AuditLogEventContext"];
        };
        /** @description The entity that triggered the event. Will typically be a user. */
        AuditLogEventActor: {
            /**
             * @description The type of actor.
             *     Can be one of `user`, `asana`, `asana_support`, `anonymous`, or `external_administrator`.
             * @example user
             * @enum {string}
             */
            actor_type?: "user" | "asana" | "asana_support" | "anonymous" | "external_administrator";
            /**
             * @description Globally unique identifier of the actor, if it is a user.
             * @example 1111
             */
            gid?: string;
            /**
             * @description The name of the actor, if it is a user.
             * @example Greg Sanchez
             */
            name?: string;
            /**
             * @description The email of the actor, if it is a user.
             * @example gregsanchez@example.com
             */
            email?: string;
        };
        /** @description The context from which this event originated. */
        AuditLogEventContext: {
            /**
             * @description The type of context.
             *     Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`, `email`, or `api`.
             * @example web
             * @enum {string}
             */
            context_type?: "web" | "desktop" | "mobile" | "asana_support" | "asana" | "email" | "api";
            /**
             * @description The authentication method used in the context of an API request.
             *     Only present if the `context_type` is `api`. Can be one of `cookie`, `oauth`, `personal_access_token`, or `service_account`.
             * @enum {string}
             */
            api_authentication_method?: "cookie" | "oauth" | "personal_access_token" | "service_account";
            /**
             * @description The IP address of the client that initiated the event, if applicable.
             * @example 1.1.1.1
             */
            client_ip_address?: string;
            /**
             * @description The user agent of the client that initiated the event, if applicable.
             * @example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36
             */
            user_agent?: string;
            /** @description The name of the OAuth App that initiated the event.
             *     Only present if the `api_authentication_method` is `oauth`. */
            oauth_app_name?: string;
            /**
             * @description The name of the automation rule that initiated the event.
             * @example When Task is added to this project
             */
            rule_name?: string;
        };
        /** @description Event specific details. The schema will vary depending on the `event_type`. */
        AuditLogEventDetails: {
            old_value?: string | null;
            new_value?: string | null;
            group?: {
                [key: string]: unknown;
            };
        } & {
            [key: string]: unknown;
        };
        /** @description The primary object that was affected by this event. */
        AuditLogEventResource: {
            /**
             * @description The type of resource.
             * @example task
             */
            resource_type?: string;
            /**
             * @description The subtype of resource. Most resources will not have a subtype.
             * @example milestone
             */
            resource_subtype?: string;
            /**
             * @description Globally unique identifier of the resource.
             * @example 1111
             */
            gid?: string;
            /**
             * @description The name of the resource.
             * @example Example Task
             */
            name?: string | null;
            /** @description The email of the resource, if applicable. */
            email?: string;
        };
        /** @description A request object for use in a batch request. */
        BatchRequest: {
            actions?: components["schemas"]["BatchRequestAction"][];
        };
        /** @description An action object for use in a batch request. */
        BatchRequestAction: {
            /**
             * @description The path of the desired endpoint relative to the API’s base URL. Query parameters are not accepted here; put them in `data` instead.
             * @example /tasks/123
             */
            relative_path: string;
            /**
             * @description The HTTP method you wish to emulate for the action.
             * @example get
             * @enum {string}
             */
            method: "get" | "post" | "put" | "delete" | "patch" | "head";
            /**
             * @description For `GET` requests, this should be a map of query parameters you would have normally passed in the URL. Options and pagination are not accepted here; put them in `options` instead. For `POST`, `PATCH`, and `PUT` methods, this should be the content you would have normally put in the data field of the body.
             * @example {
             *       "assignee": "me",
             *       "workspace": "1337"
             *     }
             */
            data?: Record<string, never>;
            /**
             * @description Pagination (`limit` and `offset`) and output options (`fields` or `expand`) for the action. “Pretty” JSON output is not an available option on individual actions; if you want pretty output, specify that option on the parent request.
             * @example {
             *       "limit": 3,
             *       "fields": [
             *         "name",
             *         "notes",
             *         "completed"
             *       ]
             *     }
             */
            options?: {
                /**
                 * @description Pagination limit for the request.
                 * @example 50
                 */
                limit?: number;
                /**
                 * @description Pagination offset for the request.
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: number;
                /**
                 * @description The fields to retrieve in the request.
                 * @example [
                 *       "name",
                 *       "gid",
                 *       "notes",
                 *       "completed"
                 *     ]
                 */
                fields?: string[];
            };
        };
        /** @description A response object returned from a batch request. */
        BatchResponse: {
            /**
             * @description The HTTP status code that the invoked endpoint returned.
             * @example 200
             */
            status_code?: number;
            /**
             * @description A map of HTTP headers specific to this result. This is primarily used for returning a `Location` header to accompany a `201 Created` result.  The parent HTTP response will contain all common headers.
             * @example {
             *       "location": "/tasks/1234"
             *     }
             */
            headers?: Record<string, never>;
            /**
             * @description The JSON body that the invoked endpoint returned.
             * @example {
             *       "data": {
             *         "gid": "1967",
             *         "completed": false,
             *         "name": "Hello, world!",
             *         "notes": "How are you today?"
             *       }
             *     }
             */
            body?: Record<string, never>;
        };
        CustomFieldBase: components["schemas"]["CustomFieldCompact"] & {
            /**
             * @description [Opt In](/docs/inputoutput-options). The description of the custom field.
             * @example Development team priority
             */
            description?: string;
            /** @description *Conditional*. Only relevant for custom fields of type `enum` or `multi_enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/reference/createenumoptionforcustomfield). */
            enum_options?: components["schemas"]["EnumOption"][];
            /**
             * @description Only relevant for custom fields of type `Number`. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.
             *     For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
             *     The identifier format will always have a precision of 0.
             * @example 2
             */
            precision?: number;
            /**
             * @description The format of this custom field.
             * @example custom
             * @enum {string}
             */
            format?: "currency" | "identifier" | "percentage" | "custom" | "duration" | "none";
            /**
             * @description ISO 4217 currency code to format this custom field. This will be null if the `format` is not `currency`.
             * @example EUR
             */
            currency_code?: string | null;
            /**
             * @description This is the string that appears next to the custom field value. This will be null if the `format` is not `custom`.
             * @example gold pieces
             */
            custom_label?: string | null;
            /**
             * @description Only relevant for custom fields with `custom` format. This depicts where to place the custom label. This will be null if the `format` is not `custom`.
             * @example suffix
             * @enum {string|null}
             */
            custom_label_position?: "prefix" | "suffix" | null;
            /**
             * @description This flag describes whether this custom field is available to every container in the workspace. Before project-specific custom fields, this field was always true.
             * @example true
             */
            readonly is_global_to_workspace?: boolean;
            /**
             * @description *Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field.
             * @example true
             */
            has_notifications_enabled?: boolean;
            /**
             * @description *Conditional*. A unique identifier to associate this field with the template source of truth.
             * @example priority
             * @enum {string|null}
             */
            readonly asana_created_field?: "a_v_requirements" | "account_name" | "actionable" | "align_shipping_link" | "align_status" | "allotted_time" | "appointment" | "approval_stage" | "approved" | "article_series" | "board_committee" | "browser" | "campaign_audience" | "campaign_project_status" | "campaign_regions" | "channel_primary" | "client_topic_type" | "complete_by" | "contact" | "contact_email_address" | "content_channels" | "content_channels_needed" | "content_stage" | "content_type" | "contract" | "contract_status" | "cost" | "creation_stage" | "creative_channel" | "creative_needed" | "creative_needs" | "data_sensitivity" | "deal_size" | "delivery_appt" | "delivery_appt_date" | "department" | "department_responsible" | "design_request_needed" | "design_request_type" | "discussion_category" | "do_this_task" | "editorial_content_status" | "editorial_content_tag" | "editorial_content_type" | "effort" | "effort_level" | "est_completion_date" | "estimated_time" | "estimated_value" | "expected_cost" | "external_steps_needed" | "favorite_idea" | "feedback_type" | "financial" | "funding_amount" | "grant_application_process" | "hiring_candidate_status" | "idea_status" | "ids_link" | "ids_patient_link" | "implementation_stage" | "insurance" | "interview_area" | "interview_question_score" | "itero_scan_link" | "job_s_applied_to" | "lab" | "launch_status" | "lead_status" | "localization_language" | "localization_market_team" | "localization_status" | "meeting_minutes" | "meeting_needed" | "minutes" | "mrr" | "must_localize" | "name_of_foundation" | "need_to_follow_up" | "next_appointment" | "next_steps_sales" | "num_people" | "number_of_user_reports" | "office_location" | "onboarding_activity" | "owner" | "participants_needed" | "patient_date_of_birth" | "patient_email" | "patient_phone" | "patient_status" | "phone_number" | "planning_category" | "point_of_contact" | "position" | "post_format" | "prescription" | "priority" | "priority_level" | "product" | "product_stage" | "progress" | "project_size" | "project_status" | "proposed_budget" | "publish_status" | "reason_for_scan" | "referral" | "request_type" | "research_status" | "responsible_department" | "responsible_team" | "risk_assessment_status" | "room_name" | "sales_counterpart" | "sentiment" | "shipping_link" | "social_channels" | "stage" | "status" | "status_design" | "status_of_initiative" | "system_setup" | "task_progress" | "team" | "team_marketing" | "team_responsible" | "time_it_takes_to_complete_tasks" | "timeframe" | "treatment_type" | "type_work_requests_it" | "use_agency" | "user_name" | "vendor_category" | "vendor_type" | "word_count" | null;
        };
        /** @description Custom Fields store the metadata that is used in order to add user-specified information to tasks in Asana. Be sure to reference the [custom fields](/reference/custom-fields) developer documentation for more information about how custom fields relate to various resources in Asana.
         *
         *     Users in Asana can [lock custom fields](https://asana.com/guide/help/premium/custom-fields#gl-lock-fields), which will make them read-only when accessed by other users. Attempting to edit a locked custom field will return HTTP error code `403 Forbidden`. */
        CustomFieldCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example custom_field
             */
            readonly resource_type?: string;
            /**
             * @description The name of the custom field.
             * @example Status
             */
            name?: string;
            /**
             * @description *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values.
             *
             * @enum {string}
             */
            readonly type?: "text" | "enum" | "multi_enum" | "number" | "date" | "people";
            /** @description *Conditional*. Only relevant for custom fields of type `enum` or `multi_enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/reference/createenumoptionforcustomfield). */
            enum_options?: components["schemas"]["EnumOption"][];
            /**
             * @description *Conditional*. Determines if the custom field is enabled or not.
             * @example true
             */
            readonly enabled?: boolean;
            /**
             * @description This field tells the type of the custom field.
             * @example number
             * @enum {string}
             */
            readonly representation_type?: "text" | "enum" | "multi_enum" | "number" | "date" | "people" | "formula" | "custom_id";
            /**
             * @description This field is the unique custom ID string for the custom field.
             * @example ID
             */
            id_prefix?: string | null;
            /**
             * @description *Conditional*. This flag describes whether a custom field is a formula custom field.
             * @example false
             */
            is_formula_field?: boolean;
            /** @description *Conditional*. Only relevant for custom fields of type `date`. This object reflects the chosen date (and optionally, time) value of a `date` custom field. If no date is selected, the value of `date_value` will be `null`. */
            date_value?: {
                /**
                 * @description A string representing the date in YYYY-MM-DD format.
                 * @example 2024-08-23
                 */
                date?: string;
                /**
                 * @description A string representing the date in ISO 8601 format. If no time value is selected, the value of `date-time` will be `null`.
                 * @example 2024-08-23T22:00:00.000Z
                 */
                date_time?: string;
            } | null;
            enum_value?: components["schemas"]["EnumOption"] & (Record<string, never> | null);
            /** @description *Conditional*. Only relevant for custom fields of type `multi_enum`. This object is the chosen values of a `multi_enum` custom field. */
            multi_enum_values?: components["schemas"]["EnumOption"][];
            /**
             * @description *Conditional*. This number is the value of a `number` custom field.
             * @example 5.2
             */
            number_value?: number | null;
            /**
             * @description *Conditional*. This string is the value of a `text` custom field.
             * @example Some Value
             */
            text_value?: string | null;
            /**
             * @description A string representation for the value of the custom field. Integrations that don't require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.
             * @example blue
             */
            readonly display_value?: string | null;
        };
        CustomFieldRequest: components["schemas"]["CustomFieldBase"] & {
            /**
             * @description *Create-Only* The workspace to create a custom field in.
             * @example 1331
             */
            workspace: string;
            /** @description *Allow-listed*. Instructs the API that this Custom Field is app-owned. This parameter is allow-listed to specific apps at this point in time. For apps that are not allow-listed, providing this parameter will result in a `403 Forbidden`. */
            owned_by_app?: boolean;
            /**
             * @description *Conditional*. Only relevant for custom fields of type `people`. This array of user GIDs reflects the users to be written to a `people` custom field. Note that *write* operations will replace existing users (if any) in the custom field with the users specified in this array.
             * @example [
             *       "12345"
             *     ]
             */
            people_value?: string[];
        };
        CustomFieldCreateRequest: components["schemas"]["CustomFieldRequest"] & {
            /**
             * @description The type of the custom field. Must be one of the given values.
             * @example text
             * @enum {string}
             */
            resource_subtype: "text" | "enum" | "multi_enum" | "number" | "date" | "people";
        };
        CustomFieldResponse: components["schemas"]["CustomFieldBase"] & {
            /**
             * @description This field tells the type of the custom field.
             * @example number
             * @enum {string}
             */
            readonly representation_type?: "text" | "enum" | "multi_enum" | "number" | "date" | "people" | "formula" | "custom_id";
            /**
             * @description This field is the unique custom ID string for the custom field.
             * @example ID
             */
            id_prefix?: string | null;
            /**
             * @description *Conditional*. This flag describes whether a custom field is a formula custom field.
             * @example false
             */
            is_formula_field?: boolean;
            /**
             * @description *Conditional*. This flag describes whether a custom field is read only.
             * @example false
             */
            is_value_read_only?: boolean;
            created_by?: components["schemas"]["UserCompact"] & unknown;
            /** @description *Conditional*. Only relevant for custom fields of type `people`. This array of [compact user](/reference/users) objects reflects the values of a `people` custom field. */
            people_value?: components["schemas"]["UserCompact"][];
            /**
             * @description The privacy setting of the custom field. *Note: Administrators in your organization may restrict the values of `privacy_setting`.*
             * @example public_with_guests
             * @enum {string}
             */
            privacy_setting?: "public_with_guests" | "public" | "private";
            /**
             * @description The default access level when inviting new members to the custom field. This isn't applied when the `privacy_setting` is `private`, or the user is a guest. For local fields in a project or portfolio, the user must additionally have permission to modify the container itself.
             * @example user
             * @enum {string}
             */
            default_access_level?: "admin" | "editor" | "user";
            /**
             * @description The type of the custom field. Must be one of the given values.
             *
             * @example text
             * @enum {string}
             */
            readonly resource_subtype?: "text" | "enum" | "multi_enum" | "number" | "date" | "people";
        };
        CustomFieldSettingBase: components["schemas"]["CustomFieldSettingCompact"];
        /** @description Custom Fields Settings objects represent the many-to-many join of the Custom Field and Project as well as stores information that is relevant to that particular pairing. */
        CustomFieldSettingCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example custom_field_setting
             */
            readonly resource_type?: string;
        };
        CustomFieldSettingResponse: components["schemas"]["CustomFieldSettingBase"] & {
            project?: components["schemas"]["ProjectCompact"] & Record<string, never>;
            /**
             * @description `is_important` is used in the Asana web application to determine if this custom field is displayed in the list/grid view of a project or portfolio.
             * @example false
             */
            readonly is_important?: boolean;
            parent?: components["schemas"]["ProjectCompact"] & Record<string, never>;
            custom_field?: components["schemas"]["CustomFieldResponse"] & Record<string, never>;
        };
        CustomTypeBase: components["schemas"]["CustomTypeCompact"];
        /** @description Custom Types extend the types of Asana Objects, currently only Custom Tasks are supported. */
        CustomTypeCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example custom_type
             */
            readonly resource_type?: string;
            /**
             * @description The name of the custom type.
             * @example Bug ticket
             */
            name?: string;
        };
        CustomTypeResponse: components["schemas"]["CustomTypeBase"] & {
            /** @description The available options for the custom type. */
            status_options?: components["schemas"]["CustomTypeStatusOptionResponse"][] | null;
        };
        CustomTypeStatusOptionBase: components["schemas"]["CustomTypeStatusOptionCompact"];
        /** @description A generic Asana Resource, containing a globally unique identifier. */
        CustomTypeStatusOptionCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example custom_type_status_option
             */
            readonly resource_type?: string;
            /**
             * @description The name of the custom type status option.
             * @example Solution pending
             */
            name?: string;
        };
        CustomTypeStatusOptionResponse: components["schemas"]["CustomTypeStatusOptionBase"] & {
            /**
             * @description The completion state the custom type status option corresponds to, all custom types must have one ‘Incomplete’ and ‘Complete’ status option.
             * @example Incomplete
             */
            completion_state?: string | null;
            /**
             * @description Whether or not the custom type status option is a selectable value for the custom type.
             * @example true
             */
            enabled?: boolean | null;
            /**
             * @description The color associated with the custom type status option. Defaults to ‘none’.
             * @example blue
             */
            color?: string | null;
        };
        /** @description An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object. */
        EmptyResponse: Record<string, never>;
        /** @description Enum options are the possible values which an enum custom field can adopt. An enum custom field must contain at least 1 enum option but no more than 500.
         *
         *     You can add enum options to a custom field by using the `POST /custom_fields/custom_field_gid/enum_options` endpoint.
         *
         *     **It is not possible to remove or delete an enum option**. Instead, enum options can be disabled by updating the `enabled` field to false with the `PUT /enum_options/enum_option_gid` endpoint. Other attributes can be updated similarly.
         *
         *     On creation of an enum option, `enabled` is always set to `true`, meaning the enum option is a selectable value for the custom field. Setting `enabled=false` is equivalent to “trashing” the enum option in the Asana web app within the “Edit Fields” dialog. The enum option will no longer be selectable but, if the enum option value was previously set within a task, the task will retain the value.
         *
         *     Enum options are an ordered list and by default new enum options are inserted at the end. Ordering in relation to existing enum options can be specified on creation by using `insert_before` or `insert_after` to reference an existing enum option. Only one of `insert_before` and `insert_after` can be provided when creating a new enum option.
         *
         *     An enum options list can be reordered with the `POST /custom_fields/custom_field_gid/enum_options/insert` endpoint. */
        EnumOption: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example enum_option
             */
            readonly resource_type?: string;
            /**
             * @description The name of the enum option.
             * @example Low
             */
            name?: string;
            /**
             * @description Whether or not the enum option is a selectable value for the custom field.
             * @example true
             */
            enabled?: boolean;
            /**
             * @description The color of the enum option. Defaults to `none`.
             * @example blue
             */
            color?: string;
        };
        EnumOptionBase: components["schemas"]["EnumOption"];
        EnumOptionInsertRequest: {
            /**
             * @description The gid of the enum option to relocate.
             * @example 97285
             */
            enum_option: string;
            /**
             * @description An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
             * @example 12345
             */
            before_enum_option?: string;
            /**
             * @description An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
             * @example 12345
             */
            after_enum_option?: string;
        };
        EnumOptionRequest: components["schemas"]["EnumOptionBase"] & {
            /**
             * @description An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
             * @example 12345
             */
            insert_before?: string;
            /**
             * @description An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
             * @example 12345
             */
            insert_after?: string;
        };
        Error: {
            /**
             * @description Message providing more detail about the error that occurred, if available.
             * @example project: Missing input
             */
            readonly message?: string;
            /**
             * @description Additional information directing developers to resources on how to address and fix the problem, if available.
             * @example For more information on API status codes and how to handle them, read the docs on errors: https://asana.github.io/developer-docs/#errors'
             */
            readonly help?: string;
            /**
             * @description *500 errors only*. A unique error phrase which can be used when contacting developer support to help identify the exact occurrence of the problem in Asana's logs.
             * @example 6 sad squid snuggle softly
             */
            readonly phrase?: string;
        };
        /** @description Sadly, sometimes requests to the API are not successful. Failures can
         *     occur for a wide range of reasons. In all cases, the API should return
         *     an HTTP Status Code that indicates the nature of the failure,
         *     with a response body in JSON format containing additional information.
         *
         *
         *     In the event of a server error the response body will contain an error
         *     phrase. These phrases are automatically generated using the
         *     [node-asana-phrase
         *     library](https://github.com/Asana/node-asana-phrase) and can be used by
         *     Asana support to quickly look up the incident that caused the server
         *     error. */
        ErrorResponse: {
            errors?: components["schemas"]["Error"][];
        };
        /** @description An *event* is an object representing a change to a resource that was
         *     observed by an event subscription or delivered asynchronously to
         *     the target location of an active webhook.
         *
         *     The event may be triggered by a different `user` than the
         *     subscriber. For example, if user A subscribes to a task and user B
         *     modified it, the event's user will be user B. Note: Some events
         *     are generated by the system, and will have `null` as the user. API
         *     consumers should make sure to handle this case.
         *
         *     The `resource` that triggered the event may be different from the one
         *     that the events were requested for or the webhook is subscribed to. For
         *     example, a subscription to a project will contain events for tasks
         *     contained within the project.
         *
         *     **Note:** pay close attention to the relationship between the fields
         *     `Event.action` and `Event.change.action`.
         *     `Event.action` represents the action taken on the resource
         *     itself, and `Event.change.action` represents how the information
         *     within the resource's fields have been modified.
         *
         *     For instance, consider these scenarios:
         *
         *
         *     * When at task is added to a project, `Event.action` will be
         *     `added`, `Event.parent` will be an object with the `id` and
         *     `type` of the project, and there will be no `change` field.
         *
         *
         *     * When an assignee is set on the task, `Event.parent` will be
         *     `null`, `Event.action` will be `changed`,
         *     `Event.change.action` will be `changed`, and `new_value` will
         *     be an object with the user's `id` and `type`.
         *
         *
         *     * When a collaborator is added to the task, `Event.parent` will
         *     be `null`, `Event.action` will be `changed`,
         *     `Event.change.action` will be `added`, and `added_value` will be
         *     an object with the user's `id` and `type`. */
        EventResponse: {
            user?: components["schemas"]["UserCompact"] & unknown;
            resource?: components["schemas"]["AsanaNamedResource"] & unknown;
            /**
             * @description *Deprecated: Refer to the resource_type of the resource.* The type of the resource that generated the event.
             * @example task
             */
            readonly type?: string;
            /**
             * @description The type of action taken on the **resource** that triggered the event.  This can be one of `changed`, `added`, `removed`, `deleted`, or `undeleted` depending on the nature of the event.
             * @example changed
             */
            readonly action?: string;
            parent?: components["schemas"]["AsanaNamedResource"] & unknown;
            /**
             * Format: date-time
             * @description The timestamp when the event occurred.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
            /** @description Information about the type of change that has occurred. This field is only present when the value of the property `action`, describing the action taken on the **resource**, is `changed`. */
            readonly change?: {
                /**
                 * @description The name of the field that has changed in the resource.
                 * @example assignee
                 */
                readonly field?: string;
                /**
                 * @description The type of action taken on the **field** which has been changed.  This can be one of `changed`, `added`, or `removed` depending on the nature of the change.
                 * @example changed
                 */
                readonly action?: string;
                /**
                 * @description *Conditional.* This property is only present when the value of the event's `change.action` is `changed` _and_ the `new_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/inputoutput-options)) when using the [get events](/reference/getevents) endpoint.
                 * @example {
                 *       "gid": "12345",
                 *       "resource_type": "user"
                 *     }
                 */
                new_value?: unknown;
                /**
                 * @description *Conditional.* This property is only present when the value of the event's `change.action` is `added` _and_ the `added_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/inputoutput-options)) when using the [get events](/reference/getevents) endpoint.
                 * @example {
                 *       "gid": "12345",
                 *       "resource_type": "user"
                 *     }
                 */
                added_value?: unknown;
                /**
                 * @description *Conditional.* This property is only present when the value of the event's `change.action` is `removed` _and_ the `removed_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/inputoutput-options)) when using the [get events](/reference/getevents) endpoint.
                 * @example {
                 *       "gid": "12345",
                 *       "resource_type": "user"
                 *     }
                 */
                removed_value?: unknown;
            };
        };
        GoalAddSubgoalRequest: {
            /**
             * @description The goal gid to add as subgoal to a parent goal
             * @example 1331
             */
            subgoal: string;
            /**
             * @description An id of a subgoal of this parent goal. The new subgoal will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
             * @example 1331
             */
            insert_before?: string;
            /**
             * @description An id of a subgoal of this parent goal. The new subgoal will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
             * @example 1331
             */
            insert_after?: string;
        };
        GoalAddSupportingWorkRequest: {
            /**
             * @description The project/task/portfolio gid to add as supporting work for a goal
             * @example 1331
             */
            supporting_work: string;
        };
        /** @description A generic Asana Resource, containing a globally unique identifier. */
        GoalBase: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example goal
             */
            readonly resource_type?: string;
            /**
             * @description The name of the goal.
             * @example Grow web traffic by 30%
             */
            name?: string;
            /**
             * @description The notes of the goal with formatting as HTML.
             * @example <body>Start building brand awareness.</body>
             */
            html_notes?: string;
            /**
             * @description Free-form textual information associated with the goal (i.e. its description).
             * @example Start building brand awareness.
             */
            notes?: string;
            /**
             * @description The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
             * @example 2019-09-15
             */
            due_on?: string | null;
            /**
             * @description The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
             * @example 2019-09-14
             */
            start_on?: string | null;
            /**
             * @description *Conditional*. This property is only present when the `workspace` provided is an organization. Whether the goal belongs to the `workspace` (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.
             * @example true
             */
            is_workspace_level?: boolean;
            /**
             * @description True if the goal is liked by the authorized user, false if not.
             * @example false
             */
            liked?: boolean;
        };
        /** @description A generic Asana Resource, containing a globally unique identifier. */
        GoalCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example goal
             */
            readonly resource_type?: string;
            /**
             * @description The name of the goal.
             * @example Grow web traffic by 30%
             */
            name?: string;
            owner?: components["schemas"]["UserCompact"] & (Record<string, never> | null);
        };
        /** @description A generic Asana Resource, containing a globally unique identifier. */
        GoalMetricBase: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example task
             */
            readonly resource_type?: string;
            /**
             * @description The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
             * @example number
             * @enum {string}
             */
            readonly resource_subtype?: "number";
            /**
             * @description *Conditional*. Only relevant for goal metrics of type `Number`. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.
             *     For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
             * @example 2
             */
            precision?: number;
            /**
             * @description A supported unit of measure for the goal metric, or none.
             * @enum {string}
             */
            unit?: "none" | "currency" | "percentage";
            /**
             * @description ISO 4217 currency code to format this custom field. This will be null if the `unit` is not `currency`.
             * @example EUR
             */
            currency_code?: string | null;
            /**
             * @description This number is the start value of a goal metric of type number.
             * @example 5.2
             */
            initial_number_value?: number;
            /**
             * @description This number is the end value of a goal metric of type number. This number cannot equal `initial_number_value`.
             * @example 10.2
             */
            target_number_value?: number;
            /**
             * @description This number is the current value of a goal metric of type number.
             * @example 8.12
             */
            current_number_value?: number;
            /**
             * @description This string is the current value of a goal metric of type string.
             * @example 8.12
             */
            readonly current_display_value?: string;
            /**
             * @description This field defines how the progress value of a goal metric is being calculated. A goal's progress can be provided manually by the user, calculated automatically from contributing subgoals, projects, or tasks, or managed by an integration with an external data source, such as Salesforce.
             * @example manual
             * @enum {string}
             */
            progress_source?: "manual" | "subgoal_progress" | "project_task_completion" | "project_milestone_completion" | "task_completion" | "external";
            /**
             * @description *Conditional*. Only relevant if `metric.progress_source` is one of `subgoal_progress`, `project_task_completion`, `project_milestone_completion`, or `task_completion`. If true, we use the supporting object's custom weight to calculate the goal's progress. If false, we treat all supporting objects as equally weighted
             * @example false
             */
            is_custom_weight?: boolean;
        };
        GoalRemoveSupportingRelationshipRequest: {
            /**
             * @description The gid of the supporting resource to remove from the parent goal. Must be the gid of a goal, project, task, or portfolio.
             * @example 12345
             */
            supporting_resource: string;
        };
        GoalAddSupportingRelationshipRequest: {
            /**
             * @description The gid of the supporting resource to add to the parent goal. Must be the gid of a goal, project, task, or portfolio.
             * @example 12345
             */
            supporting_resource: string;
            /**
             * @description An id of a subgoal of this parent goal. The new subgoal will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified. Currently only supported when adding a subgoal.
             * @example 1331
             */
            insert_before?: string;
            /**
             * @description An id of a subgoal of this parent goal. The new subgoal will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified. Currently only supported when adding a subgoal.
             * @example 1331
             */
            insert_after?: string;
            /**
             * @description The weight that the supporting resource's progress will contribute to the supported goal's progress. This can be 0, 1, or any value in between.
             * @example 1
             */
            contribution_weight?: number;
        };
        /** @description A generic Asana Resource, containing a globally unique identifier. */
        GoalMetricCurrentValueRequest: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example task
             */
            readonly resource_type?: string;
            /**
             * @description *Conditional*. This number is the current value of a goal metric of type number.
             * @example 8.12
             */
            current_number_value?: number;
        };
        GoalMetricRequest: components["schemas"]["GoalMetricBase"];
        GoalRemoveSubgoalRequest: {
            /**
             * @description The goal gid to remove as subgoal from the parent goal
             * @example 1331
             */
            subgoal: string;
        };
        GoalRequestBase: components["schemas"]["GoalBase"] & {
            /**
             * @description *Conditional*. This property is only present when the `workspace` provided is an organization.
             * @example 12345
             */
            team?: string | null;
            /**
             * @description The `gid` of a workspace.
             * @example 12345
             */
            workspace?: string;
            /**
             * @description The `gid` of a time period.
             * @example 12345
             */
            time_period?: string | null;
            /**
             * @description The `gid` of a user.
             * @example 12345
             */
            owner?: string | null;
        };
        GoalRequest: components["schemas"]["GoalRequestBase"] & {
            /** @example [
             *       "12345"
             *     ] */
            followers?: string[];
        };
        GoalUpdateRequest: components["schemas"]["GoalRequestBase"] & {
            /**
             * @description The current status of this goal. When the goal is open, its status can be `green`, `yellow`, and `red` to reflect "On Track", "At Risk", and "Off Track", respectively. When the goal is closed, the value can be `missed`, `achieved`, `partial`, or `dropped`.
             *     *Note* you can only write to this property if `metric` is set.
             * @example green
             */
            status?: string | null;
        };
        GoalResponse: components["schemas"]["GoalBase"] & {
            /** @description Array of likes for users who have liked this goal. */
            readonly likes?: components["schemas"]["Like"][];
            /**
             * @description The number of users who have liked this goal.
             * @example 5
             */
            readonly num_likes?: number;
            team?: components["schemas"]["TeamCompact"] & (Record<string, never> | null);
            workspace?: components["schemas"]["WorkspaceCompact"] & Record<string, never>;
            /** @description Array of users who are members of this goal. */
            followers?: components["schemas"]["UserCompact"][];
            time_period?: components["schemas"]["TimePeriodCompact"] & (Record<string, never> | null);
            metric?: components["schemas"]["GoalMetricBase"] & ({
                /**
                 * @description *Conditional*. Only relevant for `progress_source` of type `external`. This boolean indicates whether the requester has the ability to update the current value of this metric. This returns `true` if the external metric was created by the requester, `false` otherwise.
                 * @example true
                 */
                readonly can_manage?: boolean;
            } | null);
            owner?: components["schemas"]["UserCompact"] & (Record<string, never> | null);
            current_status_update?: components["schemas"]["StatusUpdateCompact"] & unknown;
            /**
             * @description The current status of this goal. When the goal is open, its status can be `green`, `yellow`, and `red` to reflect "On Track", "At Risk", and "Off Track", respectively. When the goal is closed, the value can be `missed`, `achieved`, `partial`, or `dropped`.
             *     *Note* you can only write to this property if `metric` is set.
             * @example green
             */
            readonly status?: string | null;
        };
        GoalRelationshipBase: components["schemas"]["GoalRelationshipCompact"] & {
            supported_goal?: components["schemas"]["GoalCompact"] & Record<string, never>;
        };
        /** @description A *goal relationship* is an object representing the relationship between a goal and another goal, a project, a task, or a portfolio. */
        GoalRelationshipCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example goal_relationship
             */
            readonly resource_type?: string;
            /**
             * @description The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
             * @example subgoal
             * @enum {string}
             */
            readonly resource_subtype?: "subgoal" | "supporting_work";
            supporting_resource?: components["schemas"]["ProjectCompact"] & Record<string, never>;
            /**
             * @description The weight that the supporting resource's progress contributes to the supported goal's progress. This can be 0, 1, or any value in between.
             * @example 1
             */
            contribution_weight?: number;
        };
        GoalRelationshipRequest: components["schemas"]["GoalRelationshipBase"] & Record<string, never>;
        GoalRelationshipResponse: components["schemas"]["GoalRelationshipBase"] & Record<string, never>;
        JobBase: components["schemas"]["JobCompact"];
        /** @description A *job* is an object representing a process that handles asynchronous work. */
        JobCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example job
             */
            readonly resource_type?: string;
            /**
             * @description The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
             * @example duplicate_task
             */
            readonly resource_subtype?: string;
            /**
             * @description The current status of this job.
             * @example in_progress
             * @enum {string}
             */
            readonly status?: "not_started" | "in_progress" | "succeeded" | "failed";
            new_project?: components["schemas"]["ProjectCompact"];
            new_task?: components["schemas"]["TaskCompact"] & (Record<string, never> | null);
            new_project_template?: components["schemas"]["ProjectTemplateCompact"];
        };
        JobResponse: components["schemas"]["JobBase"];
        /** @description An object to represent a user's like. */
        Like: {
            /**
             * @description Globally unique identifier of the object, as a string.
             * @example 12345
             */
            readonly gid?: string;
            user?: components["schemas"]["UserCompact"];
        };
        /** @description A *member* object represents either a team or user. */
        MemberCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The type of the member (team or user)
             * @example user
             */
            resource_type?: string;
            /**
             * @description The name of the member
             * @example Greg Sanchez
             */
            name?: string;
        };
        MembershipCompact: components["schemas"]["GoalMembershipCompact"] | components["schemas"]["ProjectMembershipCompactResponse"] | components["schemas"]["PortfolioMembershipCompactResponse"] | components["schemas"]["CustomFieldMembershipCompact"];
        /** @example {
         *       "dependencies": [
         *         "133713",
         *         "184253"
         *       ]
         *     } */
        ModifyDependenciesRequest: {
            /** @description An array of task gids that a task depends on. */
            dependencies?: string[];
        };
        /**
         * @description A set of dependent tasks.
         * @example {
         *       "dependents": [
         *         "133713",
         *         "184253"
         *       ]
         *     }
         */
        ModifyDependentsRequest: {
            /** @description An array of task gids that are dependents of the given task. */
            dependents?: string[];
        };
        /** @description *Conditional*. This property is only present when a limit query parameter is provided in the request. When making a paginated request, the API will return a number of results as specified by the limit parameter. If more results exist, then the response will contain a next_page attribute, which will include an offset, a relative path attribute, and a full uri attribute. If there are no more pages available, next_page will be null and no offset will be provided. Note that an offset token will expire after some time, as data may have changed. */
        NextPage: {
            /**
             * @description Pagination offset for the request.
             * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
             */
            readonly offset?: string;
            /**
             * @description A relative path containing the query parameters to fetch for next_page
             * @example /tasks/12345/attachments?limit=2&offset=eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
             */
            readonly path?: string;
            /**
             * Format: uri
             * @description A full uri containing the query parameters to fetch for next_page
             * @example https://app.asana.com/api/1.0/tasks/12345/attachments?limit=2&offset=eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
             */
            readonly uri?: string;
        } | null;
        OrganizationExportBase: components["schemas"]["OrganizationExportCompact"];
        /** @description An *organization_export* object represents a request to export the complete data of an Organization in JSON format. */
        OrganizationExportCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example organization_export
             */
            readonly resource_type?: string;
            /**
             * Format: date-time
             * @description The time at which this resource was created.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
            /**
             * Format: uri
             * @description Download this URL to retreive the full export of the organization
             *     in JSON format. It will be compressed in a gzip (.gz) container.
             *
             *     *Note: May be null if the export is still in progress or
             *     failed.  If present, this URL may only be valid for 1 hour from
             *     the time of retrieval. You should avoid persisting this URL
             *     somewhere and rather refresh on demand to ensure you do not keep
             *     stale URLs.*
             * @example https://asana-export-us-east-1.s3.us-east-1.amazonaws.com/2563645399633793/domain_export/7588024658887731/download/ domain_export_2563645399633793_7588024658887731_2023018-201726.json.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256& X-Amz-Content-Sha256=xxxxxxxx&X-Amz-Date=xxxxxxxx&X-Amz-Expires=300&X-Amz-Security-Token=xxxxxxxx& X-Amz-Signature=xxxxxxxx&X-Amz-SignedHeaders=host&x-id=GetObject#_=_
             */
            readonly download_url?: string | null;
            /**
             * @description The current state of the export.
             * @example started
             * @enum {string}
             */
            readonly state?: "pending" | "started" | "finished" | "error";
            organization?: components["schemas"]["WorkspaceCompact"];
        };
        /** @description An *organization_export* request starts a job to export the complete data of the given Organization. */
        OrganizationExportRequest: {
            /**
             * @description Globally unique identifier for the workspace or organization.
             * @example 1331
             */
            organization?: string;
        };
        OrganizationExportResponse: components["schemas"]["OrganizationExportBase"];
        PortfolioAddItemRequest: {
            /**
             * @description The item to add to the portfolio.
             * @example 1331
             */
            item: string;
            /**
             * @description An id of an item in this portfolio. The new item will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
             * @example 1331
             */
            insert_before?: string;
            /**
             * @description An id of an item in this portfolio. The new item will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
             * @example 1331
             */
            insert_after?: string;
        };
        PortfolioBase: components["schemas"]["PortfolioCompact"] & {
            /**
             * @description [Opt In](/docs/inputoutput-options). True if the portfolio is archived, false if not. Archived portfolios do not show in the UI by default and may be treated differently for queries.
             * @example false
             */
            archived?: boolean;
            /**
             * @description Color of the portfolio.
             * @example light-green
             * @enum {string}
             */
            color?: "dark-pink" | "dark-green" | "dark-blue" | "dark-red" | "dark-teal" | "dark-brown" | "dark-orange" | "dark-purple" | "dark-warm-gray" | "light-pink" | "light-green" | "light-blue" | "light-red" | "light-teal" | "light-brown" | "light-orange" | "light-purple" | "light-warm-gray";
        };
        /** @description A *portfolio* gives a high-level overview of the status of multiple initiatives in Asana. Portfolios provide a dashboard overview of the state of multiple projects, including a progress report and the most recent [project status](/reference/project-statuses) update.
         *     Portfolios have some restrictions on size. Each portfolio has a max of 1500 items and, like projects, a max of 20 custom fields. */
        PortfolioCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example portfolio
             */
            readonly resource_type?: string;
            /**
             * @description The name of the portfolio.
             * @example Bug Portfolio
             */
            name?: string;
        };
        PortfolioMembershipBase: components["schemas"]["PortfolioMembershipCompact"];
        DeprecatedPortfolioMembershipBase: components["schemas"]["DeprecatedPortfolioMembershipCompact"];
        DeprecatedPortfolioMembershipResponse: components["schemas"]["DeprecatedPortfolioMembershipBase"];
        /** @description This object determines if a user is a member of a portfolio. */
        DeprecatedPortfolioMembershipCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example portfolio_membership
             */
            readonly resource_type?: string;
            /** @description [Opt In](/docs/inputoutput-options). The portfolio the user is a member of. */
            portfolio?: components["schemas"]["PortfolioCompact"];
            user?: components["schemas"]["UserCompact"];
            /**
             * @description Whether the member has admin, editor, or viewer access to the portfolio. Portfolios do not support commenter access yet.
             * @example admin
             * @enum {string}
             */
            readonly access_level?: "admin" | "editor" | "viewer";
        };
        /** @description This object determines if a user is a member of a portfolio. */
        PortfolioMembershipCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example portfolio_membership
             */
            readonly resource_type?: string;
            /** @description The portfolio the user is a member of. */
            parent?: components["schemas"]["PortfolioCompact"];
            /** @description Member can be a user or a team. */
            member?: components["schemas"]["MemberCompact"];
            /**
             * @description Whether the member has admin, editor, or viewer access to the portfolio. Portfolios do not support commenter access yet.
             * @example admin
             * @enum {string}
             */
            readonly access_level?: "admin" | "editor" | "viewer";
        };
        PortfolioMembershipCompactResponse: components["schemas"]["PortfolioMembershipCompact"] & {
            /**
             * @description The base type of this resource.
             * @example membership
             */
            resource_type?: string;
            /**
             * @description Type of the membership.
             * @example portfolio_membership
             */
            resource_subtype?: string;
        };
        PortfolioMembershipResponse: components["schemas"]["PortfolioMembershipBase"];
        PortfolioRemoveItemRequest: {
            /**
             * @description The item to remove from the portfolio.
             * @example 1331
             */
            item: string;
        };
        PortfolioRequest: components["schemas"]["PortfolioBase"] & {
            /**
             * @description An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
             * @example [
             *       "52164",
             *       "15363"
             *     ]
             */
            readonly members?: string[];
            /**
             * @description Gid of an object.
             * @example 167589
             */
            workspace?: string;
            /**
             * @description True if the portfolio is public to its workspace members.
             * @example false
             */
            public?: boolean;
        };
        PortfolioResponse: components["schemas"]["PortfolioBase"] & {
            /**
             * Format: date-time
             * @description The time at which this resource was created.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
            created_by?: components["schemas"]["UserCompact"];
            /** @description Array of custom field settings applied to the portfolio. */
            custom_field_settings?: components["schemas"]["CustomFieldSettingResponse"][];
            current_status_update?: components["schemas"]["StatusUpdateCompact"] & unknown;
            /**
             * Format: date
             * @description The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.
             * @example 2019-09-15
             */
            due_on?: string | null;
            /** @description Array of Custom Fields. */
            custom_fields?: components["schemas"]["CustomFieldCompact"][];
            readonly members?: components["schemas"]["UserCompact"][];
            owner?: components["schemas"]["UserCompact"];
            /**
             * Format: date
             * @description The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*
             * @example 2019-09-14
             */
            start_on?: string | null;
            workspace?: components["schemas"]["WorkspaceCompact"] & Record<string, never>;
            /**
             * @description A url that points directly to the object within Asana.
             * @example https://app.asana.com/0/resource/123456789/list
             */
            readonly permalink_url?: string;
            /**
             * @description True if the portfolio is public to its workspace members.
             * @example false
             */
            public?: boolean;
            /**
             * @description The default access level when inviting new members to the portfolio
             * @example viewer
             * @enum {string}
             */
            default_access_level?: "admin" | "editor" | "viewer";
            /**
             * @description The privacy setting of the portfolio. *Note: Administrators in your organization may restrict the values of `privacy_setting`.*
             * @example members_only
             * @enum {string}
             */
            privacy_setting?: "public_to_domain" | "members_only";
            /** @description Array of project templates that are in the portfolio */
            readonly project_templates?: components["schemas"]["ProjectTemplateCompact"][];
        };
        /** @description A collection of rich text that will be displayed as a preview to another app.
         *
         *     This is read-only except for a small group of whitelisted apps. */
        Preview: {
            /**
             * @description Some fallback text to display if unable to display the full preview.
             * @example Greg: Great! I like this idea.\n\nhttps//a_company.slack.com/archives/ABCDEFG/12345678
             */
            fallback?: string;
            /**
             * @description Text to display in the footer.
             * @example Mar 17, 2019 1:25 PM
             */
            footer?: string;
            /**
             * @description Text to display in the header.
             * @example Asana for Slack
             */
            header?: string;
            /**
             * @description Where the header will link to.
             * @example https://asana.comn/apps/slack
             */
            header_link?: string;
            /**
             * @description HTML formatted text for the body of the preview.
             * @example <body>Great! I like this idea.</body>
             */
            html_text?: string;
            /**
             * @description Text for the body of the preview.
             * @example Great! I like this idea.
             */
            text?: string;
            /**
             * @description Text to display as the title.
             * @example Greg
             */
            title?: string;
            /**
             * @description Where to title will link to.
             * @example https://asana.slack.com/archives/ABCDEFG/12345678
             */
            title_link?: string;
        };
        ProjectBase: components["schemas"]["ProjectCompact"] & {
            /**
             * @description True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
             * @example false
             */
            archived?: boolean;
            /**
             * @description Color of the project.
             * @example light-green
             * @enum {string|null}
             */
            color?: "dark-pink" | "dark-green" | "dark-blue" | "dark-red" | "dark-teal" | "dark-brown" | "dark-orange" | "dark-purple" | "dark-warm-gray" | "light-pink" | "light-green" | "light-blue" | "light-red" | "light-teal" | "light-brown" | "light-orange" | "light-purple" | "light-warm-gray" | "none" | null;
            /**
             * Format: date-time
             * @description The time at which this resource was created.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
            current_status?: components["schemas"]["ProjectStatusResponse"] & (Record<string, never> | null);
            current_status_update?: components["schemas"]["StatusUpdateCompact"] & (Record<string, never> | null);
            /** @description <p><strong style="color: #4573D2">Full object requires scope: </strong><code>custom_fields:read</code></p>
             *
             *     Array of Custom Field Settings (in compact form). */
            readonly custom_field_settings?: components["schemas"]["CustomFieldSettingResponse"][];
            /**
             * @description The default view (list, board, calendar, or timeline) of a project.
             * @example calendar
             * @enum {string}
             */
            default_view?: "list" | "board" | "calendar" | "timeline";
            /**
             * Format: date
             * @description *Deprecated: new integrations should prefer the `due_on` field.*
             * @example 2019-09-15
             */
            due_date?: string | null;
            /**
             * Format: date
             * @description The day on which this project is due. This takes a date with format YYYY-MM-DD.
             * @example 2019-09-15
             */
            due_on?: string | null;
            /**
             * @description [Opt In](/docs/inputoutput-options). The notes of the project with formatting as HTML.
             * @example <body>These are things we need to purchase.</body>
             */
            html_notes?: string;
            /** @description Array of users who are members of this project. */
            readonly members?: components["schemas"]["UserCompact"][];
            /**
             * Format: date-time
             * @description The time at which this project was last modified.
             *     *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly modified_at?: string;
            /**
             * @description Free-form textual information associated with the project (ie., its description).
             * @example These are things we need to purchase.
             */
            notes?: string;
            /**
             * @deprecated
             * @description *Deprecated:* new integrations use `privacy_setting` instead.
             * @example false
             */
            public?: boolean;
            /**
             * @description The privacy setting of the project. *Note: Administrators in your organization may restrict the values of `privacy_setting`.*
             * @example public_to_workspace
             * @enum {string}
             */
            privacy_setting?: "public_to_workspace" | "private_to_team" | "private";
            /**
             * Format: date
             * @description The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*
             * @example 2019-09-14
             */
            start_on?: string | null;
            /**
             * @description The default access for users or teams who join or are added as members to the project.
             * @example admin
             * @enum {string}
             */
            default_access_level?: "admin" | "editor" | "commenter" | "viewer";
            /**
             * @description The minimum access level needed for project members to modify this project's workflow and appearance.
             * @example admin
             * @enum {string}
             */
            minimum_access_level_for_customization?: "admin" | "editor";
            /**
             * @description The minimum access level needed for project members to share the project and manage project memberships.
             * @example admin
             * @enum {string}
             */
            minimum_access_level_for_sharing?: "admin" | "editor";
        };
        ProjectBriefBase: components["schemas"]["ProjectBriefCompact"] & {
            /**
             * @description The title of the project brief.
             * @example Stuff to buy — Project Brief
             */
            title?: string;
            /**
             * @description HTML formatted text for the project brief.
             * @example <body>This is a <strong>project brief</strong>.</body>
             */
            html_text?: string;
        };
        /** @description A *Project Brief* allows you to explain the what and why of the project to your team. */
        ProjectBriefCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example project_brief
             */
            readonly resource_type?: string;
        };
        ProjectBriefRequest: components["schemas"]["ProjectBriefBase"] & {
            /**
             * @description The plain text of the project brief. When writing to a project brief, you can specify either `html_text` (preferred) or `text`, but not both.
             * @example This is a project brief.
             */
            text?: string;
        };
        ProjectBriefResponse: components["schemas"]["ProjectBriefBase"] & {
            /**
             * @description [Opt In](/docs/inputoutput-options). The plain text of the project brief.
             * @example This is a project brief.
             */
            text?: string;
            /**
             * @description A url that points directly to the object within Asana.
             * @example https://app.asana.com/0/11111111/22222222
             */
            readonly permalink_url?: string;
            project?: components["schemas"]["ProjectCompact"] & Record<string, never>;
        };
        /** @description A *project* represents a prioritized list of tasks in Asana or a board with columns of tasks represented as cards. It exists in a single workspace or organization and is accessible to a subset of users in that workspace or organization, depending on its permissions. */
        ProjectCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example project
             */
            readonly resource_type?: string;
            /**
             * @description Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
             * @example Stuff to buy
             */
            name?: string;
        };
        ProjectDuplicateRequest: {
            /**
             * @description The name of the new project.
             * @example New Project Name
             */
            name: string;
            /**
             * @description Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project.
             * @example 12345
             */
            team?: string;
            /**
             * @description A comma-separated list of elements that will be duplicated to the new project. Tasks are always included.
             *     ##### Fields
             *     - allocations
             *     - forms
             *     - members
             *     - notes
             *     - task_assignee
             *     - task_attachments
             *     - task_dates
             *     - task_dependencies
             *     - task_followers
             *     - task_notes
             *     - task_projects
             *     - task_subtasks
             *     - task_tags
             * @example [
             *       "allocations,members,notes,forms,task_notes,task_assignee,task_subtasks,task_attachments,task_dates,task_dependencies,task_followers,task_tags,task_projects"
             *     ]
             */
            include?: string;
            /** @description A dictionary of options to auto-shift dates. `task_dates` must be included to use this option. Requires either `start_on` or `due_on`, but not both. */
            schedule_dates?: {
                /**
                 * @description Determines if the auto-shifted dates should skip weekends.
                 * @example true
                 */
                should_skip_weekends: boolean;
                /**
                 * @description Sets the last due date in the duplicated project to the given date. The rest of the due dates will be offset by the same amount as the due dates in the original project.
                 * @example 2019-05-21
                 */
                due_on?: string;
                /**
                 * @description Sets the first start date in the duplicated project to the given date. The rest of the start dates will be offset by the same amount as the start dates in the original project.
                 * @example 2019-05-21
                 */
                start_on?: string;
            };
        };
        CustomFieldMembershipBase: components["schemas"]["CustomFieldMembershipCompact"];
        /** @description This object describes a user's membership to a custom field including their level of access (Admin, Editor, or User). */
        CustomFieldMembershipCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example custom_field_membership
             */
            readonly resource_type?: string;
            /**
             * @description Type of the membership.
             * @example custom_field_membership
             */
            resource_subtype?: string;
            /** @description The custom field the user is a member of. */
            parent?: components["schemas"]["CustomFieldCompact"];
            /** @description Member is a user */
            member?: components["schemas"]["UserCompact"];
            /**
             * @description Whether the member has admin, editor, or user access to the custom field.
             * @example admin
             * @enum {string}
             */
            readonly access_level?: "admin" | "editor" | "user";
        };
        CustomFieldMembershipResponse: components["schemas"]["CustomFieldMembershipBase"];
        ProjectMembershipBase: components["schemas"]["ProjectMembershipCompact"];
        /** @description This object describes a team or a user's membership to a project including their level of access (Admin, Editor, Commenter, or Viewer). */
        ProjectMembershipCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example project_membership
             */
            readonly resource_type?: string;
            /** @description [Opt In](/docs/inputoutput-options). The project the user is a member of. */
            parent?: components["schemas"]["ProjectCompact"];
            /** @description Member can be a user or a team. */
            member?: components["schemas"]["MemberCompact"];
            /**
             * @description Whether the member has admin, editor, commenter, or viewer access to the project.
             * @example admin
             * @enum {string}
             */
            readonly access_level?: "admin" | "editor" | "commenter" | "viewer";
        };
        ProjectMembershipCompactResponse: components["schemas"]["ProjectMembershipCompact"] & {
            /**
             * @description The base type of this resource.
             * @example membership
             */
            resource_type?: string;
            /**
             * @description Type of the membership.
             * @example project_membership
             */
            resource_subtype?: string;
        };
        ProjectMembershipNormalResponse: components["schemas"]["ProjectMembershipBase"] & {
            user?: components["schemas"]["UserCompact"];
            /** @description [Opt In](/docs/inputoutput-options). The project the user is a member of. */
            project?: components["schemas"]["ProjectCompact"];
            /**
             * @description The base type of this resource.
             * @example project_membership
             */
            resource_type?: string;
            /**
             * @description Whether the member has full access or comment-only access to the project.
             * @example full_write
             * @enum {string}
             */
            readonly write_access?: "full_write" | "comment_only";
        };
        ProjectRequest: components["schemas"]["ProjectBase"] & {
            /**
             * @description An object where each key is the GID of a custom field and its corresponding value is either an enum GID, string, number, or object (depending on the custom field type). See the [custom fields guide](/docs/custom-fields-guide) for details on creating and updating custom field values.
             * @example {
             *       "5678904321": "On Hold",
             *       "4578152156": "Not Started"
             *     }
             */
            custom_fields?: {
                [key: string]: string;
            };
            /**
             * @description *Create-only*. Comma separated string of users. Followers are a subset of members who have opted in to receive "tasks added" notifications for a project.
             * @example 12345,23456
             */
            followers?: string;
            /**
             * @description The current owner of the project, may be null.
             * @example 12345
             */
            owner?: string | null;
            /**
             * @description The team that this project is shared with.
             * @example 12345
             */
            team?: string;
            /**
             * @description The `gid` of a workspace.
             * @example 12345
             */
            workspace?: string;
        };
        ProjectUpdateRequest: components["schemas"]["ProjectBase"] & {
            /**
             * @description An object where each key is the GID of a custom field and its corresponding value is either an enum GID, string, number, or object (depending on the custom field type). See the [custom fields guide](/docs/custom-fields-guide) for details on creating and updating custom field values.
             * @example {
             *       "5678904321": "On Hold",
             *       "4578152156": "Not Started"
             *     }
             */
            custom_fields?: {
                [key: string]: string;
            };
            /**
             * @description *Create-only*. Comma separated string of users. Followers are a subset of members who have opted in to receive "tasks added" notifications for a project.
             * @example 12345,23456
             */
            followers?: string;
            /**
             * @description The current owner of the project, may be null.
             * @example 12345
             */
            owner?: string | null;
            /**
             * @description The team that this project is shared with.
             * @example 12345
             */
            team?: string;
        };
        ProjectResponse: components["schemas"]["ProjectBase"] & {
            /** @description <p><strong style="color: #4573D2">Full object requires scope: </strong><code>custom_fields:read</code></p>
             *
             *     Array of Custom Fields. */
            readonly custom_fields?: components["schemas"]["CustomFieldCompact"][];
            /**
             * @description True if the project is currently marked complete, false if not.
             * @example false
             */
            readonly completed?: boolean;
            /**
             * Format: date-time
             * @description The time at which this project was completed, or null if the project is not completed.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly completed_at?: string | null;
            completed_by?: components["schemas"]["UserCompact"] & unknown;
            /** @description Array of users following this project. Followers are a subset of members who have opted in to receive "tasks added" notifications for a project. */
            readonly followers?: components["schemas"]["UserCompact"][];
            /** @description The current owner of the project, may be null. */
            owner?: components["schemas"]["UserCompact"] & (Record<string, never> | null);
            team?: components["schemas"]["TeamCompact"] & Record<string, never>;
            /**
             * @description The icon for a project.
             * @example chat_bubbles
             * @enum {string|null}
             */
            icon?: "list" | "board" | "timeline" | "calendar" | "rocket" | "people" | "graph" | "star" | "bug" | "light_bulb" | "globe" | "gear" | "notebook" | "computer" | "check" | "target" | "html" | "megaphone" | "chat_bubbles" | "briefcase" | "page_layout" | "mountain_flag" | "puzzle" | "presentation" | "line_and_symbols" | "speed_dial" | "ribbon" | "shoe" | "shopping_basket" | "map" | "ticket" | "coins" | null;
            /**
             * @description A url that points directly to the object within Asana.
             * @example https://app.asana.com/1/12345/project/123456789
             */
            readonly permalink_url?: string;
            project_brief?: components["schemas"]["ProjectBriefCompact"] & (Record<string, never> | null);
            created_from_template?: components["schemas"]["ProjectTemplateCompact"] & (Record<string, never> | null);
            workspace?: components["schemas"]["WorkspaceCompact"] & Record<string, never>;
        };
        ProjectSectionInsertRequest: {
            /**
             * @description The section to reorder.
             * @example 321654
             */
            section: string;
            /**
             * @description Insert the given section immediately before the section specified by this parameter.
             * @example 86420
             */
            before_section?: string;
            /**
             * @description Insert the given section immediately after the section specified by this parameter.
             * @example 987654
             */
            after_section?: string;
        };
        ProjectStatusBase: components["schemas"]["ProjectStatusCompact"] & {
            /**
             * @description The text content of the status update.
             * @example The project is moving forward according to plan...
             */
            text?: string;
            /**
             * @description [Opt In](/docs/inputoutput-options). The text content of the status update with formatting as HTML.
             * @example <body>The project <strong>is</strong> moving forward according to plan...</body>
             */
            html_text?: string;
            /**
             * @description The color associated with the status update.
             * @enum {string}
             */
            color?: "green" | "yellow" | "red" | "blue" | "complete";
        };
        /** @description *Deprecated: new integrations should prefer the `status_update` resource.*
         *     A *project status* is an update on the progress of a particular project, and is sent out to all project followers when created. These updates include both text describing the update and a color code intended to represent the overall state of the project: "green" for projects that are on track, "yellow" for projects at risk, and "red" for projects that are behind. */
        ProjectStatusCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example project_status
             */
            readonly resource_type?: string;
            /**
             * @description The title of the project status update.
             * @example Status Update - Jun 15
             */
            title?: string;
        };
        ProjectStatusRequest: components["schemas"]["ProjectStatusBase"];
        ProjectStatusResponse: components["schemas"]["ProjectStatusBase"] & {
            author?: components["schemas"]["UserCompact"];
            /**
             * Format: date-time
             * @description The time at which this resource was created.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
            created_by?: components["schemas"]["UserCompact"];
            /**
             * Format: date-time
             * @description The time at which this project status was last modified.
             *     *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the project status.*
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly modified_at?: string;
        };
        /** @description A *project template* is an object that allows new projects to be created with a predefined setup, which may include tasks, sections, Rules, etc. It simplifies the process of running a workflow that involves a similar set of work every time. */
        ProjectTemplateCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example project_template
             */
            readonly resource_type?: string;
            /**
             * @description Name of the project template.
             * @example Packing list
             */
            name?: string;
        };
        ProjectTemplateBase: components["schemas"]["ProjectTemplateCompact"] & {
            /**
             * @description Free-form textual information associated with the project template
             * @example These are things we need to pack for a trip.
             */
            description?: string;
            /**
             * @description The description of the project template with formatting as HTML.
             * @example <body>These are things we need to pack for a trip.</body>
             */
            html_description?: string;
            /**
             * @description True if the project template is public to its team.
             * @example false
             */
            public?: boolean;
            /** @description The current owner of the project template, may be null. */
            owner?: components["schemas"]["UserCompact"] & (Record<string, never> | null);
            team?: components["schemas"]["TeamCompact"];
            /** @description Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project. */
            readonly requested_dates?: components["schemas"]["DateVariableCompact"][];
            /**
             * @description Color of the project template.
             * @example light-green
             * @enum {string|null}
             */
            color?: "dark-pink" | "dark-green" | "dark-blue" | "dark-red" | "dark-teal" | "dark-brown" | "dark-orange" | "dark-purple" | "dark-warm-gray" | "light-pink" | "light-green" | "light-blue" | "light-red" | "light-teal" | "light-brown" | "light-orange" | "light-purple" | "light-warm-gray" | null;
            /** @description Array of template roles in this project template. User Ids can be provided for these variables when instantiating a project to assign template tasks to the user. */
            requested_roles?: components["schemas"]["TemplateRole"][];
        };
        ProjectTemplateResponse: components["schemas"]["ProjectTemplateBase"];
        ProjectTemplateInstantiateProjectRequest: {
            /**
             * @description The name of the new project.
             * @example New Project Name
             */
            name: string;
            /**
             * @description *Optional*. Sets the team of the new project. If the project template exists in an _organization_, you may specify a value for `team`. If no value is provided then it defaults to the same team as the project template.
             * @example 12345
             */
            team?: string;
            /**
             * @deprecated
             * @description *Deprecated:* new integrations use `privacy_setting` instead.
             * @example true
             */
            public?: boolean;
            /**
             * @description The privacy setting of the project. *Note: Administrators in your organization may restrict the values of `privacy_setting`.*
             * @example public_to_workspace
             * @enum {string}
             */
            privacy_setting?: "public_to_workspace" | "private_to_team" | "private";
            /**
             * @description *Optional*. If set to `true`, the endpoint returns an "Unprocessable Entity" error if you fail to provide a calendar date value for any date variable. If set to `false`, a default date is used for each unfulfilled date variable (e.g., the current date is used as the Start Date of a project).
             * @example true
             */
            is_strict?: boolean;
            /** @description *Conditional*. Array of mappings of date variables to calendar dates. This property is required in the instantiation request if the project template includes dates (e.g., a start date on a task). */
            requested_dates?: components["schemas"]["DateVariableRequest"][];
            /** @description Array of mappings of template roles to user ids */
            requested_roles?: components["schemas"]["RequestedRoleRequest"][];
        };
        DateVariableCompact: {
            /**
             * @description Globally unique identifier of the date field in the project template. A value of `1` refers to the project start date, while `2` refers to the project due date.
             * @example 1
             */
            readonly gid?: string;
            /**
             * @description The name of the date variable.
             * @example Start Date
             */
            readonly name?: string;
            /**
             * @description The description of what the date variable is used for when instantiating a project.
             * @example Choose a start date for your project.
             */
            readonly description?: string;
        };
        DateVariableRequest: {
            /**
             * @description Globally unique identifier of the date field in the project template. A value of `1` refers to the project start date, while `2` refers to the project due date.
             * @example 1
             */
            gid?: string;
            /**
             * Format: date-time
             * @description The date with which the date variable should be replaced when instantiating a project. This takes a date with `YYYY-MM-DD` format.
             * @example 2022-01-01
             */
            value?: string | null;
        };
        RequestedRoleRequest: {
            /**
             * @description Globally unique identifier of the template role in the project template.
             * @example 1
             */
            gid?: string;
            /**
             * @description The user id that should be assigned to the template role.
             * @example 123
             */
            value?: string;
        };
        ProjectSaveAsTemplateRequest: {
            /**
             * @description The name of the new project template.
             * @example New Project Template
             */
            name: string;
            /**
             * @description Sets the team of the new project template. If the project exists in an organization, specify team and not workspace.
             * @example 12345
             */
            team?: string;
            /**
             * @description Sets the workspace of the new project template. Only specify workspace if the project exists in a workspace.
             * @example 12345
             */
            workspace?: string;
            /**
             * @description Sets the project template to public to its team.
             * @example true
             */
            public: boolean;
        };
        RuleTriggerRequest: {
            /**
             * @description The ID of the resource. For the duration of the beta, this resource is always a task, and this task must exist in the project in which the rule is created.
             * @example 12345
             */
            resource: string;
            /**
             * @description The dynamic keys and values of the request. These fields are intended to be used in the action for the rule associated with this trigger.
             * @example {
             *       "jira_ticket_name": "Test",
             *       "jira_ticket_id": "123"
             *     }
             */
            action_data: {
                [key: string]: unknown;
            };
        };
        RuleTriggerResponse: {
            /**
             * @description Message providing more detail about the result
             * @example Successfully saved the payload and ran the rule
             */
            message?: string;
        };
        RemoveCustomFieldSettingRequest: {
            /**
             * @description The custom field to remove from this portfolio.
             * @example 14916
             */
            custom_field: string;
        };
        RemoveFollowersRequest: {
            /**
             * @description An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
             * @example 521621,621373
             */
            followers: string;
        };
        RemoveMembersRequest: {
            /**
             * @description An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
             * @example 521621,621373
             */
            members: string;
        };
        SectionBase: components["schemas"]["SectionCompact"];
        /** @description A *section* is a subdivision of a project that groups tasks together. It can either be a header above a list of tasks in a list view or a column in a board view of a project. */
        SectionCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example section
             */
            readonly resource_type?: string;
            /**
             * @description The name of the section (i.e. the text displayed as the section header).
             * @example Next Actions
             */
            name?: string;
        };
        SectionRequest: {
            /**
             * @description The text to be displayed as the section name. This cannot be an empty string.
             * @example Next Actions
             */
            name: string;
            /**
             * @description An existing section within this project before which the added section should be inserted. Cannot be provided together with insert_after.
             * @example 86420
             */
            insert_before?: string;
            /**
             * @description An existing section within this project after which the added section should be inserted. Cannot be provided together with insert_before.
             * @example 987654
             */
            insert_after?: string;
        };
        SectionResponse: components["schemas"]["SectionBase"] & {
            /**
             * Format: date-time
             * @description The time at which this resource was created.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
            project?: components["schemas"]["ProjectCompact"];
            /** @description *Deprecated - please use project instead* */
            readonly projects?: components["schemas"]["ProjectCompact"][];
        };
        SectionTaskInsertRequest: {
            /**
             * @description The task to add to this section.
             * @example 123456
             */
            task: string;
            /**
             * @description An existing task within this section before which the added task should be inserted. Cannot be provided together with insert_after.
             * @example 86420
             */
            insert_before?: string;
            /**
             * @description An existing task within this section after which the added task should be inserted. Cannot be provided together with insert_before.
             * @example 987654
             */
            insert_after?: string;
        };
        StatusUpdateBase: components["schemas"]["StatusUpdateCompact"] & {
            /**
             * @description The text content of the status update.
             * @example The project is moving forward according to plan...
             */
            text: string;
            /**
             * @description [Opt In](/docs/inputoutput-options). The text content of the status update with formatting as HTML.
             * @example <body>The project <strong>is</strong> moving forward according to plan...</body>
             */
            html_text?: string;
            /**
             * @description The type associated with the status update. This represents the current state of the object this object is on.
             * @enum {string}
             */
            status_type: "on_track" | "at_risk" | "off_track" | "on_hold" | "complete" | "achieved" | "partial" | "missed" | "dropped";
        };
        /** @description A *status update* is an update on the progress of a particular project, portfolio, or goal, and is sent out to all of its parent's followers when created. These updates include both text describing the update and a `status_type` intended to represent the overall state of the project. */
        StatusUpdateCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example status_update
             */
            readonly resource_type?: string;
            /**
             * @description The title of the status update.
             * @example Status Update - Jun 15
             */
            title?: string;
            /**
             * @description The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
             *     The `resource_subtype`s for `status` objects represent the type of their parent.
             * @example project_status_update
             * @enum {string}
             */
            readonly resource_subtype?: "project_status_update" | "portfolio_status_update" | "goal_status_update";
        };
        StatusUpdateRequest: components["schemas"]["StatusUpdateBase"] & {
            parent: string;
        };
        StatusUpdateResponse: components["schemas"]["StatusUpdateBase"] & {
            author?: components["schemas"]["UserCompact"];
            /**
             * Format: date-time
             * @description The time at which this resource was created.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
            created_by?: components["schemas"]["UserCompact"];
            /**
             * @description *Deprecated - please use liked instead* True if the status is hearted by the authorized user, false if not.
             * @example true
             */
            readonly hearted?: boolean;
            /** @description *Deprecated - please use likes instead* Array of likes for users who have hearted this status. */
            readonly hearts?: components["schemas"]["Like"][];
            /**
             * @description True if the status is liked by the authorized user, false if not.
             * @example true
             */
            liked?: boolean;
            /** @description Array of likes for users who have liked this status. */
            readonly likes?: components["schemas"]["Like"][];
            /**
             * Format: date-time
             * @description The time at which this project status was last modified.
             *     *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the status.*
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly modified_at?: string;
            /**
             * @description *Deprecated - please use likes instead* The number of users who have hearted this status.
             * @example 5
             */
            readonly num_hearts?: number;
            /**
             * @description The number of users who have liked this status.
             * @example 5
             */
            readonly num_likes?: number;
            parent?: components["schemas"]["ProjectCompact"] & Record<string, never>;
        };
        /** @description A story represents an activity associated with an object in the Asana system. */
        StoryBase: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example story
             */
            readonly resource_type?: string;
            /**
             * Format: date-time
             * @description The time at which this resource was created.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
            /**
             * @description The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
             * @example comment_added
             */
            readonly resource_subtype?: string;
            /**
             * @description The plain text of the comment to add. Cannot be used with html_text.
             * @example This is a comment.
             */
            text?: string;
            /**
             * @description [Opt In](/docs/inputoutput-options). HTML formatted text for a comment. This will not include the name of the creator.
             * @example <body>This is a comment.</body>
             */
            html_text?: string;
            /**
             * @description *Conditional*. Whether the story should be pinned on the resource.
             * @example false
             */
            is_pinned?: boolean;
            /**
             * @description The name of the sticker in this story. `null` if there is no sticker.
             * @example dancing_unicorn
             * @enum {string}
             */
            sticker_name?: "green_checkmark" | "people_dancing" | "dancing_unicorn" | "heart" | "party_popper" | "people_waving_flags" | "splashing_narwhal" | "trophy" | "yeti_riding_unicorn" | "celebrating_people" | "determined_climbers" | "phoenix_spreading_love";
        };
        /** @description A story represents an activity associated with an object in the Asana system. */
        StoryCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example story
             */
            readonly resource_type?: string;
            /**
             * Format: date-time
             * @description The time at which this resource was created.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
            created_by?: components["schemas"]["UserCompact"];
            /**
             * @description The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
             * @example comment_added
             */
            readonly resource_subtype?: string;
            /**
             * @description *Create-only*. Human-readable text for the story or comment.
             *     This will not include the name of the creator.
             *     *Note: This is not guaranteed to be stable for a given type of story. For example, text for a reassignment may not always say “assigned to …” as the text for a story can both be edited and change based on the language settings of the user making the request.*
             *     Use the `resource_subtype` property to discover the action that created the story.
             * @example marked today
             */
            text?: string;
        };
        StoryRequest: components["schemas"]["StoryBase"];
        StoryResponse: components["schemas"]["StoryBase"] & {
            created_by?: components["schemas"]["UserCompact"];
            /**
             * @example comment
             * @enum {string}
             */
            readonly type?: "comment" | "system";
            /**
             * @description *Conditional*. Whether the text of the story can be edited after creation.
             * @example false
             */
            readonly is_editable?: boolean;
            /**
             * @description *Conditional*. Whether the text of the story has been edited after creation.
             * @example false
             */
            readonly is_edited?: boolean;
            /**
             * @description *Deprecated - please use likes instead*
             *     *Conditional*. True if the story is hearted by the authorized user, false if not.
             * @example false
             */
            readonly hearted?: boolean;
            /** @description *Deprecated - please use likes instead*
             *
             *     *Conditional*. Array of likes for users who have hearted this story. */
            readonly hearts?: components["schemas"]["Like"][];
            /**
             * @description *Deprecated - please use likes instead*
             *
             *     *Conditional*. The number of users who have hearted this story.
             * @example 5
             */
            readonly num_hearts?: number;
            /**
             * @description *Conditional*. True if the story is liked by the authorized user, false if not.
             * @example false
             */
            readonly liked?: boolean;
            /** @description *Conditional*. Array of likes for users who have liked this story. */
            readonly likes?: components["schemas"]["Like"][];
            /**
             * @description *Conditional*. The number of users who have liked this story.
             * @example 5
             */
            readonly num_likes?: number;
            /** @description *Conditional*. A collection of previews to be displayed in the story.
             *
             *     *Note: This property only exists for comment stories.* */
            readonly previews?: components["schemas"]["Preview"][];
            /**
             * @description *Conditional*'
             * @example This was the Old Name
             */
            old_name?: string;
            /**
             * @description *Conditional*
             * @example This is the New Name
             */
            readonly new_name?: string | null;
            old_dates?: components["schemas"]["StoryResponseDates"];
            new_dates?: components["schemas"]["StoryResponseDates"];
            /**
             * @description *Conditional*
             * @example default_task
             */
            readonly old_resource_subtype?: string;
            /**
             * @description *Conditional*
             * @example milestone
             */
            readonly new_resource_subtype?: string;
            /** @description *Conditional* */
            readonly story?: components["schemas"]["StoryCompact"];
            /** @description *Conditional* */
            readonly assignee?: components["schemas"]["UserCompact"];
            /** @description *Conditional* */
            readonly follower?: components["schemas"]["UserCompact"];
            /** @description *Conditional* */
            readonly old_section?: components["schemas"]["SectionCompact"];
            /** @description *Conditional* */
            readonly new_section?: components["schemas"]["SectionCompact"];
            /** @description *Conditional* */
            readonly task?: components["schemas"]["TaskCompact"];
            /** @description *Conditional* */
            readonly project?: components["schemas"]["ProjectCompact"];
            /** @description *Conditional* */
            readonly tag?: components["schemas"]["TagCompact"];
            /** @description *Conditional* */
            readonly custom_field?: components["schemas"]["CustomFieldCompact"];
            /**
             * @description *Conditional*
             * @example This was the Old Text
             */
            readonly old_text_value?: string;
            /**
             * @description *Conditional*
             * @example This is the New Text
             */
            readonly new_text_value?: string;
            /**
             * @description *Conditional*
             * @example 1
             */
            readonly old_number_value?: number | null;
            /**
             * @description *Conditional*
             * @example 2
             */
            readonly new_number_value?: number;
            /** @description *Conditional* */
            readonly old_enum_value?: components["schemas"]["EnumOption"];
            /** @description *Conditional* */
            readonly new_enum_value?: components["schemas"]["EnumOption"];
            readonly old_date_value?: components["schemas"]["StoryResponseDates"] & unknown;
            readonly new_date_value?: components["schemas"]["StoryResponseDates"] & unknown;
            /** @description *Conditional*. The old value of a people custom field story. */
            readonly old_people_value?: components["schemas"]["UserCompact"][];
            /** @description *Conditional*. The new value of a people custom field story. */
            readonly new_people_value?: components["schemas"]["UserCompact"][];
            /** @description *Conditional*. The old value of a multi-enum custom field story. */
            readonly old_multi_enum_values?: components["schemas"]["EnumOption"][];
            /** @description *Conditional*. The new value of a multi-enum custom field story. */
            readonly new_multi_enum_values?: components["schemas"]["EnumOption"][];
            /**
             * @description *Conditional*. The new value of approval status.
             * @example approved
             */
            readonly new_approval_status?: string;
            /**
             * @description *Conditional*. The old value of approval status.
             * @example pending
             */
            readonly old_approval_status?: string;
            /** @description *Conditional* */
            readonly duplicate_of?: components["schemas"]["TaskCompact"];
            /** @description *Conditional* */
            readonly duplicated_from?: components["schemas"]["TaskCompact"];
            /** @description *Conditional* */
            readonly dependency?: components["schemas"]["TaskCompact"];
            /**
             * @description The component of the Asana product the user used to trigger the story.
             * @example web
             * @enum {string}
             */
            readonly source?: "web" | "email" | "mobile" | "api" | "unknown";
            target?: components["schemas"]["TaskCompact"] & Record<string, never>;
        };
        /** @description *Conditional* */
        StoryResponseDates: {
            /**
             * Format: date
             * @description The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
             * @example 2019-09-14
             */
            start_on?: string | null;
            /**
             * Format: date-time
             * @description The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.
             * @example 2019-09-15T02:06:58.158Z
             */
            due_at?: string | null;
            /**
             * Format: date
             * @description The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
             * @example 2019-09-15
             */
            due_on?: string;
        };
        TagBase: components["schemas"]["TagCompact"] & {
            /**
             * @description Color of the tag.
             * @example light-green
             * @enum {string|null}
             */
            color?: "dark-pink" | "dark-green" | "dark-blue" | "dark-red" | "dark-teal" | "dark-brown" | "dark-orange" | "dark-purple" | "dark-warm-gray" | "light-pink" | "light-green" | "light-blue" | "light-red" | "light-teal" | "light-brown" | "light-orange" | "light-purple" | "light-warm-gray" | null;
            /**
             * @description Free-form textual information associated with the tag (i.e. its description).
             * @example Mittens really likes the stuff from Humboldt.
             */
            notes?: string;
        };
        /** @description A *tag* is a label that can be attached to any task in Asana. It exists in a single workspace or organization. */
        TagCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example tag
             */
            readonly resource_type?: string;
            /**
             * @description Name of the tag. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
             * @example Stuff to buy
             */
            name?: string;
        };
        TagCreateTagForWorkspaceRequest: components["schemas"]["TagBase"] & {
            /**
             * @description An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
             * @example [
             *       "12345",
             *       "42563"
             *     ]
             */
            followers?: string[];
        };
        TagBaseRequest: components["schemas"]["TagBase"];
        TagCreateRequest: components["schemas"]["TagBaseRequest"] & {
            /**
             * @description An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
             * @example [
             *       "12345",
             *       "42563"
             *     ]
             */
            followers?: string[];
            /**
             * @description Gid of an object.
             * @example 12345
             */
            workspace?: string;
        };
        TagUpdateRequest: components["schemas"]["TagBaseRequest"];
        TagResponse: components["schemas"]["TagBase"] & {
            /**
             * Format: date-time
             * @description The time at which this resource was created.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
            /** @description Array of users following this tag. */
            readonly followers?: components["schemas"]["UserCompact"][];
            workspace?: components["schemas"]["WorkspaceCompact"];
            /**
             * @description A url that points directly to the object within Asana.
             * @example https://app.asana.com/0/resource/123456789/list
             */
            readonly permalink_url?: string;
        };
        TaskAddFollowersRequest: {
            /**
             * @description An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
             * @example [
             *       "13579",
             *       "321654"
             *     ]
             */
            followers: string[];
        };
        TaskAddProjectRequest: {
            /**
             * @description The project to add the task to.
             * @example 13579
             */
            project: string;
            /**
             * @description A task in the project to insert the task after, or `null` to insert at the beginning of the list.
             * @example 124816
             */
            insert_after?: string | null;
            /**
             * @description A task in the project to insert the task before, or `null` to insert at the end of the list.
             * @example 432134
             */
            insert_before?: string | null;
            /**
             * @description A section in the project to insert the task into. The task will be inserted at the bottom of the section.
             * @example 987654
             */
            section?: string | null;
        };
        TaskAddTagRequest: {
            /**
             * @description The tag's gid to add to the task.
             * @example 13579
             */
            tag: string;
        };
        TaskBase: components["schemas"]["TaskCompact"] & {
            /**
             * @description *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.
             * @example pending
             * @enum {string}
             */
            approval_status?: "pending" | "approved" | "rejected" | "changes_requested";
            /**
             * @description *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to "inbox" or "upcoming" inserts it at the top of the section, while the other options will insert at the bottom.
             * @example upcoming
             * @enum {string}
             */
            assignee_status?: "today" | "upcoming" | "later" | "new" | "inbox";
            /**
             * @description True if the task is currently marked complete, false if not.
             * @example false
             */
            completed?: boolean;
            /**
             * Format: date-time
             * @description The time at which this task was completed, or null if the task is incomplete.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly completed_at?: string | null;
            completed_by?: components["schemas"]["UserCompact"] & unknown;
            /**
             * Format: date-time
             * @description The time at which this resource was created.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
            /** @description [Opt In](/docs/inputoutput-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency. */
            readonly dependencies?: components["schemas"]["AsanaResource"][];
            /** @description [Opt In](/docs/inputoutput-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent. */
            readonly dependents?: components["schemas"]["AsanaResource"][];
            /**
             * Format: date-time
             * @description The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.
             * @example 2019-09-15T02:06:58.147Z
             */
            due_at?: string | null;
            /**
             * Format: date
             * @description The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.
             * @example 2019-09-15
             */
            due_on?: string | null;
            /**
             * @description *OAuth Required*. *Conditional*. This field is returned only if external values are set or included by using [Opt In] (/docs/inputoutput-options).
             *     The external field allows you to store app-specific metadata on tasks, including a gid that can be used to retrieve tasks and a data blob that can store app-specific character strings. Note that you will need to authenticate with Oauth to access or modify this data. Once an external gid is set, you can use the notation `external:custom_gid` to reference your object anywhere in the API where you may use the original object gid. See the page on Custom External Data for more details.
             * @example {
             *       "gid": "my_gid",
             *       "data": "A blob of information"
             *     }
             */
            external?: {
                /** @example 1234 */
                gid?: string;
                /** @example A blob of information. */
                data?: string;
            };
            /**
             * @description [Opt In](/docs/inputoutput-options). The notes of the text with formatting as HTML.
             * @example <body>Mittens <em>really</em> likes the stuff from Humboldt.</body>
             */
            html_notes?: string;
            /**
             * @description *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.
             * @example true
             */
            readonly hearted?: boolean;
            /** @description *Deprecated - please use likes instead* Array of likes for users who have hearted this task. */
            readonly hearts?: components["schemas"]["Like"][];
            /**
             * @description [Opt In](/docs/inputoutput-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/reference/sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.
             * @example false
             */
            readonly is_rendered_as_separator?: boolean;
            /**
             * @description True if the task is liked by the authorized user, false if not.
             * @example true
             */
            liked?: boolean;
            /** @description Array of likes for users who have liked this task. */
            readonly likes?: components["schemas"]["Like"][];
            /** @description <p><strong style="color: #4573D2">Full object requires scope: </strong><code>projects:read</code>, <code>project_sections:read</code></p>
             *
             *     *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property. */
            readonly memberships?: {
                project?: components["schemas"]["ProjectCompact"];
                section?: components["schemas"]["SectionCompact"];
            }[];
            /**
             * Format: date-time
             * @description The time at which this task was last modified.
             *
             *     The following conditions will change `modified_at`:
             *
             *     - story is created on a task
             *     - story is trashed on a task
             *     - attachment is trashed on a task
             *     - task is assigned or unassigned
             *     - custom field value is changed
             *     - the task itself is trashed
             *     - Or if any of the following fields are updated:
             *       - completed
             *       - name
             *       - due_date
             *       - description
             *       - attachments
             *       - items
             *       - schedule_status
             *
             *     The following conditions will _not_ change `modified_at`:
             *
             *     - moving to a new container (project, portfolio, etc)
             *     - comments being added to the task (but the stories they generate
             *       _will_ affect `modified_at`)
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly modified_at?: string;
            /**
             * @description Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
             * @example Buy catnip
             */
            name?: string;
            /**
             * @description Free-form textual information associated with the task (i.e. its description).
             * @example Mittens really likes the stuff from Humboldt.
             */
            notes?: string;
            /**
             * @description *Deprecated - please use likes instead* The number of users who have hearted this task.
             * @example 5
             */
            readonly num_hearts?: number;
            /**
             * @description The number of users who have liked this task.
             * @example 5
             */
            readonly num_likes?: number;
            /**
             * @description [Opt In](/docs/inputoutput-options). The number of subtasks on this task.
             *
             * @example 3
             */
            readonly num_subtasks?: number;
            /**
             * Format: date-time
             * @description Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`.
             *     *Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*
             * @example 2019-09-14T02:06:58.147Z
             */
            start_at?: string | null;
            /**
             * Format: date
             * @description The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`.
             *     *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*
             * @example 2019-09-14
             */
            start_on?: string | null;
            /**
             * @description <p><strong style="color: #4573D2">Full object requires scope: </strong><code>time_tracking_entries:read</code></p>
             *
             *     This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.
             * @example 200
             */
            readonly actual_time_minutes?: number | null;
        };
        /** @description The *task* is the basic object around which many operations in Asana are centered. */
        TaskCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example task
             */
            readonly resource_type?: string;
            /**
             * @description The name of the task.
             * @example Bug Task
             */
            name?: string;
            /**
             * @description The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
             *     The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.
             * @example default_task
             * @enum {string}
             */
            resource_subtype?: "default_task" | "milestone" | "approval";
            /** @description [Opt In](/docs/inputoutput-options). A *user* object represents an account in Asana that can be given access to various workspaces, projects, and tasks. */
            readonly created_by?: {
                /**
                 * @description Globally unique identifier of the resource.
                 * @example 1111
                 */
                gid?: string;
                /**
                 * @description The type of resource.
                 * @example user
                 */
                resource_type?: string;
            };
        };
        /** @description A *task template* is an object that allows new tasks to be created with a predefined setup. */
        TaskTemplateCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example task_template
             */
            readonly resource_type?: string;
            /**
             * @description Name of the task template.
             * @example Packing list
             */
            name?: string;
        };
        TaskTemplateBase: components["schemas"]["TaskTemplateCompact"];
        TaskTemplateRecipeCompact: {
            /**
             * @description Name of the task that will be created from this template.
             * @example Bug Report
             */
            name?: string;
            /**
             * @description The subtype of the task that will be created from this template.
             * @example default_task
             * @enum {string}
             */
            task_resource_subtype?: "default_task" | "milestone_task" | "approval_task";
        };
        TaskTemplateRecipe: components["schemas"]["TaskTemplateRecipeCompact"] & {
            /**
             * @description Description of the task that will be created from this template.
             * @example Please describe the bug you found and how to reproduce it.
             */
            description?: string;
            /**
             * @description HTML description of the task that will be created from this template.
             * @example Please describe the bug you found and how to reproduce it.
             */
            html_description?: string;
            /** @description Array of projects that the task created from this template will be added to */
            memberships?: components["schemas"]["ProjectCompact"][];
            /**
             * @description The number of days after the task has been instantiated on which that the task will start
             * @example 1
             */
            relative_start_on?: number | null;
            /**
             * @description The number of days after the task has been instantiated on which that the task will be due
             * @example 2
             */
            relative_due_on?: number | null;
            /**
             * @description The time of day that the task will be due
             * @example 13:15:00.000Z
             */
            due_time?: string | null;
            /** @description Array of task templates that the task created from this template will depend on */
            dependencies?: components["schemas"]["TaskTemplateRecipeCompact"][];
            /** @description Array of task templates that will depend on the task created from this template */
            dependents?: components["schemas"]["TaskTemplateRecipeCompact"][];
            /** @description Array of users that will be added as followers to the task created from this template */
            followers?: components["schemas"]["UserCompact"][];
            /** @description Array of attachments that will be added to the task created from this template */
            attachments?: components["schemas"]["AttachmentCompact"][];
            /** @description Array of subtasks that will be added to the task created from this template */
            subtasks?: components["schemas"]["TaskTemplateRecipeCompact"][];
            /** @description Array of custom fields that will be added to the task created from this template */
            custom_fields?: components["schemas"]["CustomFieldCompact"][];
        };
        TaskTemplateResponse: components["schemas"]["TaskTemplateBase"] & {
            /**
             * @description Name of the task template.
             * @example Bug Report Template
             */
            name?: string;
            /** @description The project that this task template belongs to. */
            project?: components["schemas"]["ProjectCompact"] | null;
            /** @description The configuration for the task that will be created from this template. */
            template?: components["schemas"]["TaskTemplateRecipe"];
            /** @description The user who created this task template. */
            created_by?: components["schemas"]["UserCompact"];
            /**
             * Format: date-time
             * @description The time at which this task template was created.
             * @example 2019-01-01T00:00:00.000Z
             */
            created_at?: string;
        };
        /** @description A response object returned from the task count endpoint. */
        TaskCountResponse: {
            /**
             * @description The number of tasks in a project.
             * @example 200
             */
            num_tasks?: number;
            /**
             * @description The number of incomplete tasks in a project.
             * @example 50
             */
            num_incomplete_tasks?: number;
            /**
             * @description The number of completed tasks in a project.
             * @example 150
             */
            num_completed_tasks?: number;
            /**
             * @description The number of milestones in a project.
             * @example 10
             */
            num_milestones?: number;
            /**
             * @description The number of incomplete milestones in a project.
             * @example 7
             */
            num_incomplete_milestones?: number;
            /**
             * @description The number of completed milestones in a project.
             * @example 3
             */
            num_completed_milestones?: number;
        };
        TaskDuplicateRequest: {
            /**
             * @description The name of the new task.
             * @example New Task Name
             */
            name?: string;
            /**
             * @description A comma-separated list of fields that will be duplicated to the new task.
             *     ##### Fields
             *     - assignee
             *     - attachments
             *     - dates
             *     - dependencies
             *     - followers
             *     - notes
             *     - parent
             *     - projects
             *     - subtasks
             *     - tags
             * @example [
             *       "notes,assignee,subtasks,attachments,tags,followers,projects,dates,dependencies,parent"
             *     ]
             */
            include?: string;
        };
        TaskRemoveFollowersRequest: {
            /**
             * @description An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
             * @example [
             *       "13579",
             *       "321654"
             *     ]
             */
            followers: string[];
        };
        TaskRemoveProjectRequest: {
            /**
             * @description The project to remove the task from.
             * @example 13579
             */
            project: string;
        };
        TaskRemoveTagRequest: {
            /**
             * @description The tag's gid to remove from the task.
             * @example 13579
             */
            tag: string;
        };
        TaskTemplateInstantiateTaskRequest: {
            /**
             * @description The name of the new task. If not provided, the name of the task template will be used.
             * @example New Task
             */
            name?: string;
        };
        TaskRequest: components["schemas"]["TaskBase"] & {
            /**
             * @description Gid of a user.
             * @example 12345
             */
            assignee?: string | null;
            /**
             * @description The *assignee section* is a subdivision of a project that groups tasks together in the assignee's "My tasks" list. It can either be a header above a list of tasks in a list view or a column in a board view of "My tasks."
             *     The `assignee_section` property will be returned in the response only if the request was sent by the user who is the assignee of the task. Note that you can only write to `assignee_section` with the gid of an existing section visible in the user's "My tasks" list.
             * @example 12345
             */
            assignee_section?: string | null;
            /**
             * @description An object where each key is the GID of a custom field and its corresponding value is either an enum GID, string, number, object, or array (depending on the custom field type). See the [custom fields guide](/docs/custom-fields-guide) for details on creating and updating custom field values.
             * @example {
             *       "5678904321": "On Hold",
             *       "4578152156": "Not Started"
             *     }
             */
            custom_fields?: {
                [key: string]: string;
            };
            /**
             * @description *Create-Only* An array of strings identifying users. These can either be the string "me", an email, or the gid of a user. In order to change followers on an existing task use `addFollowers` and `removeFollowers`.
             * @example [
             *       "12345"
             *     ]
             */
            followers?: string[];
            /**
             * @description Gid of a task.
             * @example 12345
             */
            parent?: string | null;
            /**
             * @description *Create-Only* Array of project gids. In order to change projects on an existing task use `addProject` and `removeProject`.
             * @example [
             *       "12345"
             *     ]
             */
            projects?: string[];
            /**
             * @description *Create-Only* Array of tag gids. In order to change tags on an existing task use `addTag` and `removeTag`.
             * @example [
             *       "12345"
             *     ]
             */
            tags?: string[];
            /**
             * @description Gid of a workspace.
             * @example 12345
             */
            workspace?: string;
            /**
             * @description GID or globally-unique identifier of a custom_type.
             * @example 12345
             */
            custom_type?: string | null;
            /**
             * @description GID or globally-unique identifier of a custom_type_status_option
             * @example 12345
             */
            custom_type_status_option?: string | null;
        };
        TaskResponse: components["schemas"]["TaskBase"] & {
            assignee?: components["schemas"]["UserCompact"] & unknown;
            assignee_section?: components["schemas"]["SectionCompact"] & (Record<string, never> | null);
            /** @description <p><strong style="color: #4573D2">Full object requires scope: </strong><code>custom_fields:read</code></p>
             *
             *     Array of custom field values applied to the task. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an `enum_value` property for custom fields of type `enum`, a `text_value` property for custom fields of type `text`, and so on. Please note that the `gid` returned on each custom field value *is identical* to the `gid` of the custom field, which allows referencing the custom field metadata through the `/custom_fields/custom_field_gid` endpoint. */
            readonly custom_fields?: components["schemas"]["CustomFieldResponse"][];
            custom_type?: components["schemas"]["CustomTypeCompact"] & unknown;
            custom_type_status_option?: components["schemas"]["CustomTypeStatusOptionCompact"] & unknown;
            /** @description Array of users following this task. */
            readonly followers?: components["schemas"]["UserCompact"][];
            parent?: components["schemas"]["TaskCompact"] & (Record<string, never> | null);
            /** @description *Create-only.* Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints. */
            readonly projects?: components["schemas"]["ProjectCompact"][];
            /**
             * @description Array of tags associated with this task. In order to change tags on an existing task use `addTag` and `removeTag`.
             * @example [
             *       {
             *         "gid": "59746",
             *         "name": "Grade A"
             *       }
             *     ]
             */
            readonly tags?: components["schemas"]["TagCompact"][];
            workspace?: components["schemas"]["WorkspaceCompact"] & Record<string, never>;
            /**
             * @description A url that points directly to the object within Asana.
             * @example https://app.asana.com/1/12345/task/123456789
             */
            readonly permalink_url?: string;
        };
        TaskSetParentRequest: {
            /**
             * @description The new parent of the task, or `null` for no parent.
             * @example 987654
             */
            parent: string;
            /**
             * @description A subtask of the parent to insert the task after, or `null` to insert at the beginning of the list.
             * @example null
             */
            insert_after?: string;
            /**
             * @description A subtask of the parent to insert the task before, or `null` to insert at the end of the list.
             * @example 124816
             */
            insert_before?: string;
        };
        /** @description A user identification object for specification with the addUser/removeUser endpoints. */
        TeamAddUserRequest: {
            /**
             * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
             * @example 12345
             */
            user?: string;
        };
        TeamBase: components["schemas"]["TeamCompact"];
        /** @description A *team* is used to group related projects and people together within an organization. Each project in an organization is associated with a team. */
        TeamCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example team
             */
            readonly resource_type?: string;
            /**
             * @description The name of the team.
             * @example Marketing
             */
            name?: string;
        };
        TeamMembershipBase: components["schemas"]["TeamMembershipCompact"];
        /** @description This object represents a user's connection to a team. */
        TeamMembershipCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example team_membership
             */
            readonly resource_type?: string;
            user?: components["schemas"]["UserCompact"];
            team?: components["schemas"]["TeamCompact"];
            /**
             * @description Describes if the user is a guest in the team.
             * @example false
             */
            is_guest?: boolean;
            /**
             * @description Describes if the user has limited access to the team.
             * @example false
             */
            readonly is_limited_access?: boolean;
            /**
             * @description Describes if the user is a team admin.
             * @example false
             */
            is_admin?: boolean;
        };
        TeamMembershipResponse: components["schemas"]["TeamMembershipBase"];
        /** @description A user identification object for specification with the addUser/removeUser endpoints. */
        TeamRemoveUserRequest: {
            /**
             * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
             * @example 12345
             */
            user?: string;
        };
        TeamRequest: components["schemas"]["TeamBase"] & {
            /**
             * @description The description of the team.
             *
             * @example All developers should be members of this team.
             */
            description?: string;
            /**
             * @description The description of the team with formatting as HTML.
             *
             * @example <body><em>All</em> developers should be members of this team.</body>
             */
            html_description?: string;
            /**
             * @description The organization/workspace the team belongs to. This must be the same organization you are in and cannot be changed once set.
             *
             * @example 123456789
             */
            organization?: string;
            /**
             * @description The visibility of the team to users in the same organization
             *
             * @enum {string}
             */
            visibility?: "secret" | "request_to_join" | "public";
            /**
             * @description Controls who can edit team name and description
             *
             * @enum {string}
             */
            edit_team_name_or_description_access_level?: "all_team_members" | "only_team_admins";
            /**
             * @description Controls who can edit team visibility and trash teams
             *
             * @enum {string}
             */
            edit_team_visibility_or_trash_team_access_level?: "all_team_members" | "only_team_admins";
            /**
             * @description Controls who can accept or deny member invites for a given team
             *
             * @enum {string}
             */
            member_invite_management_access_level?: "all_team_members" | "only_team_admins";
            /**
             * @description Controls who can accept or deny guest invites for a given team
             *
             * @enum {string}
             */
            guest_invite_management_access_level?: "all_team_members" | "only_team_admins";
            /**
             * @description Controls who can accept or deny join team requests for a Membership by Request team. This field can only be updated when the team's `visibility` field is `request_to_join`.
             *
             * @enum {string}
             */
            join_request_management_access_level?: "all_team_members" | "only_team_admins";
            /**
             * @description Controls who can remove team members
             *
             * @enum {string}
             */
            team_member_removal_access_level?: "all_team_members" | "only_team_admins";
            /**
             * @description Controls who can create and share content with the team
             *
             * @enum {string}
             */
            team_content_management_access_level?: "no_restriction" | "only_team_admins";
            /**
             * @description Whether the team has been endorsed
             *
             * @example false
             */
            endorsed?: boolean;
        };
        TeamResponse: components["schemas"]["TeamBase"] & {
            /**
             * @description [Opt In](/docs/inputoutput-options). The description of the team.
             *
             * @example All developers should be members of this team.
             */
            description?: string;
            /**
             * @description [Opt In](/docs/inputoutput-options). The description of the team with formatting as HTML.
             *
             * @example <body><em>All</em> developers should be members of this team.</body>
             */
            html_description?: string;
            organization?: components["schemas"]["WorkspaceCompact"] & Record<string, never>;
            /**
             * @description A url that points directly to the object within Asana.
             * @example https://app.asana.com/0/resource/123456789/list
             */
            readonly permalink_url?: string;
            /**
             * @description The visibility of the team to users in the same organization
             *
             * @enum {string}
             */
            visibility?: "secret" | "request_to_join" | "public";
            /**
             * @description Controls who can edit team name and description
             *
             * @enum {string}
             */
            edit_team_name_or_description_access_level?: "all_team_members" | "only_team_admins";
            /**
             * @description Controls who can edit team visibility and trash teams
             *
             * @enum {string}
             */
            edit_team_visibility_or_trash_team_access_level?: "all_team_members" | "only_team_admins";
            /**
             * @description Controls who can accept or deny member invites for a given team
             *
             * @enum {string}
             */
            member_invite_management_access_level?: "all_team_members" | "only_team_admins";
            /**
             * @description Controls who can accept or deny guest invites for a given team
             *
             * @enum {string}
             */
            guest_invite_management_access_level?: "all_team_members" | "only_team_admins";
            /**
             * @description Controls who can accept or deny join team requests for a Membership by Request team. This field can only be updated when the team's `visibility` field is `request_to_join`.
             *
             * @enum {string}
             */
            join_request_management_access_level?: "all_team_members" | "only_team_admins";
            /**
             * @description Controls who can remove team members
             *
             * @enum {string}
             */
            team_member_removal_access_level?: "all_team_members" | "only_team_admins";
            /**
             * @description Controls who can create and share content with the team
             *
             * @enum {string}
             */
            team_content_management_access_level?: "no_restriction" | "only_team_admins";
            /**
             * @description Whether the team has been endorsed
             *
             * @example false
             */
            endorsed?: boolean;
        };
        /** @description A generic Asana Resource, containing a globally unique identifier. */
        TemplateRole: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example task
             */
            readonly resource_type?: string;
            /**
             * @description Name of the template role.
             * @example Designer
             */
            name?: string;
        };
        TimePeriodBase: components["schemas"]["TimePeriodCompact"] & {
            parent?: components["schemas"]["TimePeriodCompact"] & unknown;
        };
        /** @description <p><strong style="color: #4573D2">Full object requires scope: </strong><code>time_periods:read</code></p>
         *
         *     A generic Asana Resource, containing a globally unique identifier. */
        TimePeriodCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example time_period
             */
            readonly resource_type?: string;
            /**
             * @description The localized end date of the time period in `YYYY-MM-DD` format.
             * @example 2019-09-14
             */
            end_on?: string;
            /**
             * @description The localized start date of the time period in `YYYY-MM-DD` format.
             * @example 2019-09-13
             */
            start_on?: string;
            /**
             * @description The cadence and index of the time period.
             * @example Q1
             * @enum {string}
             */
            period?: "FY" | "H1" | "H2" | "Q1" | "Q2" | "Q3" | "Q4";
            /**
             * @description A string representing the cadence code and the fiscal year.
             * @example Q1 FY22
             */
            display_name?: string;
        };
        TimePeriodResponse: components["schemas"]["TimePeriodBase"];
        UserBase: components["schemas"]["UserCompact"];
        /** @description A *user* object represents an account in Asana that can be given access to various workspaces, projects, and tasks. */
        UserCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example user
             */
            readonly resource_type?: string;
            /**
             * @description *Read-only except when same user as requester*. The user’s name.
             * @example Greg Sanchez
             */
            name?: string;
        };
        UserRequest: components["schemas"]["UserBase"];
        UserBaseResponse: components["schemas"]["UserBase"] & {
            /**
             * Format: email
             * @description The user's email address.
             * @example gsanchez@example.com
             */
            readonly email?: string;
            /**
             * @description A map of the user’s profile photo in various sizes, or null if no photo is set. Sizes provided are 21, 27, 36, 60, 128, and 1024. All images are in PNG format, except for 1024 (which is in JPEG format).
             * @example {
             *       "image_21x21": "https://...",
             *       "image_27x27": "https://...",
             *       "image_36x36": "https://...",
             *       "image_60x60": "https://...",
             *       "image_128x128": "https://...",
             *       "image_1024x1024": "https://..."
             *     }
             */
            readonly photo?: {
                /** Format: uri */
                image_21x21?: string;
                /** Format: uri */
                image_27x27?: string;
                /** Format: uri */
                image_36x36?: string;
                /** Format: uri */
                image_60x60?: string;
                /** Format: uri */
                image_128x128?: string;
                /** Format: uri */
                image_1024x1024?: string;
            } | null;
        };
        UserResponse: components["schemas"]["UserBaseResponse"] & {
            /** @description <p><strong style="color: #4573D2">Full object requires scope: </strong><code>workspaces:read</code></p>
             *
             *     Workspaces and organizations this user may access.
             *     Note\: The API will only return workspaces and organizations that also contain the authenticated user. */
            readonly workspaces?: components["schemas"]["WorkspaceCompact"][];
        };
        UserTaskListBase: components["schemas"]["UserTaskListCompact"];
        /** @description A user task list represents the tasks assigned to a particular user. It provides API access to a user’s [My tasks](https://asana.com/guide/help/fundamentals/my-tasks) view in Asana. */
        UserTaskListCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example user_task_list
             */
            readonly resource_type?: string;
            /**
             * @description The name of the user task list.
             * @example My tasks in My Workspace
             */
            name?: string;
            /** @description The owner of the user task list, i.e. the person whose My Tasks is represented by this resource. */
            readonly owner?: components["schemas"]["UserCompact"];
            /** @description The workspace in which the user task list is located. */
            readonly workspace?: components["schemas"]["WorkspaceCompact"];
        };
        UserTaskListRequest: components["schemas"]["UserTaskListBase"];
        UserTaskListResponse: components["schemas"]["UserTaskListBase"];
        /** @description Webhook objects represent the state of an active subscription for a server to be updated with information from Asana. This schema represents the subscription itself, not the objects that are sent to the server. For information on those please refer to the [event](/reference/events) schema. */
        WebhookCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example webhook
             */
            readonly resource_type?: string;
            /**
             * @description If true, the webhook will send events - if false it is considered inactive and will not generate events.
             * @example false
             */
            readonly active?: boolean;
            resource?: components["schemas"]["AsanaNamedResource"];
            /**
             * Format: uri
             * @description The URL to receive the HTTP POST.
             * @example https://example.com/receive-webhook/7654
             */
            readonly target?: string;
        };
        /** @description A WebhookFilter can be passed on creation of a webhook in order to filter the types of actions that trigger delivery of an [event](/reference/events) */
        WebhookFilter: {
            /**
             * @description The type of the resource which created the event when modified; for example, to filter to changes on regular tasks this field should be set to `task`.
             * @example task
             */
            resource_type?: string;
            /**
             * @description The resource subtype of the resource that the filter applies to. This should be set to the same value as is returned on the `resource_subtype` field on the resources themselves.
             * @example milestone
             */
            resource_subtype?: string;
            /**
             * @description The type of change on the **resource** to pass through the filter. For more information refer to `Event.action` in the [event](/reference/events) schema. This can be one of `changed`, `added`, `removed`, `deleted`, and `undeleted` depending on the nature of what has occurred on the resource.
             * @example changed
             */
            action?: string;
            /**
             * @description *Conditional.* A whitelist of fields for events which will pass the filter when the resource is changed. These can be any combination of the fields on the resources themselves. This field is only valid for `action` of type `changed`
             *     *Note: Subscriptions created on higher-level resources such as a Workspace, Team, or Portfolio do not support fields.*
             * @example [
             *       "due_at",
             *       "due_on",
             *       "dependencies"
             *     ]
             */
            fields?: string[];
        };
        WebhookRequest: {
            /**
             * @description A resource ID to subscribe to. Many Asana resources are valid to create webhooks on, but higher-level resources require filters.
             * @example 12345
             */
            resource: string;
            /**
             * Format: uri
             * @description The URL to receive the HTTP POST. The full URL will be used to deliver events from this webhook (including parameters) which allows encoding of application-specific state when the webhook is created.
             * @example https://example.com/receive-webhook/7654?app_specific_param=app_specific_value
             */
            target: string;
            /** @description An array of WebhookFilter objects to specify a whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server. */
            filters?: (components["schemas"]["WebhookFilter"] & unknown & Record<string, never>)[];
        };
        WebhookResponse: components["schemas"]["WebhookCompact"] & {
            /**
             * Format: date-time
             * @description The time at which this resource was created.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
            /**
             * Format: date-time
             * @description The timestamp when the webhook last received an error when sending an event to the target.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly last_failure_at?: string;
            /**
             * @description The contents of the last error response sent to the webhook when attempting to deliver events to the target.
             * @example 500 Server Error\n\nCould not complete the request
             */
            readonly last_failure_content?: string;
            /**
             * Format: date-time
             * @description The timestamp when the webhook last successfully sent an event to the target.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly last_success_at?: string;
            /**
             * @description The number of times the webhook has retried delivery of events to the target (resets after a successful attempt).
             * @example 3
             */
            readonly delivery_retry_count?: number;
            /**
             * Format: date-time
             * @description The timestamp after which the webhook will next attempt to deliver an event to the target.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly next_attempt_after?: string;
            /**
             * Format: date-time
             * @description The timestamp when the webhook will be deleted if there is no successful attempt to deliver events to the target
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly failure_deletion_timestamp?: string;
            /** @description Whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server. */
            filters?: (components["schemas"]["WebhookFilter"] & unknown & Record<string, never>)[];
        };
        WebhookUpdateRequest: {
            /** @description An array of WebhookFilter objects to specify a whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server. */
            filters?: (components["schemas"]["WebhookFilter"] & unknown & Record<string, never>)[];
        };
        /** @description A user identification object for specification with the addUser/removeUser endpoints. */
        WorkspaceAddUserRequest: {
            /**
             * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
             * @example 12345
             */
            user?: string;
        };
        WorkspaceBase: components["schemas"]["WorkspaceCompact"];
        /** @description A *workspace* is the highest-level organizational unit in Asana. All projects and tasks have an associated workspace. */
        WorkspaceCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example workspace
             */
            readonly resource_type?: string;
            /**
             * @description The name of the workspace.
             * @example My Company Workspace
             */
            name?: string;
        };
        WorkspaceMembershipBase: components["schemas"]["WorkspaceMembershipCompact"];
        /** @description This object determines if a user is a member of a workspace. */
        WorkspaceMembershipCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example workspace_membership
             */
            readonly resource_type?: string;
            user?: components["schemas"]["UserCompact"];
            workspace?: components["schemas"]["WorkspaceCompact"];
        };
        WorkspaceMembershipRequest: components["schemas"]["WorkspaceMembershipBase"];
        WorkspaceMembershipResponse: components["schemas"]["WorkspaceMembershipBase"] & {
            /** @description The user's "My tasks" in the workspace. */
            readonly user_task_list?: components["schemas"]["UserTaskListResponse"];
            /** @description Reflects if this user still a member of the workspace. */
            readonly is_active?: boolean;
            /** @description Reflects if this user is an admin of the workspace. */
            readonly is_admin?: boolean;
            /** @description Reflects if this user is a guest of the workspace. */
            readonly is_guest?: boolean;
            /** @description Reflects if this user has view only license in the workspace. */
            readonly is_view_only?: boolean;
            /** @description Contains keys `start_on` and `end_on` for the vacation dates for the user in this workspace. If `start_on` is null, the entire `vacation_dates` object will be null. If `end_on` is before today, the entire `vacation_dates` object will be null. */
            readonly vacation_dates?: {
                /**
                 * @description The day on which the user's vacation in this workspace starts. This is a date with `YYYY-MM-DD` format.
                 * @example 2022-11-05
                 */
                start_on?: string;
                /**
                 * @description The day on which the user's vacation in this workspace ends, or null if there is no end date. This is a date with `YYYY-MM-DD` format.
                 * @example 2022-11-07
                 */
                end_on?: string | null;
            } | null;
            /**
             * Format: date-time
             * @description The time at which this resource was created.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
        };
        /** @description A user identification object for specification with the addUser/removeUser endpoints. */
        WorkspaceRemoveUserRequest: {
            /**
             * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
             * @example 12345
             */
            user?: string;
        };
        WorkspaceRequest: components["schemas"]["WorkspaceBase"];
        WorkspaceResponse: components["schemas"]["WorkspaceBase"] & {
            /**
             * @description The email domains that are associated with this workspace.
             * @example [
             *       "asana.com"
             *     ]
             */
            email_domains?: string[];
            /**
             * @description Whether the workspace is an *organization*.
             * @example false
             */
            is_organization?: boolean;
        };
        /** @description This object represents a user's connection to a goal. */
        GoalMembershipBase: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example membership
             */
            resource_type?: string;
            /**
             * @description The type of membership.
             * @example goal_membership
             */
            readonly resource_subtype?: string;
            member?: components["schemas"]["MemberCompact"];
            parent?: components["schemas"]["GoalCompact"] & Record<string, never>;
            /**
             * @deprecated
             * @description *Deprecated: Describes if the member is a commenter or editor in goal.*
             * @example editor
             * @enum {string}
             */
            role?: "commenter" | "editor";
            /**
             * @description Describes if member is commenter or editor in goal. This is preferred over role
             * @example editor
             * @enum {string}
             */
            access_level?: "commenter" | "editor";
            goal?: components["schemas"]["GoalCompact"] & Record<string, never>;
        };
        GoalMembershipCompact: components["schemas"]["GoalMembershipBase"] & {
            /**
             * @deprecated
             * @description *Deprecated: new integrations should prefer the `role` field.* Describes if the member is comment only in goal.
             * @example false
             */
            readonly is_commenter?: boolean;
            /**
             * @deprecated
             * @description *Deprecated: new integrations should prefer the `role` field.* Describes if the member is editor in goal.
             * @example false
             */
            readonly is_editor?: boolean;
        };
        GoalMembershipResponse: components["schemas"]["GoalMembershipBase"] & {
            user?: components["schemas"]["UserCompact"] & Record<string, never>;
            workspace?: components["schemas"]["WorkspaceCompact"] & Record<string, never>;
        };
        MembershipUpdateRequest: {
            /**
             * @description The role given to the member. Goals can have access levels `editor` or `commenter`. Projects can have access levels `admin`, `editor` or `commenter`. Portfolios can have access levels `admin`, `editor` or `viewer`.
             * @example editor
             */
            access_level?: string;
        };
        MembershipRequest: {
            /**
             * @description Sets the access level for the member. Goals can have access levels `editor` or `commenter`. Projects can have access levels `admin`, `editor` or `commenter`. Portfolios can have access levels `admin`, `editor` or `viewer`. Custom Fields can have access levels `admin`, `editor` or `user`.
             * @example editor
             */
            access_level?: string;
        };
        CreateMembershipRequest: components["schemas"]["MembershipRequest"] & {
            /**
             * @description The gid of the user or team.
             * @example 12345
             */
            member?: string;
            /**
             * @description The gid of the `goal`, `project`, or `portfolio` to add the member to.
             * @example 987654
             */
            parent?: string;
            /**
             * @deprecated
             * @description *Deprecated: new integrations should use access_level* The role given to the member. Optional argument, will default to `commenter` for goals and the default project role for projects. Can be `editor` or `commenter` for goals. Can be `admin`,`editor` or `commenter` for projects.
             * @example editor
             */
            role?: string;
        };
        MembershipResponse: components["schemas"]["GoalMembershipResponse"] | components["schemas"]["ProjectMembershipCompactResponse"] | components["schemas"]["PortfolioMembershipResponse"] | components["schemas"]["CustomFieldMembershipResponse"];
        UpdateTimeTrackingEntryRequest: {
            /**
             * @description *Optional*. Time in minutes tracked by the entry
             * @example 12
             */
            duration_minutes?: number;
            /**
             * Format: date
             * @description *Optional*. The day that this entry is logged on. Defaults to today if no day specified
             * @example 2023-03-19
             */
            entered_on?: string;
            /** @description *Optional*. The project which the time is attributable to. */
            attributable_to?: components["schemas"]["ProjectCompact"];
        };
        CreateTimeTrackingEntryRequest: {
            /**
             * @description Time in minutes tracked by the entry. Must be greater than 0
             * @example 12
             */
            duration_minutes?: number;
            /**
             * Format: date
             * @description *Optional*. The day that this entry is logged on. Defaults to today if not specified
             * @example 2023-03-19
             */
            entered_on?: string;
            /** @description *Optional*. The project which the time is attributable to. */
            attributable_to?: components["schemas"]["ProjectCompact"];
        };
        /** @description A generic Asana Resource, containing a globally unique identifier. */
        TimeTrackingEntryCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example task
             */
            readonly resource_type?: string;
            /**
             * @description Time in minutes tracked by the entry.
             * @example 12
             */
            duration_minutes?: number;
            /**
             * Format: date
             * @description The day that this entry is logged on.
             * @example 2015-03-14
             */
            entered_on?: string;
            /** @description *Optional*. The project which the time is attributable to. */
            attributable_to?: components["schemas"]["ProjectCompact"];
            readonly created_by?: components["schemas"]["UserCompact"];
        };
        TimeTrackingEntryBase: components["schemas"]["TimeTrackingEntryCompact"] & {
            readonly task?: components["schemas"]["TaskCompact"];
            /**
             * Format: date-time
             * @description The time at which this resource was created.
             * @example 2012-02-22T02:06:58.147Z
             */
            readonly created_at?: string;
        };
        /** @description A *access request* object represents a request to access a shareable resource within Asana. It includes the requester's information, approval status, and target resource details. */
        AccessRequestResponse: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example access_request
             */
            readonly resource_type?: string;
            /**
             * @description The message included in the access request, if any.
             * @example Please grant me access to this resource.
             */
            message?: string;
            /**
             * @description The current approval status of the request.
             * @example pending
             * @enum {string}
             */
            approval_status?: "pending" | "approved" | "denied";
            /** @description The user who made the access request. */
            readonly requester?: components["schemas"]["UserCompact"];
            /** @description The target resource that the requester wants access to. */
            readonly target?: components["schemas"]["AccessRequestTargetIdCompact"];
        };
        /** @description A *target id* object represents the target resource that the requester wants access to. */
        AccessRequestTargetIdCompact: {
            /**
             * @description Globally unique identifier of the resource, as a string.
             * @example 12345
             */
            readonly gid?: string;
            /**
             * @description The base type of this resource.
             * @example project
             */
            readonly resource_type?: string;
        };
        /** @description A request to create shareable access for a user. */
        AccessRequestCreateRequest: {
            /**
             * @description The access requestable object that the user is requesting access to. This is the gid of the target. Supports projects and portfolios.
             * @example 12345
             */
            target: string;
            /**
             * @description The optional message to include with the access request. This can be used to provide context or additional information about the request.
             * @example I'm looking to request access to this item.
             */
            message?: string | null;
        };
        /** @description A request to approve access for a user. */
        AccessRequestApproveRequest: {
            /**
             * @description The ID of the access request that the user is approving.
             * @example 12345
             */
            access_request_gid?: string;
        };
        /** @description A request to reject access for a user. */
        AccessRequestRejectRequest: {
            /**
             * @description The ID of the access request that the user is rejecting.
             * @example 12345
             */
            access_request_gid?: string;
        };
    };
    responses: {
        /** @description Sadly, sometimes requests to the API are not successful. Failures can occur for a wide range of reasons. In all cases, the API should return an HTTP Status Code that indicates the nature of the failure, with a response body in JSON format containing additional information. In the event of a server error the response body will contain an error phrase. These phrases are automatically generated using the [node-asana-phrase library](https://github.com/Asana/node-asana-phrase) and can be used by Asana support to quickly look up the incident that caused the server error. */
        GenericErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description A valid authentication token was not provided with the request, so the API could not associate a user with the request. */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description The request was valid, but the queried object or object mutation specified in the request is above your current premium level. */
        PaymentRequired: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description You have exceeded one of the enforced rate limits in the API. See the [documentation on rate limiting](https://developers.asana.com/docs/#rate-limits) for more information. */
        TooManyRequests: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description There is an issue between the load balancers and Asana's API. */
        BadGateway: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Either the upstream service is unavailable to the API, or the API has been intentionally shut off. */
        ServiceUnavailable: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description This request took too long to complete. */
        GatewayTimeout: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: {
        /**
         * @description Defines fields to return.
         *     Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
         *     The id of included objects will always be returned, regardless of the field options.
         * @example [
         *       "followers",
         *       "assignee"
         *     ]
         */
        fields: string[];
        /**
         * @description Provides “pretty” output.
         *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @example true
         */
        pretty: boolean;
        /**
         * @description Results per page.
         *     The number of objects to return per page. The value must be between 1 and 100.
         * @example 50
         */
        limit: number;
        /**
         * @description Offset token.
         *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
         *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
         * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
         */
        offset: string;
        /**
         * @description Only return projects whose `archived` field takes on the value of this parameter.
         * @example false
         */
        archived_query_param: boolean;
        /**
         * @description Globally unique identifier for the access request.
         * @example 12345
         */
        access_request_gid: string;
        /**
         * @description Globally unique identifier for the attachment.
         * @example 12345
         */
        attachment_path_gid: string;
        /**
         * @description Globally unique identifier for the custom field.
         * @example 12345
         */
        custom_field_path_gid: string;
        /**
         * @description Generated custom ID for a task.
         * @example EX-1
         */
        custom_id: string;
        /**
         * @description Globally unique identifier for the goal.
         * @example 12345
         */
        goal_path_gid: string;
        /**
         * @description Globally unique identifier for the goal relationship.
         * @example 12345
         */
        goal_relationship_path_gid: string;
        /**
         * @description Globally unique identifier for the job.
         * @example 12345
         */
        job_path_gid: string;
        /**
         * @description Globally unique identifier for the membership.
         * @example 12345
         */
        membership_path_gid: string;
        /**
         * @description Globally unique identifier for the organization export.
         * @example 12345
         */
        organization_export_path_gid: string;
        /**
         * @description Globally unique identifier for the project brief.
         * @example 12345
         */
        project_brief_path_gid: string;
        /**
         * @description Globally unique identifier for the project.
         * @example 1331
         */
        project_path_gid: string;
        /**
         * @description Globally unique identifier for the project, which is used as a filter when retrieving all custom types.
         * @example 1331
         */
        project_query_param: string;
        /**
         * @description Globally unique identifier for the project template.
         * @example 1331
         */
        project_template_path_gid: string;
        /** @example 1331 */
        project_membership_path_gid: string;
        /**
         * @description The project status update to get.
         * @example 321654
         */
        project_status_path_gid: string;
        /**
         * @description The status update to get.
         * @example 321654
         */
        status_update_path_gid: string;
        /**
         * @description Globally unique identifier for the portfolio.
         * @example 12345
         */
        portfolio_path_gid: string;
        /** @example 1331 */
        portfolio_membership_path_gid: string;
        /**
         * @description The portfolio to filter results on.
         * @example 12345
         */
        portfolio_query_param: string;
        /**
         * @description The ID of the incoming web request trigger. This value is a path parameter that is automatically generated for the API endpoint.
         * @example 12345
         */
        rule_trigger_path_gid: string;
        /**
         * @description The globally unique identifier for the section.
         * @example 321654
         */
        section_path_gid: string;
        /**
         * @description Globally unique identifier for the story.
         * @example 35678
         */
        story_path_gid: string;
        /**
         * @description Globally unique identifier for the target object.
         * @example 1331
         */
        target_query_param: string;
        /**
         * @description Globally unique identifier for the tag.
         * @example 11235
         */
        tag_path_gid: string;
        /**
         * @description The task to operate on.
         * @example 321654
         */
        task_path_gid: string;
        /**
         * @description Globally unique identifier for the task template.
         * @example 1331
         */
        task_template_path_gid: string;
        /**
         * @description Globally unique identifier for the team.
         * @example 159874
         */
        team_path_gid: string;
        /**
         * @description The team to filter projects on.
         * @example 14916
         */
        team_query_param: string;
        /** @example 724362 */
        team_membership_path_gid: string;
        /**
         * @description Globally unique identifier for the time period.
         * @example 917392
         */
        time_period_path_gid: string;
        /**
         * @description Globally unique identifier for the time tracking entry.
         * @example 917392
         */
        time_tracking_entry_path_gid: string;
        /**
         * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
         * @example me
         */
        user_query_param: string;
        /**
         * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
         * @example me
         */
        user_path_gid: string;
        /**
         * @description Globally unique identifier for the user task list.
         * @example 12345
         */
        user_task_list_path_gid: string;
        /**
         * @description Globally unique identifier for the webhook.
         * @example 12345
         */
        webhook_path_gid: string;
        /**
         * @description Globally unique identifier for the workspace or organization.
         * @example 12345
         */
        workspace_path_gid: string;
        /**
         * @description The workspace to filter results on.
         * @example 12345
         */
        workspace_query_param: string;
        /** @example 12345 */
        workspace_membership_path_gid: string;
        /** @description Filter to events created after this time (inclusive). */
        audit_log_start_at: string;
        /** @description Filter to events created before this time (exclusive). */
        audit_log_end_at: string;
        /** @description Filter to events of this type.
         *     Refer to the [supported audit log events](/docs/audit-log-events#supported-audit-log-events) for a full list of values. */
        audit_log_event_type: string;
        /** @description Filter to events with an actor of this type.
         *     This only needs to be included if querying for actor types without an ID. If `actor_gid` is included, this should be excluded. */
        audit_log_actor_type: "user" | "asana" | "asana_support" | "anonymous" | "external_administrator";
        /** @description Filter to events triggered by the actor with this ID. */
        audit_log_actor_gid: string;
        /** @description Filter to events with this resource ID. */
        audit_log_resource_gid: string;
        /**
         * @description Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.
         *
         * @example 2012-02-22T02:06:58.158Z
         */
        completed_since: string;
        /**
         * @description Member object gid can be user or team.
         *
         * @example 123
         */
        member: string;
        /**
         * @description The message to get.
         * @example 321654
         */
        message_path_gid: string;
        /**
         * @description Globally unique identifier for the allocation.
         * @example 77688
         */
        allocation_path_gid: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAllocation: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "assignee",
                 *       "assignee.name",
                 *       "created_by",
                 *       "created_by.name",
                 *       "effort",
                 *       "effort.type",
                 *       "effort.value",
                 *       "end_date",
                 *       "parent",
                 *       "parent.name",
                 *       "resource_subtype",
                 *       "start_date"
                 *     ]
                 */
                opt_fields?: ("assignee" | "assignee.name" | "created_by" | "created_by.name" | "effort" | "effort.type" | "effort.value" | "end_date" | "parent" | "parent.name" | "resource_subtype" | "start_date")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the allocation.
                 * @example 77688
                 */
                allocation_gid: components["parameters"]["allocation_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the record for a single allocation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AllocationResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateAllocation: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "assignee",
                 *       "assignee.name",
                 *       "created_by",
                 *       "created_by.name",
                 *       "effort",
                 *       "effort.type",
                 *       "effort.value",
                 *       "end_date",
                 *       "parent",
                 *       "parent.name",
                 *       "resource_subtype",
                 *       "start_date"
                 *     ]
                 */
                opt_fields?: ("assignee" | "assignee.name" | "created_by" | "created_by.name" | "effort" | "effort.type" | "effort.value" | "end_date" | "parent" | "parent.name" | "resource_subtype" | "start_date")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the allocation.
                 * @example 77688
                 */
                allocation_gid: components["parameters"]["allocation_path_gid"];
            };
            cookie?: never;
        };
        /** @description The updated fields for the allocation. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["AllocationRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the allocation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AllocationResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteAllocation: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the allocation.
                 * @example 77688
                 */
                allocation_gid: components["parameters"]["allocation_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified allocation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getAllocations: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Globally unique identifier for the project to filter allocations by.
                 * @example 77688
                 */
                parent?: string;
                /**
                 * @description Globally unique identifier for the user or placeholder the allocation is assigned to.
                 * @example 12345
                 */
                assignee?: string;
                /**
                 * @description Globally unique identifier for the workspace.
                 * @example 98765
                 */
                workspace?: string;
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "assignee",
                 *       "assignee.name",
                 *       "created_by",
                 *       "created_by.name",
                 *       "effort",
                 *       "effort.type",
                 *       "effort.value",
                 *       "end_date",
                 *       "offset",
                 *       "parent",
                 *       "parent.name",
                 *       "path",
                 *       "resource_subtype",
                 *       "start_date",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("assignee" | "assignee.name" | "created_by" | "created_by.name" | "effort" | "effort.type" | "effort.value" | "end_date" | "offset" | "parent" | "parent.name" | "path" | "resource_subtype" | "start_date" | "uri")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested allocations. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AllocationResponse"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createAllocation: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "assignee",
                 *       "assignee.name",
                 *       "created_by",
                 *       "created_by.name",
                 *       "effort",
                 *       "effort.type",
                 *       "effort.value",
                 *       "end_date",
                 *       "parent",
                 *       "parent.name",
                 *       "resource_subtype",
                 *       "start_date"
                 *     ]
                 */
                opt_fields?: ("assignee" | "assignee.name" | "created_by" | "created_by.name" | "effort" | "effort.type" | "effort.value" | "end_date" | "parent" | "parent.name" | "resource_subtype" | "start_date")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The allocation to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["AllocationRequest"] & Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Successfully created a new allocation. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AllocationResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getAttachment: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "connected_to_app",
                 *       "created_at",
                 *       "download_url",
                 *       "host",
                 *       "name",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "permanent_url",
                 *       "resource_subtype",
                 *       "size",
                 *       "view_url"
                 *     ]
                 */
                opt_fields?: ("connected_to_app" | "created_at" | "download_url" | "host" | "name" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "permanent_url" | "resource_subtype" | "size" | "view_url")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the attachment.
                 * @example 12345
                 */
                attachment_gid: components["parameters"]["attachment_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the record for a single attachment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AttachmentResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            424: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            501: components["responses"]["BadGateway"];
            503: components["responses"]["ServiceUnavailable"];
            504: components["responses"]["GatewayTimeout"];
        };
    };
    deleteAttachment: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the attachment.
                 * @example 12345
                 */
                attachment_gid: components["parameters"]["attachment_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified attachment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getAttachmentsForObject: {
        parameters: {
            query: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description Globally unique identifier for object to fetch statuses from. Must be a GID for a `project`, `project_brief`, or `task`.
                 * @example 159874
                 */
                parent: string;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "connected_to_app",
                 *       "created_at",
                 *       "download_url",
                 *       "host",
                 *       "name",
                 *       "offset",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "path",
                 *       "permanent_url",
                 *       "resource_subtype",
                 *       "size",
                 *       "uri",
                 *       "view_url"
                 *     ]
                 */
                opt_fields?: ("connected_to_app" | "created_at" | "download_url" | "host" | "name" | "offset" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "path" | "permanent_url" | "resource_subtype" | "size" | "uri" | "view_url")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified object's attachments. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AttachmentCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createAttachmentForObject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "connected_to_app",
                 *       "created_at",
                 *       "download_url",
                 *       "host",
                 *       "name",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "permanent_url",
                 *       "resource_subtype",
                 *       "size",
                 *       "view_url"
                 *     ]
                 */
                opt_fields?: ("connected_to_app" | "created_at" | "download_url" | "host" | "name" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "permanent_url" | "resource_subtype" | "size" | "view_url")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The file you want to upload.
         *
         *     *Note when using curl:*
         *
         *     Be sure to add an `‘@’` before the file path, and use the `--form`
         *     option instead of the `-d` option.
         *
         *     When uploading PDFs with curl, force the content-type to be pdf by
         *     appending the content type to the file path: `--form
         *     "file=@file.pdf;type=application/pdf"`. */
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["AttachmentRequest"];
            };
        };
        responses: {
            /** @description Successfully uploaded the attachment to the parent object. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AttachmentResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getAuditLogEvents: {
        parameters: {
            query?: {
                /** @description Filter to events created after this time (inclusive). */
                start_at?: components["parameters"]["audit_log_start_at"];
                /** @description Filter to events created before this time (exclusive). */
                end_at?: components["parameters"]["audit_log_end_at"];
                /** @description Filter to events of this type.
                 *     Refer to the [supported audit log events](/docs/audit-log-events#supported-audit-log-events) for a full list of values. */
                event_type?: components["parameters"]["audit_log_event_type"];
                /** @description Filter to events with an actor of this type.
                 *     This only needs to be included if querying for actor types without an ID. If `actor_gid` is included, this should be excluded. */
                actor_type?: components["parameters"]["audit_log_actor_type"];
                /** @description Filter to events triggered by the actor with this ID. */
                actor_gid?: components["parameters"]["audit_log_actor_gid"];
                /** @description Filter to events with this resource ID. */
                resource_gid?: components["parameters"]["audit_log_resource_gid"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description AuditLogEvents were successfully retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AuditLogEvent"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createBatchRequest: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "body",
                 *       "headers",
                 *       "status_code"
                 *     ]
                 */
                opt_fields?: ("body" | "headers" | "status_code")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The requests to batch together via the Batch API. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["BatchRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully completed the requested batch API operations. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["BatchResponse"][];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getCustomFieldSettingsForProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "custom_field",
                 *       "custom_field.asana_created_field",
                 *       "custom_field.created_by",
                 *       "custom_field.created_by.name",
                 *       "custom_field.currency_code",
                 *       "custom_field.custom_label",
                 *       "custom_field.custom_label_position",
                 *       "custom_field.date_value",
                 *       "custom_field.date_value.date",
                 *       "custom_field.date_value.date_time",
                 *       "custom_field.default_access_level",
                 *       "custom_field.description",
                 *       "custom_field.display_value",
                 *       "custom_field.enabled",
                 *       "custom_field.enum_options",
                 *       "custom_field.enum_options.color",
                 *       "custom_field.enum_options.enabled",
                 *       "custom_field.enum_options.name",
                 *       "custom_field.enum_value",
                 *       "custom_field.enum_value.color",
                 *       "custom_field.enum_value.enabled",
                 *       "custom_field.enum_value.name",
                 *       "custom_field.format",
                 *       "custom_field.has_notifications_enabled",
                 *       "custom_field.id_prefix",
                 *       "custom_field.is_formula_field",
                 *       "custom_field.is_global_to_workspace",
                 *       "custom_field.is_value_read_only",
                 *       "custom_field.multi_enum_values",
                 *       "custom_field.multi_enum_values.color",
                 *       "custom_field.multi_enum_values.enabled",
                 *       "custom_field.multi_enum_values.name",
                 *       "custom_field.name",
                 *       "custom_field.number_value",
                 *       "custom_field.people_value",
                 *       "custom_field.people_value.name",
                 *       "custom_field.precision",
                 *       "custom_field.privacy_setting",
                 *       "custom_field.representation_type",
                 *       "custom_field.resource_subtype",
                 *       "custom_field.text_value",
                 *       "custom_field.type",
                 *       "is_important",
                 *       "offset",
                 *       "parent",
                 *       "parent.name",
                 *       "path",
                 *       "project",
                 *       "project.name",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("custom_field" | "custom_field.asana_created_field" | "custom_field.created_by" | "custom_field.created_by.name" | "custom_field.currency_code" | "custom_field.custom_label" | "custom_field.custom_label_position" | "custom_field.date_value" | "custom_field.date_value.date" | "custom_field.date_value.date_time" | "custom_field.default_access_level" | "custom_field.description" | "custom_field.display_value" | "custom_field.enabled" | "custom_field.enum_options" | "custom_field.enum_options.color" | "custom_field.enum_options.enabled" | "custom_field.enum_options.name" | "custom_field.enum_value" | "custom_field.enum_value.color" | "custom_field.enum_value.enabled" | "custom_field.enum_value.name" | "custom_field.format" | "custom_field.has_notifications_enabled" | "custom_field.id_prefix" | "custom_field.is_formula_field" | "custom_field.is_global_to_workspace" | "custom_field.is_value_read_only" | "custom_field.multi_enum_values" | "custom_field.multi_enum_values.color" | "custom_field.multi_enum_values.enabled" | "custom_field.multi_enum_values.name" | "custom_field.name" | "custom_field.number_value" | "custom_field.people_value" | "custom_field.people_value.name" | "custom_field.precision" | "custom_field.privacy_setting" | "custom_field.representation_type" | "custom_field.resource_subtype" | "custom_field.text_value" | "custom_field.type" | "is_important" | "offset" | "parent" | "parent.name" | "path" | "project" | "project.name" | "uri")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved custom field settings objects for a project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CustomFieldSettingResponse"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getCustomFieldSettingsForPortfolio: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "custom_field",
                 *       "custom_field.asana_created_field",
                 *       "custom_field.created_by",
                 *       "custom_field.created_by.name",
                 *       "custom_field.currency_code",
                 *       "custom_field.custom_label",
                 *       "custom_field.custom_label_position",
                 *       "custom_field.date_value",
                 *       "custom_field.date_value.date",
                 *       "custom_field.date_value.date_time",
                 *       "custom_field.default_access_level",
                 *       "custom_field.description",
                 *       "custom_field.display_value",
                 *       "custom_field.enabled",
                 *       "custom_field.enum_options",
                 *       "custom_field.enum_options.color",
                 *       "custom_field.enum_options.enabled",
                 *       "custom_field.enum_options.name",
                 *       "custom_field.enum_value",
                 *       "custom_field.enum_value.color",
                 *       "custom_field.enum_value.enabled",
                 *       "custom_field.enum_value.name",
                 *       "custom_field.format",
                 *       "custom_field.has_notifications_enabled",
                 *       "custom_field.id_prefix",
                 *       "custom_field.is_formula_field",
                 *       "custom_field.is_global_to_workspace",
                 *       "custom_field.is_value_read_only",
                 *       "custom_field.multi_enum_values",
                 *       "custom_field.multi_enum_values.color",
                 *       "custom_field.multi_enum_values.enabled",
                 *       "custom_field.multi_enum_values.name",
                 *       "custom_field.name",
                 *       "custom_field.number_value",
                 *       "custom_field.people_value",
                 *       "custom_field.people_value.name",
                 *       "custom_field.precision",
                 *       "custom_field.privacy_setting",
                 *       "custom_field.representation_type",
                 *       "custom_field.resource_subtype",
                 *       "custom_field.text_value",
                 *       "custom_field.type",
                 *       "is_important",
                 *       "offset",
                 *       "parent",
                 *       "parent.name",
                 *       "path",
                 *       "project",
                 *       "project.name",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("custom_field" | "custom_field.asana_created_field" | "custom_field.created_by" | "custom_field.created_by.name" | "custom_field.currency_code" | "custom_field.custom_label" | "custom_field.custom_label_position" | "custom_field.date_value" | "custom_field.date_value.date" | "custom_field.date_value.date_time" | "custom_field.default_access_level" | "custom_field.description" | "custom_field.display_value" | "custom_field.enabled" | "custom_field.enum_options" | "custom_field.enum_options.color" | "custom_field.enum_options.enabled" | "custom_field.enum_options.name" | "custom_field.enum_value" | "custom_field.enum_value.color" | "custom_field.enum_value.enabled" | "custom_field.enum_value.name" | "custom_field.format" | "custom_field.has_notifications_enabled" | "custom_field.id_prefix" | "custom_field.is_formula_field" | "custom_field.is_global_to_workspace" | "custom_field.is_value_read_only" | "custom_field.multi_enum_values" | "custom_field.multi_enum_values.color" | "custom_field.multi_enum_values.enabled" | "custom_field.multi_enum_values.name" | "custom_field.name" | "custom_field.number_value" | "custom_field.people_value" | "custom_field.people_value.name" | "custom_field.precision" | "custom_field.privacy_setting" | "custom_field.representation_type" | "custom_field.resource_subtype" | "custom_field.text_value" | "custom_field.type" | "is_important" | "offset" | "parent" | "parent.name" | "path" | "project" | "project.name" | "uri")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved custom field settings objects for a portfolio. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CustomFieldSettingResponse"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createCustomField: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "asana_created_field",
                 *       "created_by",
                 *       "created_by.name",
                 *       "currency_code",
                 *       "custom_label",
                 *       "custom_label_position",
                 *       "date_value",
                 *       "date_value.date",
                 *       "date_value.date_time",
                 *       "default_access_level",
                 *       "description",
                 *       "display_value",
                 *       "enabled",
                 *       "enum_options",
                 *       "enum_options.color",
                 *       "enum_options.enabled",
                 *       "enum_options.name",
                 *       "enum_value",
                 *       "enum_value.color",
                 *       "enum_value.enabled",
                 *       "enum_value.name",
                 *       "format",
                 *       "has_notifications_enabled",
                 *       "id_prefix",
                 *       "is_formula_field",
                 *       "is_global_to_workspace",
                 *       "is_value_read_only",
                 *       "multi_enum_values",
                 *       "multi_enum_values.color",
                 *       "multi_enum_values.enabled",
                 *       "multi_enum_values.name",
                 *       "name",
                 *       "number_value",
                 *       "people_value",
                 *       "people_value.name",
                 *       "precision",
                 *       "privacy_setting",
                 *       "representation_type",
                 *       "resource_subtype",
                 *       "text_value",
                 *       "type"
                 *     ]
                 */
                opt_fields?: ("asana_created_field" | "created_by" | "created_by.name" | "currency_code" | "custom_label" | "custom_label_position" | "date_value" | "date_value.date" | "date_value.date_time" | "default_access_level" | "description" | "display_value" | "enabled" | "enum_options" | "enum_options.color" | "enum_options.enabled" | "enum_options.name" | "enum_value" | "enum_value.color" | "enum_value.enabled" | "enum_value.name" | "format" | "has_notifications_enabled" | "id_prefix" | "is_formula_field" | "is_global_to_workspace" | "is_value_read_only" | "multi_enum_values" | "multi_enum_values.color" | "multi_enum_values.enabled" | "multi_enum_values.name" | "name" | "number_value" | "people_value" | "people_value.name" | "precision" | "privacy_setting" | "representation_type" | "resource_subtype" | "text_value" | "type")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The custom field object to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["CustomFieldCreateRequest"];
                };
            };
        };
        responses: {
            /** @description Custom field successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CustomFieldResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getCustomField: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "asana_created_field",
                 *       "created_by",
                 *       "created_by.name",
                 *       "currency_code",
                 *       "custom_label",
                 *       "custom_label_position",
                 *       "date_value",
                 *       "date_value.date",
                 *       "date_value.date_time",
                 *       "default_access_level",
                 *       "description",
                 *       "display_value",
                 *       "enabled",
                 *       "enum_options",
                 *       "enum_options.color",
                 *       "enum_options.enabled",
                 *       "enum_options.name",
                 *       "enum_value",
                 *       "enum_value.color",
                 *       "enum_value.enabled",
                 *       "enum_value.name",
                 *       "format",
                 *       "has_notifications_enabled",
                 *       "id_prefix",
                 *       "is_formula_field",
                 *       "is_global_to_workspace",
                 *       "is_value_read_only",
                 *       "multi_enum_values",
                 *       "multi_enum_values.color",
                 *       "multi_enum_values.enabled",
                 *       "multi_enum_values.name",
                 *       "name",
                 *       "number_value",
                 *       "people_value",
                 *       "people_value.name",
                 *       "precision",
                 *       "privacy_setting",
                 *       "representation_type",
                 *       "resource_subtype",
                 *       "text_value",
                 *       "type"
                 *     ]
                 */
                opt_fields?: ("asana_created_field" | "created_by" | "created_by.name" | "currency_code" | "custom_label" | "custom_label_position" | "date_value" | "date_value.date" | "date_value.date_time" | "default_access_level" | "description" | "display_value" | "enabled" | "enum_options" | "enum_options.color" | "enum_options.enabled" | "enum_options.name" | "enum_value" | "enum_value.color" | "enum_value.enabled" | "enum_value.name" | "format" | "has_notifications_enabled" | "id_prefix" | "is_formula_field" | "is_global_to_workspace" | "is_value_read_only" | "multi_enum_values" | "multi_enum_values.color" | "multi_enum_values.enabled" | "multi_enum_values.name" | "name" | "number_value" | "people_value" | "people_value.name" | "precision" | "privacy_setting" | "representation_type" | "resource_subtype" | "text_value" | "type")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the custom field.
                 * @example 12345
                 */
                custom_field_gid: components["parameters"]["custom_field_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the complete definition of a custom field’s metadata. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CustomFieldResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateCustomField: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "asana_created_field",
                 *       "created_by",
                 *       "created_by.name",
                 *       "currency_code",
                 *       "custom_label",
                 *       "custom_label_position",
                 *       "date_value",
                 *       "date_value.date",
                 *       "date_value.date_time",
                 *       "default_access_level",
                 *       "description",
                 *       "display_value",
                 *       "enabled",
                 *       "enum_options",
                 *       "enum_options.color",
                 *       "enum_options.enabled",
                 *       "enum_options.name",
                 *       "enum_value",
                 *       "enum_value.color",
                 *       "enum_value.enabled",
                 *       "enum_value.name",
                 *       "format",
                 *       "has_notifications_enabled",
                 *       "id_prefix",
                 *       "is_formula_field",
                 *       "is_global_to_workspace",
                 *       "is_value_read_only",
                 *       "multi_enum_values",
                 *       "multi_enum_values.color",
                 *       "multi_enum_values.enabled",
                 *       "multi_enum_values.name",
                 *       "name",
                 *       "number_value",
                 *       "people_value",
                 *       "people_value.name",
                 *       "precision",
                 *       "privacy_setting",
                 *       "representation_type",
                 *       "resource_subtype",
                 *       "text_value",
                 *       "type"
                 *     ]
                 */
                opt_fields?: ("asana_created_field" | "created_by" | "created_by.name" | "currency_code" | "custom_label" | "custom_label_position" | "date_value" | "date_value.date" | "date_value.date_time" | "default_access_level" | "description" | "display_value" | "enabled" | "enum_options" | "enum_options.color" | "enum_options.enabled" | "enum_options.name" | "enum_value" | "enum_value.color" | "enum_value.enabled" | "enum_value.name" | "format" | "has_notifications_enabled" | "id_prefix" | "is_formula_field" | "is_global_to_workspace" | "is_value_read_only" | "multi_enum_values" | "multi_enum_values.color" | "multi_enum_values.enabled" | "multi_enum_values.name" | "name" | "number_value" | "people_value" | "people_value.name" | "precision" | "privacy_setting" | "representation_type" | "resource_subtype" | "text_value" | "type")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the custom field.
                 * @example 12345
                 */
                custom_field_gid: components["parameters"]["custom_field_path_gid"];
            };
            cookie?: never;
        };
        /** @description The custom field object with all updated properties. */
        requestBody?: {
            content: {
                "application/json": {
                    data?: components["schemas"]["CustomFieldRequest"];
                };
            };
        };
        responses: {
            /** @description The custom field was successfully updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CustomFieldResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteCustomField: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the custom field.
                 * @example 12345
                 */
                custom_field_gid: components["parameters"]["custom_field_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The custom field was successfully deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getCustomFieldsForWorkspace: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "asana_created_field",
                 *       "created_by",
                 *       "created_by.name",
                 *       "currency_code",
                 *       "custom_label",
                 *       "custom_label_position",
                 *       "date_value",
                 *       "date_value.date",
                 *       "date_value.date_time",
                 *       "default_access_level",
                 *       "description",
                 *       "display_value",
                 *       "enabled",
                 *       "enum_options",
                 *       "enum_options.color",
                 *       "enum_options.enabled",
                 *       "enum_options.name",
                 *       "enum_value",
                 *       "enum_value.color",
                 *       "enum_value.enabled",
                 *       "enum_value.name",
                 *       "format",
                 *       "has_notifications_enabled",
                 *       "id_prefix",
                 *       "is_formula_field",
                 *       "is_global_to_workspace",
                 *       "is_value_read_only",
                 *       "multi_enum_values",
                 *       "multi_enum_values.color",
                 *       "multi_enum_values.enabled",
                 *       "multi_enum_values.name",
                 *       "name",
                 *       "number_value",
                 *       "offset",
                 *       "path",
                 *       "people_value",
                 *       "people_value.name",
                 *       "precision",
                 *       "privacy_setting",
                 *       "representation_type",
                 *       "resource_subtype",
                 *       "text_value",
                 *       "type",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("asana_created_field" | "created_by" | "created_by.name" | "currency_code" | "custom_label" | "custom_label_position" | "date_value" | "date_value.date" | "date_value.date_time" | "default_access_level" | "description" | "display_value" | "enabled" | "enum_options" | "enum_options.color" | "enum_options.enabled" | "enum_options.name" | "enum_value" | "enum_value.color" | "enum_value.enabled" | "enum_value.name" | "format" | "has_notifications_enabled" | "id_prefix" | "is_formula_field" | "is_global_to_workspace" | "is_value_read_only" | "multi_enum_values" | "multi_enum_values.color" | "multi_enum_values.enabled" | "multi_enum_values.name" | "name" | "number_value" | "offset" | "path" | "people_value" | "people_value.name" | "precision" | "privacy_setting" | "representation_type" | "resource_subtype" | "text_value" | "type" | "uri")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved all custom fields for the given workspace. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CustomFieldResponse"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createEnumOptionForCustomField: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "color",
                 *       "enabled",
                 *       "name"
                 *     ]
                 */
                opt_fields?: ("color" | "enabled" | "name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the custom field.
                 * @example 12345
                 */
                custom_field_gid: components["parameters"]["custom_field_path_gid"];
            };
            cookie?: never;
        };
        /** @description The enum option object to create. */
        requestBody?: {
            content: {
                "application/json": {
                    data?: components["schemas"]["EnumOptionRequest"];
                };
            };
        };
        responses: {
            /** @description Custom field enum option successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EnumOption"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    insertEnumOptionForCustomField: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "color",
                 *       "enabled",
                 *       "name"
                 *     ]
                 */
                opt_fields?: ("color" | "enabled" | "name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the custom field.
                 * @example 12345
                 */
                custom_field_gid: components["parameters"]["custom_field_path_gid"];
            };
            cookie?: never;
        };
        /** @description The enum option object to create. */
        requestBody?: {
            content: {
                "application/json": {
                    data?: components["schemas"]["EnumOptionInsertRequest"];
                };
            };
        };
        responses: {
            /** @description Custom field enum option successfully reordered. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EnumOption"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateEnumOption: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "color",
                 *       "enabled",
                 *       "name"
                 *     ]
                 */
                opt_fields?: ("color" | "enabled" | "name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the enum option.
                 * @example 124578
                 */
                enum_option_gid: string;
            };
            cookie?: never;
        };
        /** @description The enum option object to update */
        requestBody?: {
            content: {
                "application/json": {
                    data?: components["schemas"]["EnumOptionBase"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the specified custom field enum. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EnumOption"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getCustomTypes: {
        parameters: {
            query: {
                /**
                 * @description Globally unique identifier for the project, which is used as a filter when retrieving all custom types.
                 * @example 1331
                 */
                project: components["parameters"]["project_query_param"];
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "name",
                 *       "offset",
                 *       "path",
                 *       "status_options",
                 *       "status_options.color",
                 *       "status_options.completion_state",
                 *       "status_options.enabled",
                 *       "status_options.name",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("name" | "offset" | "path" | "status_options" | "status_options.color" | "status_options.completion_state" | "status_options.enabled" | "status_options.name" | "uri")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved custom types */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CustomTypeResponse"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getEvents: {
        parameters: {
            query: {
                /**
                 * @description A resource ID to subscribe to. The resource can be a task, project, or goal.
                 * @example 12345
                 */
                resource: string;
                /**
                 * @description A sync token received from the last request, or none on first sync. Events will be returned from the point in time that the sync token was generated.
                 *     *Note: On your first request, omit the sync token. The response will be the same as for an expired sync token, and will include a new valid sync token.If the sync token is too old (which may happen from time to time) the API will return a `412 Precondition Failed` error, and include a fresh sync token in the response.*
                 * @example de4774f6915eae04714ca93bb2f5ee81
                 */
                sync?: string;
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "action",
                 *       "change",
                 *       "change.action",
                 *       "change.added_value",
                 *       "change.field",
                 *       "change.new_value",
                 *       "change.removed_value",
                 *       "created_at",
                 *       "parent",
                 *       "parent.name",
                 *       "resource",
                 *       "resource.name",
                 *       "type",
                 *       "user",
                 *       "user.name"
                 *     ]
                 */
                opt_fields?: ("action" | "change" | "change.action" | "change.added_value" | "change.field" | "change.new_value" | "change.removed_value" | "created_at" | "parent" | "parent.name" | "resource" | "resource.name" | "type" | "user" | "user.name")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved events. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EventResponse"][];
                        /**
                         * @description A sync token to be used with the next call to the /events endpoint.
                         * @example de4774f6915eae04714ca93bb2f5ee81
                         */
                        sync?: string;
                        /**
                         * @description Indicates whether there are more events to pull.
                         * @example true
                         */
                        has_more?: boolean;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            /** @description The request is missing or has an expired sync token. */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        errors?: {
                            /**
                             * @description Message providing more detail about the error that occurred, if available.
                             * @example Sync token invalid or too old. If you are attempting to keep resources in sync, you must fetch the full dataset for this query now and use the new sync token for the next sync.
                             */
                            readonly message?: string;
                        }[];
                        /**
                         * @description A sync token to be used with the next call to the /events endpoint.
                         * @example de4774f6915eae04714ca93bb2f5ee81
                         */
                        readonly sync?: string;
                    };
                };
            };
            500: components["responses"]["InternalServerError"];
        };
    };
    getGoalRelationship: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "contribution_weight",
                 *       "resource_subtype",
                 *       "supported_goal",
                 *       "supported_goal.name",
                 *       "supported_goal.owner",
                 *       "supported_goal.owner.name",
                 *       "supporting_resource",
                 *       "supporting_resource.name"
                 *     ]
                 */
                opt_fields?: ("contribution_weight" | "resource_subtype" | "supported_goal" | "supported_goal.name" | "supported_goal.owner" | "supported_goal.owner.name" | "supporting_resource" | "supporting_resource.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal relationship.
                 * @example 12345
                 */
                goal_relationship_gid: components["parameters"]["goal_relationship_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the record for the goal relationship. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GoalRelationshipResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateGoalRelationship: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "contribution_weight",
                 *       "resource_subtype",
                 *       "supported_goal",
                 *       "supported_goal.name",
                 *       "supported_goal.owner",
                 *       "supported_goal.owner.name",
                 *       "supporting_resource",
                 *       "supporting_resource.name"
                 *     ]
                 */
                opt_fields?: ("contribution_weight" | "resource_subtype" | "supported_goal" | "supported_goal.name" | "supported_goal.owner" | "supported_goal.owner.name" | "supporting_resource" | "supporting_resource.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal relationship.
                 * @example 12345
                 */
                goal_relationship_gid: components["parameters"]["goal_relationship_path_gid"];
            };
            cookie?: never;
        };
        /** @description The updated fields for the goal relationship. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["GoalRelationshipRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the goal relationship. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GoalRelationshipResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getGoalRelationships: {
        parameters: {
            query: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description Globally unique identifier for the supported goal in the goal relationship.
                 * @example 12345
                 */
                supported_goal: string;
                /**
                 * @description If provided, filter to goal relationships with a given resource_subtype.
                 * @example subgoal
                 */
                resource_subtype?: string;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "contribution_weight",
                 *       "offset",
                 *       "path",
                 *       "resource_subtype",
                 *       "supported_goal",
                 *       "supported_goal.name",
                 *       "supported_goal.owner",
                 *       "supported_goal.owner.name",
                 *       "supporting_resource",
                 *       "supporting_resource.name",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("contribution_weight" | "offset" | "path" | "resource_subtype" | "supported_goal" | "supported_goal.name" | "supported_goal.owner" | "supported_goal.owner.name" | "supporting_resource" | "supporting_resource.name" | "uri")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested goal relationships. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GoalRelationshipCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addSupportingRelationship: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "contribution_weight",
                 *       "resource_subtype",
                 *       "supported_goal",
                 *       "supported_goal.name",
                 *       "supported_goal.owner",
                 *       "supported_goal.owner.name",
                 *       "supporting_resource",
                 *       "supporting_resource.name"
                 *     ]
                 */
                opt_fields?: ("contribution_weight" | "resource_subtype" | "supported_goal" | "supported_goal.name" | "supported_goal.owner" | "supported_goal.owner.name" | "supporting_resource" | "supporting_resource.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        /** @description The supporting resource to be added to the goal */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["GoalAddSupportingRelationshipRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the goal relationship. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GoalRelationshipResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeSupportingRelationship: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        /** @description The supporting resource to be removed from the goal */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["GoalRemoveSupportingRelationshipRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully removed the goal relationship. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getGoal: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "is_workspace_level",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "metric",
                 *       "metric.can_manage",
                 *       "metric.currency_code",
                 *       "metric.current_display_value",
                 *       "metric.current_number_value",
                 *       "metric.initial_number_value",
                 *       "metric.is_custom_weight",
                 *       "metric.precision",
                 *       "metric.progress_source",
                 *       "metric.resource_subtype",
                 *       "metric.target_number_value",
                 *       "metric.unit",
                 *       "name",
                 *       "notes",
                 *       "num_likes",
                 *       "owner",
                 *       "owner.name",
                 *       "start_on",
                 *       "status",
                 *       "team",
                 *       "team.name",
                 *       "time_period",
                 *       "time_period.display_name",
                 *       "time_period.end_on",
                 *       "time_period.period",
                 *       "time_period.start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "due_on" | "followers" | "followers.name" | "html_notes" | "is_workspace_level" | "liked" | "likes" | "likes.user" | "likes.user.name" | "metric" | "metric.can_manage" | "metric.currency_code" | "metric.current_display_value" | "metric.current_number_value" | "metric.initial_number_value" | "metric.is_custom_weight" | "metric.precision" | "metric.progress_source" | "metric.resource_subtype" | "metric.target_number_value" | "metric.unit" | "name" | "notes" | "num_likes" | "owner" | "owner.name" | "start_on" | "status" | "team" | "team.name" | "time_period" | "time_period.display_name" | "time_period.end_on" | "time_period.period" | "time_period.start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the record for a single goal. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GoalResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateGoal: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "is_workspace_level",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "metric",
                 *       "metric.can_manage",
                 *       "metric.currency_code",
                 *       "metric.current_display_value",
                 *       "metric.current_number_value",
                 *       "metric.initial_number_value",
                 *       "metric.is_custom_weight",
                 *       "metric.precision",
                 *       "metric.progress_source",
                 *       "metric.resource_subtype",
                 *       "metric.target_number_value",
                 *       "metric.unit",
                 *       "name",
                 *       "notes",
                 *       "num_likes",
                 *       "owner",
                 *       "owner.name",
                 *       "start_on",
                 *       "status",
                 *       "team",
                 *       "team.name",
                 *       "time_period",
                 *       "time_period.display_name",
                 *       "time_period.end_on",
                 *       "time_period.period",
                 *       "time_period.start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "due_on" | "followers" | "followers.name" | "html_notes" | "is_workspace_level" | "liked" | "likes" | "likes.user" | "likes.user.name" | "metric" | "metric.can_manage" | "metric.currency_code" | "metric.current_display_value" | "metric.current_number_value" | "metric.initial_number_value" | "metric.is_custom_weight" | "metric.precision" | "metric.progress_source" | "metric.resource_subtype" | "metric.target_number_value" | "metric.unit" | "name" | "notes" | "num_likes" | "owner" | "owner.name" | "start_on" | "status" | "team" | "team.name" | "time_period" | "time_period.display_name" | "time_period.end_on" | "time_period.period" | "time_period.start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        /** @description The updated fields for the goal. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["GoalUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the goal. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GoalResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteGoal: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified goal. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getGoals: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Globally unique identifier for supporting portfolio.
                 * @example 159874
                 */
                portfolio?: string;
                /**
                 * @description Globally unique identifier for supporting project.
                 * @example 512241
                 */
                project?: string;
                /**
                 * @description Globally unique identifier for supporting task.
                 * @example 78424
                 */
                task?: string;
                /**
                 * @description Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter.
                 * @example false
                 */
                is_workspace_level?: boolean;
                /**
                 * @description Globally unique identifier for the team.
                 * @example 31326
                 */
                team?: string;
                /**
                 * @description Globally unique identifier for the workspace.
                 * @example 31326
                 */
                workspace?: string;
                /**
                 * @description Globally unique identifiers for the time periods.
                 * @example 221693,506165
                 */
                time_periods?: string[];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "is_workspace_level",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "metric",
                 *       "metric.can_manage",
                 *       "metric.currency_code",
                 *       "metric.current_display_value",
                 *       "metric.current_number_value",
                 *       "metric.initial_number_value",
                 *       "metric.is_custom_weight",
                 *       "metric.precision",
                 *       "metric.progress_source",
                 *       "metric.resource_subtype",
                 *       "metric.target_number_value",
                 *       "metric.unit",
                 *       "name",
                 *       "notes",
                 *       "num_likes",
                 *       "offset",
                 *       "owner",
                 *       "owner.name",
                 *       "path",
                 *       "start_on",
                 *       "status",
                 *       "team",
                 *       "team.name",
                 *       "time_period",
                 *       "time_period.display_name",
                 *       "time_period.end_on",
                 *       "time_period.period",
                 *       "time_period.start_on",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "due_on" | "followers" | "followers.name" | "html_notes" | "is_workspace_level" | "liked" | "likes" | "likes.user" | "likes.user.name" | "metric" | "metric.can_manage" | "metric.currency_code" | "metric.current_display_value" | "metric.current_number_value" | "metric.initial_number_value" | "metric.is_custom_weight" | "metric.precision" | "metric.progress_source" | "metric.resource_subtype" | "metric.target_number_value" | "metric.unit" | "name" | "notes" | "num_likes" | "offset" | "owner" | "owner.name" | "path" | "start_on" | "status" | "team" | "team.name" | "time_period" | "time_period.display_name" | "time_period.end_on" | "time_period.period" | "time_period.start_on" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested goals. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GoalCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createGoal: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "is_workspace_level",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "metric",
                 *       "metric.can_manage",
                 *       "metric.currency_code",
                 *       "metric.current_display_value",
                 *       "metric.current_number_value",
                 *       "metric.initial_number_value",
                 *       "metric.is_custom_weight",
                 *       "metric.precision",
                 *       "metric.progress_source",
                 *       "metric.resource_subtype",
                 *       "metric.target_number_value",
                 *       "metric.unit",
                 *       "name",
                 *       "notes",
                 *       "num_likes",
                 *       "owner",
                 *       "owner.name",
                 *       "start_on",
                 *       "status",
                 *       "team",
                 *       "team.name",
                 *       "time_period",
                 *       "time_period.display_name",
                 *       "time_period.end_on",
                 *       "time_period.period",
                 *       "time_period.start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "due_on" | "followers" | "followers.name" | "html_notes" | "is_workspace_level" | "liked" | "likes" | "likes.user" | "likes.user.name" | "metric" | "metric.can_manage" | "metric.currency_code" | "metric.current_display_value" | "metric.current_number_value" | "metric.initial_number_value" | "metric.is_custom_weight" | "metric.precision" | "metric.progress_source" | "metric.resource_subtype" | "metric.target_number_value" | "metric.unit" | "name" | "notes" | "num_likes" | "owner" | "owner.name" | "start_on" | "status" | "team" | "team.name" | "time_period" | "time_period.display_name" | "time_period.end_on" | "time_period.period" | "time_period.start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The goal to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["GoalRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created a new goal. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GoalResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createGoalMetric: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "is_workspace_level",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "metric",
                 *       "metric.can_manage",
                 *       "metric.currency_code",
                 *       "metric.current_display_value",
                 *       "metric.current_number_value",
                 *       "metric.initial_number_value",
                 *       "metric.is_custom_weight",
                 *       "metric.precision",
                 *       "metric.progress_source",
                 *       "metric.resource_subtype",
                 *       "metric.target_number_value",
                 *       "metric.unit",
                 *       "name",
                 *       "notes",
                 *       "num_likes",
                 *       "owner",
                 *       "owner.name",
                 *       "start_on",
                 *       "status",
                 *       "team",
                 *       "team.name",
                 *       "time_period",
                 *       "time_period.display_name",
                 *       "time_period.end_on",
                 *       "time_period.period",
                 *       "time_period.start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "due_on" | "followers" | "followers.name" | "html_notes" | "is_workspace_level" | "liked" | "likes" | "likes.user" | "likes.user.name" | "metric" | "metric.can_manage" | "metric.currency_code" | "metric.current_display_value" | "metric.current_number_value" | "metric.initial_number_value" | "metric.is_custom_weight" | "metric.precision" | "metric.progress_source" | "metric.resource_subtype" | "metric.target_number_value" | "metric.unit" | "name" | "notes" | "num_likes" | "owner" | "owner.name" | "start_on" | "status" | "team" | "team.name" | "time_period" | "time_period.display_name" | "time_period.end_on" | "time_period.period" | "time_period.start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        /** @description The goal metric to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["GoalMetricRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created a new goal metric. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GoalResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateGoalMetric: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "is_workspace_level",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "metric",
                 *       "metric.can_manage",
                 *       "metric.currency_code",
                 *       "metric.current_display_value",
                 *       "metric.current_number_value",
                 *       "metric.initial_number_value",
                 *       "metric.is_custom_weight",
                 *       "metric.precision",
                 *       "metric.progress_source",
                 *       "metric.resource_subtype",
                 *       "metric.target_number_value",
                 *       "metric.unit",
                 *       "name",
                 *       "notes",
                 *       "num_likes",
                 *       "owner",
                 *       "owner.name",
                 *       "start_on",
                 *       "status",
                 *       "team",
                 *       "team.name",
                 *       "time_period",
                 *       "time_period.display_name",
                 *       "time_period.end_on",
                 *       "time_period.period",
                 *       "time_period.start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "due_on" | "followers" | "followers.name" | "html_notes" | "is_workspace_level" | "liked" | "likes" | "likes.user" | "likes.user.name" | "metric" | "metric.can_manage" | "metric.currency_code" | "metric.current_display_value" | "metric.current_number_value" | "metric.initial_number_value" | "metric.is_custom_weight" | "metric.precision" | "metric.progress_source" | "metric.resource_subtype" | "metric.target_number_value" | "metric.unit" | "name" | "notes" | "num_likes" | "owner" | "owner.name" | "start_on" | "status" | "team" | "team.name" | "time_period" | "time_period.display_name" | "time_period.end_on" | "time_period.period" | "time_period.start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        /** @description The updated fields for the goal metric. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["GoalMetricCurrentValueRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the goal metric. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GoalResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addFollowers: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "is_workspace_level",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "metric",
                 *       "metric.can_manage",
                 *       "metric.currency_code",
                 *       "metric.current_display_value",
                 *       "metric.current_number_value",
                 *       "metric.initial_number_value",
                 *       "metric.is_custom_weight",
                 *       "metric.precision",
                 *       "metric.progress_source",
                 *       "metric.resource_subtype",
                 *       "metric.target_number_value",
                 *       "metric.unit",
                 *       "name",
                 *       "notes",
                 *       "num_likes",
                 *       "owner",
                 *       "owner.name",
                 *       "start_on",
                 *       "status",
                 *       "team",
                 *       "team.name",
                 *       "time_period",
                 *       "time_period.display_name",
                 *       "time_period.end_on",
                 *       "time_period.period",
                 *       "time_period.start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "due_on" | "followers" | "followers.name" | "html_notes" | "is_workspace_level" | "liked" | "likes" | "likes.user" | "likes.user.name" | "metric" | "metric.can_manage" | "metric.currency_code" | "metric.current_display_value" | "metric.current_number_value" | "metric.initial_number_value" | "metric.is_custom_weight" | "metric.precision" | "metric.progress_source" | "metric.resource_subtype" | "metric.target_number_value" | "metric.unit" | "name" | "notes" | "num_likes" | "owner" | "owner.name" | "start_on" | "status" | "team" | "team.name" | "time_period" | "time_period.display_name" | "time_period.end_on" | "time_period.period" | "time_period.start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        /** @description The followers to be added as collaborators */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TaskAddFollowersRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully added users as collaborators. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GoalResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeFollowers: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "is_workspace_level",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "metric",
                 *       "metric.can_manage",
                 *       "metric.currency_code",
                 *       "metric.current_display_value",
                 *       "metric.current_number_value",
                 *       "metric.initial_number_value",
                 *       "metric.is_custom_weight",
                 *       "metric.precision",
                 *       "metric.progress_source",
                 *       "metric.resource_subtype",
                 *       "metric.target_number_value",
                 *       "metric.unit",
                 *       "name",
                 *       "notes",
                 *       "num_likes",
                 *       "owner",
                 *       "owner.name",
                 *       "start_on",
                 *       "status",
                 *       "team",
                 *       "team.name",
                 *       "time_period",
                 *       "time_period.display_name",
                 *       "time_period.end_on",
                 *       "time_period.period",
                 *       "time_period.start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "due_on" | "followers" | "followers.name" | "html_notes" | "is_workspace_level" | "liked" | "likes" | "likes.user" | "likes.user.name" | "metric" | "metric.can_manage" | "metric.currency_code" | "metric.current_display_value" | "metric.current_number_value" | "metric.initial_number_value" | "metric.is_custom_weight" | "metric.precision" | "metric.progress_source" | "metric.resource_subtype" | "metric.target_number_value" | "metric.unit" | "name" | "notes" | "num_likes" | "owner" | "owner.name" | "start_on" | "status" | "team" | "team.name" | "time_period" | "time_period.display_name" | "time_period.end_on" | "time_period.period" | "time_period.start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        /** @description The followers to be removed as collaborators */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TaskAddFollowersRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully removed users as collaborators. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GoalResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getParentGoalsForGoal: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "is_workspace_level",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "metric",
                 *       "metric.can_manage",
                 *       "metric.currency_code",
                 *       "metric.current_display_value",
                 *       "metric.current_number_value",
                 *       "metric.initial_number_value",
                 *       "metric.is_custom_weight",
                 *       "metric.precision",
                 *       "metric.progress_source",
                 *       "metric.resource_subtype",
                 *       "metric.target_number_value",
                 *       "metric.unit",
                 *       "name",
                 *       "notes",
                 *       "num_likes",
                 *       "owner",
                 *       "owner.name",
                 *       "start_on",
                 *       "status",
                 *       "team",
                 *       "team.name",
                 *       "time_period",
                 *       "time_period.display_name",
                 *       "time_period.end_on",
                 *       "time_period.period",
                 *       "time_period.start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "due_on" | "followers" | "followers.name" | "html_notes" | "is_workspace_level" | "liked" | "likes" | "likes.user" | "likes.user.name" | "metric" | "metric.can_manage" | "metric.currency_code" | "metric.current_display_value" | "metric.current_number_value" | "metric.initial_number_value" | "metric.is_custom_weight" | "metric.precision" | "metric.progress_source" | "metric.resource_subtype" | "metric.target_number_value" | "metric.unit" | "name" | "notes" | "num_likes" | "owner" | "owner.name" | "start_on" | "status" | "team" | "team.name" | "time_period" | "time_period.display_name" | "time_period.end_on" | "time_period.period" | "time_period.start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the goal.
                 * @example 12345
                 */
                goal_gid: components["parameters"]["goal_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified goal's parent goals. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["GoalCompact"][];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getJob: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "new_project",
                 *       "new_project.name",
                 *       "new_project_template",
                 *       "new_project_template.name",
                 *       "new_task",
                 *       "new_task.created_by",
                 *       "new_task.name",
                 *       "new_task.resource_subtype",
                 *       "new_task_template",
                 *       "new_task_template.name",
                 *       "resource_subtype",
                 *       "status"
                 *     ]
                 */
                opt_fields?: ("new_project" | "new_project.name" | "new_project_template" | "new_project_template.name" | "new_task" | "new_task.created_by" | "new_task.name" | "new_task.resource_subtype" | "new_task_template" | "new_task_template.name" | "resource_subtype" | "status")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the job.
                 * @example 12345
                 */
                job_gid: components["parameters"]["job_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved Job. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["JobResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getMemberships: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Globally unique identifier for `goal`, `project`, `portfolio`, or `custom_field`.
                 * @example 159874
                 */
                parent?: string;
                /**
                 * @description Globally unique identifier for `team` or `user`.
                 * @example 1061493
                 */
                member?: string;
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "offset",
                 *       "path",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("offset" | "path" | "uri")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested membership. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["MembershipCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createMembership: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The updated fields for the membership. */
        requestBody?: {
            content: {
                "application/json": {
                    data?: components["schemas"]["CreateMembershipRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the requested membership. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["MembershipResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getMembership: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the membership.
                 * @example 12345
                 */
                membership_gid: components["parameters"]["membership_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the record for a single membership. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["MembershipResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateMembership: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the membership.
                 * @example 12345
                 */
                membership_gid: components["parameters"]["membership_path_gid"];
            };
            cookie?: never;
        };
        /** @description The membership to update. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["MembershipRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the requested membership. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["MembershipResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteMembership: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the membership.
                 * @example 12345
                 */
                membership_gid: components["parameters"]["membership_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the requested membership. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createOrganizationExport: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "created_at",
                 *       "download_url",
                 *       "organization",
                 *       "organization.name",
                 *       "state"
                 *     ]
                 */
                opt_fields?: ("created_at" | "download_url" | "organization" | "organization.name" | "state")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The organization to export. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["OrganizationExportRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created organization export request. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["OrganizationExportResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getOrganizationExport: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "created_at",
                 *       "download_url",
                 *       "organization",
                 *       "organization.name",
                 *       "state"
                 *     ]
                 */
                opt_fields?: ("created_at" | "download_url" | "organization" | "organization.name" | "state")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the organization export.
                 * @example 12345
                 */
                organization_export_gid: components["parameters"]["organization_export_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved organization export object. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["OrganizationExportResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getPortfolioMemberships: {
        parameters: {
            query?: {
                /**
                 * @description The portfolio to filter results on.
                 * @example 12345
                 */
                portfolio?: components["parameters"]["portfolio_query_param"];
                /**
                 * @description The workspace to filter results on.
                 * @example 12345
                 */
                workspace?: components["parameters"]["workspace_query_param"];
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user?: components["parameters"]["user_query_param"];
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "access_level",
                 *       "offset",
                 *       "path",
                 *       "portfolio",
                 *       "portfolio.name",
                 *       "uri",
                 *       "user",
                 *       "user.name"
                 *     ]
                 */
                opt_fields?: ("access_level" | "offset" | "path" | "portfolio" | "portfolio.name" | "uri" | "user" | "user.name")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved portfolio memberships. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["DeprecatedPortfolioMembershipCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getPortfolioMembership: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "access_level",
                 *       "portfolio",
                 *       "portfolio.name",
                 *       "user",
                 *       "user.name"
                 *     ]
                 */
                opt_fields?: ("access_level" | "portfolio" | "portfolio.name" | "user" | "user.name")[];
            };
            header?: never;
            path: {
                /** @example 1331 */
                portfolio_membership_gid: components["parameters"]["portfolio_membership_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested portfolio membership. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["DeprecatedPortfolioMembershipResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getPortfolioMembershipsForPortfolio: {
        parameters: {
            query?: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user?: components["parameters"]["user_query_param"];
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "access_level",
                 *       "offset",
                 *       "path",
                 *       "portfolio",
                 *       "portfolio.name",
                 *       "uri",
                 *       "user",
                 *       "user.name"
                 *     ]
                 */
                opt_fields?: ("access_level" | "offset" | "path" | "portfolio" | "portfolio.name" | "uri" | "user" | "user.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested portfolio's memberships. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["DeprecatedPortfolioMembershipCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getPortfolios: {
        parameters: {
            query: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description The workspace or organization to filter portfolios on.
                 * @example 1331
                 */
                workspace: string;
                /**
                 * @description The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned.
                 * @example 14916
                 */
                owner?: string;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "due_on",
                 *       "members",
                 *       "members.name",
                 *       "name",
                 *       "offset",
                 *       "owner",
                 *       "owner.name",
                 *       "path",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_templates",
                 *       "project_templates.name",
                 *       "public",
                 *       "start_on",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "created_at" | "created_by" | "created_by.name" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "due_on" | "members" | "members.name" | "name" | "offset" | "owner" | "owner.name" | "path" | "permalink_url" | "privacy_setting" | "project_templates" | "project_templates.name" | "public" | "start_on" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved portfolios. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PortfolioCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createPortfolio: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "due_on",
                 *       "members",
                 *       "members.name",
                 *       "name",
                 *       "owner",
                 *       "owner.name",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_templates",
                 *       "project_templates.name",
                 *       "public",
                 *       "start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "created_at" | "created_by" | "created_by.name" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "due_on" | "members" | "members.name" | "name" | "owner" | "owner.name" | "permalink_url" | "privacy_setting" | "project_templates" | "project_templates.name" | "public" | "start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The portfolio to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["PortfolioRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created portfolio. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PortfolioResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getPortfolio: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "due_on",
                 *       "members",
                 *       "members.name",
                 *       "name",
                 *       "owner",
                 *       "owner.name",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_templates",
                 *       "project_templates.name",
                 *       "public",
                 *       "start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "created_at" | "created_by" | "created_by.name" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "due_on" | "members" | "members.name" | "name" | "owner" | "owner.name" | "permalink_url" | "privacy_setting" | "project_templates" | "project_templates.name" | "public" | "start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested portfolio. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PortfolioResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updatePortfolio: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "due_on",
                 *       "members",
                 *       "members.name",
                 *       "name",
                 *       "owner",
                 *       "owner.name",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_templates",
                 *       "project_templates.name",
                 *       "public",
                 *       "start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "created_at" | "created_by" | "created_by.name" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "due_on" | "members" | "members.name" | "name" | "owner" | "owner.name" | "permalink_url" | "privacy_setting" | "project_templates" | "project_templates.name" | "public" | "start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        /** @description The updated fields for the portfolio. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["PortfolioRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the portfolio. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PortfolioResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deletePortfolio: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified portfolio. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getItemsForPortfolio: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_from_template",
                 *       "created_from_template.name",
                 *       "current_status",
                 *       "current_status.author",
                 *       "current_status.author.name",
                 *       "current_status.color",
                 *       "current_status.created_at",
                 *       "current_status.created_by",
                 *       "current_status.created_by.name",
                 *       "current_status.html_text",
                 *       "current_status.modified_at",
                 *       "current_status.text",
                 *       "current_status.title",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "default_view",
                 *       "due_date",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "icon",
                 *       "members",
                 *       "members.name",
                 *       "minimum_access_level_for_customization",
                 *       "minimum_access_level_for_sharing",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "offset",
                 *       "owner",
                 *       "path",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_brief",
                 *       "public",
                 *       "start_on",
                 *       "team",
                 *       "team.name",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_from_template" | "created_from_template.name" | "current_status" | "current_status.author" | "current_status.author.name" | "current_status.color" | "current_status.created_at" | "current_status.created_by" | "current_status.created_by.name" | "current_status.html_text" | "current_status.modified_at" | "current_status.text" | "current_status.title" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "default_view" | "due_date" | "due_on" | "followers" | "followers.name" | "html_notes" | "icon" | "members" | "members.name" | "minimum_access_level_for_customization" | "minimum_access_level_for_sharing" | "modified_at" | "name" | "notes" | "offset" | "owner" | "path" | "permalink_url" | "privacy_setting" | "project_brief" | "public" | "start_on" | "team" | "team.name" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested portfolio's items. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addItemForPortfolio: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        /** @description Information about the item being inserted. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["PortfolioAddItemRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully added the item to the portfolio. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeItemForPortfolio: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        /** @description Information about the item being removed. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["PortfolioRemoveItemRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully removed the item from the portfolio. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addCustomFieldSettingForPortfolio: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        /** @description Information about the custom field setting. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["AddCustomFieldSettingRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully added the custom field to the portfolio. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CustomFieldSettingResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeCustomFieldSettingForPortfolio: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        /** @description Information about the custom field setting being removed. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["RemoveCustomFieldSettingRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully removed the custom field from the portfolio. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addMembersForPortfolio: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "due_on",
                 *       "members",
                 *       "members.name",
                 *       "name",
                 *       "owner",
                 *       "owner.name",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_templates",
                 *       "project_templates.name",
                 *       "public",
                 *       "start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "created_at" | "created_by" | "created_by.name" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "due_on" | "members" | "members.name" | "name" | "owner" | "owner.name" | "permalink_url" | "privacy_setting" | "project_templates" | "project_templates.name" | "public" | "start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        /** @description Information about the members being added. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["AddMembersRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully added members to the portfolio. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PortfolioResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeMembersForPortfolio: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "due_on",
                 *       "members",
                 *       "members.name",
                 *       "name",
                 *       "owner",
                 *       "owner.name",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_templates",
                 *       "project_templates.name",
                 *       "public",
                 *       "start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "created_at" | "created_by" | "created_by.name" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "due_on" | "members" | "members.name" | "name" | "owner" | "owner.name" | "permalink_url" | "privacy_setting" | "project_templates" | "project_templates.name" | "public" | "start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the portfolio.
                 * @example 12345
                 */
                portfolio_gid: components["parameters"]["portfolio_path_gid"];
            };
            cookie?: never;
        };
        /** @description Information about the members being removed. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["RemoveMembersRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully removed the members from the portfolio. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PortfolioResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProjectBrief: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "html_text",
                 *       "permalink_url",
                 *       "project",
                 *       "project.name",
                 *       "text",
                 *       "title"
                 *     ]
                 */
                opt_fields?: ("html_text" | "permalink_url" | "project" | "project.name" | "text" | "title")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project brief.
                 * @example 12345
                 */
                project_brief_gid: components["parameters"]["project_brief_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the record for a project brief. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectBriefResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            424: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            501: components["responses"]["BadGateway"];
            503: components["responses"]["ServiceUnavailable"];
            504: components["responses"]["GatewayTimeout"];
        };
    };
    updateProjectBrief: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "html_text",
                 *       "permalink_url",
                 *       "project",
                 *       "project.name",
                 *       "text",
                 *       "title"
                 *     ]
                 */
                opt_fields?: ("html_text" | "permalink_url" | "project" | "project.name" | "text" | "title")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project brief.
                 * @example 12345
                 */
                project_brief_gid: components["parameters"]["project_brief_path_gid"];
            };
            cookie?: never;
        };
        /** @description The updated fields for the project brief. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ProjectBriefRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the project brief. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectBriefResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteProjectBrief: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project brief.
                 * @example 12345
                 */
                project_brief_gid: components["parameters"]["project_brief_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified project brief. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createProjectBrief: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "html_text",
                 *       "permalink_url",
                 *       "project",
                 *       "project.name",
                 *       "text",
                 *       "title"
                 *     ]
                 */
                opt_fields?: ("html_text" | "permalink_url" | "project" | "project.name" | "text" | "title")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /** @description The project brief to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ProjectBriefRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created a new project brief. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectBriefResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProjectMembership: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "access_level",
                 *       "member",
                 *       "member.name",
                 *       "parent",
                 *       "parent.name",
                 *       "project",
                 *       "project.name",
                 *       "user",
                 *       "user.name",
                 *       "write_access"
                 *     ]
                 */
                opt_fields?: ("access_level" | "member" | "member.name" | "parent" | "parent.name" | "project" | "project.name" | "user" | "user.name" | "write_access")[];
            };
            header?: never;
            path: {
                /** @example 1331 */
                project_membership_gid: components["parameters"]["project_membership_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested project membership. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectMembershipNormalResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProjectMembershipsForProject: {
        parameters: {
            query?: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user?: components["parameters"]["user_query_param"];
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "access_level",
                 *       "member",
                 *       "member.name",
                 *       "offset",
                 *       "parent",
                 *       "parent.name",
                 *       "path",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("access_level" | "member" | "member.name" | "offset" | "parent" | "parent.name" | "path" | "uri")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested project's memberships. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectMembershipCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProjectStatus: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "author",
                 *       "author.name",
                 *       "color",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "html_text",
                 *       "modified_at",
                 *       "text",
                 *       "title"
                 *     ]
                 */
                opt_fields?: ("author" | "author.name" | "color" | "created_at" | "created_by" | "created_by.name" | "html_text" | "modified_at" | "text" | "title")[];
            };
            header?: never;
            path: {
                /**
                 * @description The project status update to get.
                 * @example 321654
                 */
                project_status_gid: components["parameters"]["project_status_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified project's status updates. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectStatusResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteProjectStatus: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The project status update to get.
                 * @example 321654
                 */
                project_status_gid: components["parameters"]["project_status_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified project status. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProjectStatusesForProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "author",
                 *       "author.name",
                 *       "color",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "html_text",
                 *       "modified_at",
                 *       "offset",
                 *       "path",
                 *       "text",
                 *       "title",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("author" | "author.name" | "color" | "created_at" | "created_by" | "created_by.name" | "html_text" | "modified_at" | "offset" | "path" | "text" | "title" | "uri")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified project's status updates. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectStatusCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createProjectStatusForProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "author",
                 *       "author.name",
                 *       "color",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "html_text",
                 *       "modified_at",
                 *       "text",
                 *       "title"
                 *     ]
                 */
                opt_fields?: ("author" | "author.name" | "color" | "created_at" | "created_by" | "created_by.name" | "html_text" | "modified_at" | "text" | "title")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /** @description The project status to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ProjectStatusRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created a new story. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectStatusResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProjectTemplate: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "color",
                 *       "description",
                 *       "html_description",
                 *       "name",
                 *       "owner",
                 *       "public",
                 *       "requested_dates",
                 *       "requested_dates.description",
                 *       "requested_dates.name",
                 *       "requested_roles",
                 *       "requested_roles.name",
                 *       "team",
                 *       "team.name"
                 *     ]
                 */
                opt_fields?: ("color" | "description" | "html_description" | "name" | "owner" | "public" | "requested_dates" | "requested_dates.description" | "requested_dates.name" | "requested_roles" | "requested_roles.name" | "team" | "team.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project template.
                 * @example 1331
                 */
                project_template_gid: components["parameters"]["project_template_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested project template. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectTemplateResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteProjectTemplate: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project template.
                 * @example 1331
                 */
                project_template_gid: components["parameters"]["project_template_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified project template. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProjectTemplates: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description The workspace to filter results on.
                 * @example 12345
                 */
                workspace?: components["parameters"]["workspace_query_param"];
                /**
                 * @description The team to filter projects on.
                 * @example 14916
                 */
                team?: components["parameters"]["team_query_param"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "color",
                 *       "description",
                 *       "html_description",
                 *       "name",
                 *       "offset",
                 *       "owner",
                 *       "path",
                 *       "public",
                 *       "requested_dates",
                 *       "requested_dates.description",
                 *       "requested_dates.name",
                 *       "requested_roles",
                 *       "requested_roles.name",
                 *       "team",
                 *       "team.name",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("color" | "description" | "html_description" | "name" | "offset" | "owner" | "path" | "public" | "requested_dates" | "requested_dates.description" | "requested_dates.name" | "requested_roles" | "requested_roles.name" | "team" | "team.name" | "uri")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested team's or workspace's project templates. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectTemplateCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProjectTemplatesForTeam: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "color",
                 *       "description",
                 *       "html_description",
                 *       "name",
                 *       "offset",
                 *       "owner",
                 *       "path",
                 *       "public",
                 *       "requested_dates",
                 *       "requested_dates.description",
                 *       "requested_dates.name",
                 *       "requested_roles",
                 *       "requested_roles.name",
                 *       "team",
                 *       "team.name",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("color" | "description" | "html_description" | "name" | "offset" | "owner" | "path" | "public" | "requested_dates" | "requested_dates.description" | "requested_dates.name" | "requested_roles" | "requested_roles.name" | "team" | "team.name" | "uri")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested team's project templates. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectTemplateCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    instantiateProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "new_project",
                 *       "new_project.name",
                 *       "new_project_template",
                 *       "new_project_template.name",
                 *       "new_task",
                 *       "new_task.created_by",
                 *       "new_task.name",
                 *       "new_task.resource_subtype",
                 *       "new_task_template",
                 *       "new_task_template.name",
                 *       "resource_subtype",
                 *       "status"
                 *     ]
                 */
                opt_fields?: ("new_project" | "new_project.name" | "new_project_template" | "new_project_template.name" | "new_task" | "new_task.created_by" | "new_task.name" | "new_task.resource_subtype" | "new_task_template" | "new_task_template.name" | "resource_subtype" | "status")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project template.
                 * @example 1331
                 */
                project_template_gid: components["parameters"]["project_template_path_gid"];
            };
            cookie?: never;
        };
        /** @description Describes the inputs used for instantiating a project, such as the resulting project's name, which team it should be created in, and values for date variables. */
        requestBody?: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ProjectTemplateInstantiateProjectRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the job to handle project instantiation. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["JobResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProjects: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description The workspace or organization to filter projects on.
                 * @example 1331
                 */
                workspace?: string;
                /**
                 * @description The team to filter projects on.
                 * @example 14916
                 */
                team?: string;
                /**
                 * @description Only return projects whose `archived` field takes on the value of this parameter.
                 * @example false
                 */
                archived?: components["parameters"]["archived_query_param"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_from_template",
                 *       "created_from_template.name",
                 *       "current_status",
                 *       "current_status.author",
                 *       "current_status.author.name",
                 *       "current_status.color",
                 *       "current_status.created_at",
                 *       "current_status.created_by",
                 *       "current_status.created_by.name",
                 *       "current_status.html_text",
                 *       "current_status.modified_at",
                 *       "current_status.text",
                 *       "current_status.title",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "default_view",
                 *       "due_date",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "icon",
                 *       "members",
                 *       "members.name",
                 *       "minimum_access_level_for_customization",
                 *       "minimum_access_level_for_sharing",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "offset",
                 *       "owner",
                 *       "path",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_brief",
                 *       "public",
                 *       "start_on",
                 *       "team",
                 *       "team.name",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_from_template" | "created_from_template.name" | "current_status" | "current_status.author" | "current_status.author.name" | "current_status.color" | "current_status.created_at" | "current_status.created_by" | "current_status.created_by.name" | "current_status.html_text" | "current_status.modified_at" | "current_status.text" | "current_status.title" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "default_view" | "due_date" | "due_on" | "followers" | "followers.name" | "html_notes" | "icon" | "members" | "members.name" | "minimum_access_level_for_customization" | "minimum_access_level_for_sharing" | "modified_at" | "name" | "notes" | "offset" | "owner" | "path" | "permalink_url" | "privacy_setting" | "project_brief" | "public" | "start_on" | "team" | "team.name" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved projects. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_from_template",
                 *       "created_from_template.name",
                 *       "current_status",
                 *       "current_status.author",
                 *       "current_status.author.name",
                 *       "current_status.color",
                 *       "current_status.created_at",
                 *       "current_status.created_by",
                 *       "current_status.created_by.name",
                 *       "current_status.html_text",
                 *       "current_status.modified_at",
                 *       "current_status.text",
                 *       "current_status.title",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "default_view",
                 *       "due_date",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "icon",
                 *       "members",
                 *       "members.name",
                 *       "minimum_access_level_for_customization",
                 *       "minimum_access_level_for_sharing",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "owner",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_brief",
                 *       "public",
                 *       "start_on",
                 *       "team",
                 *       "team.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_from_template" | "created_from_template.name" | "current_status" | "current_status.author" | "current_status.author.name" | "current_status.color" | "current_status.created_at" | "current_status.created_by" | "current_status.created_by.name" | "current_status.html_text" | "current_status.modified_at" | "current_status.text" | "current_status.title" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "default_view" | "due_date" | "due_on" | "followers" | "followers.name" | "html_notes" | "icon" | "members" | "members.name" | "minimum_access_level_for_customization" | "minimum_access_level_for_sharing" | "modified_at" | "name" | "notes" | "owner" | "permalink_url" | "privacy_setting" | "project_brief" | "public" | "start_on" | "team" | "team.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The project to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ProjectRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully retrieved projects. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_from_template",
                 *       "created_from_template.name",
                 *       "current_status",
                 *       "current_status.author",
                 *       "current_status.author.name",
                 *       "current_status.color",
                 *       "current_status.created_at",
                 *       "current_status.created_by",
                 *       "current_status.created_by.name",
                 *       "current_status.html_text",
                 *       "current_status.modified_at",
                 *       "current_status.text",
                 *       "current_status.title",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "default_view",
                 *       "due_date",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "icon",
                 *       "members",
                 *       "members.name",
                 *       "minimum_access_level_for_customization",
                 *       "minimum_access_level_for_sharing",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "owner",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_brief",
                 *       "public",
                 *       "start_on",
                 *       "team",
                 *       "team.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_from_template" | "created_from_template.name" | "current_status" | "current_status.author" | "current_status.author.name" | "current_status.color" | "current_status.created_at" | "current_status.created_by" | "current_status.created_by.name" | "current_status.html_text" | "current_status.modified_at" | "current_status.text" | "current_status.title" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "default_view" | "due_date" | "due_on" | "followers" | "followers.name" | "html_notes" | "icon" | "members" | "members.name" | "minimum_access_level_for_customization" | "minimum_access_level_for_sharing" | "modified_at" | "name" | "notes" | "owner" | "permalink_url" | "privacy_setting" | "project_brief" | "public" | "start_on" | "team" | "team.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_from_template",
                 *       "created_from_template.name",
                 *       "current_status",
                 *       "current_status.author",
                 *       "current_status.author.name",
                 *       "current_status.color",
                 *       "current_status.created_at",
                 *       "current_status.created_by",
                 *       "current_status.created_by.name",
                 *       "current_status.html_text",
                 *       "current_status.modified_at",
                 *       "current_status.text",
                 *       "current_status.title",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "default_view",
                 *       "due_date",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "icon",
                 *       "members",
                 *       "members.name",
                 *       "minimum_access_level_for_customization",
                 *       "minimum_access_level_for_sharing",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "owner",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_brief",
                 *       "public",
                 *       "start_on",
                 *       "team",
                 *       "team.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_from_template" | "created_from_template.name" | "current_status" | "current_status.author" | "current_status.author.name" | "current_status.color" | "current_status.created_at" | "current_status.created_by" | "current_status.created_by.name" | "current_status.html_text" | "current_status.modified_at" | "current_status.text" | "current_status.title" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "default_view" | "due_date" | "due_on" | "followers" | "followers.name" | "html_notes" | "icon" | "members" | "members.name" | "minimum_access_level_for_customization" | "minimum_access_level_for_sharing" | "modified_at" | "name" | "notes" | "owner" | "permalink_url" | "privacy_setting" | "project_brief" | "public" | "start_on" | "team" | "team.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /** @description The updated fields for the project. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ProjectUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    duplicateProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "new_project",
                 *       "new_project.name",
                 *       "new_project_template",
                 *       "new_project_template.name",
                 *       "new_task",
                 *       "new_task.created_by",
                 *       "new_task.name",
                 *       "new_task.resource_subtype",
                 *       "new_task_template",
                 *       "new_task_template.name",
                 *       "resource_subtype",
                 *       "status"
                 *     ]
                 */
                opt_fields?: ("new_project" | "new_project.name" | "new_project_template" | "new_project_template.name" | "new_task" | "new_task.created_by" | "new_task.name" | "new_task.resource_subtype" | "new_task_template" | "new_task_template.name" | "resource_subtype" | "status")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /** @description Describes the duplicate's name and the elements that will be duplicated. */
        requestBody?: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ProjectDuplicateRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the job to handle duplication. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["JobResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProjectsForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_from_template",
                 *       "created_from_template.name",
                 *       "current_status",
                 *       "current_status.author",
                 *       "current_status.author.name",
                 *       "current_status.color",
                 *       "current_status.created_at",
                 *       "current_status.created_by",
                 *       "current_status.created_by.name",
                 *       "current_status.html_text",
                 *       "current_status.modified_at",
                 *       "current_status.text",
                 *       "current_status.title",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "default_view",
                 *       "due_date",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "icon",
                 *       "members",
                 *       "members.name",
                 *       "minimum_access_level_for_customization",
                 *       "minimum_access_level_for_sharing",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "offset",
                 *       "owner",
                 *       "path",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_brief",
                 *       "public",
                 *       "start_on",
                 *       "team",
                 *       "team.name",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_from_template" | "created_from_template.name" | "current_status" | "current_status.author" | "current_status.author.name" | "current_status.color" | "current_status.created_at" | "current_status.created_by" | "current_status.created_by.name" | "current_status.html_text" | "current_status.modified_at" | "current_status.text" | "current_status.title" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "default_view" | "due_date" | "due_on" | "followers" | "followers.name" | "html_notes" | "icon" | "members" | "members.name" | "minimum_access_level_for_customization" | "minimum_access_level_for_sharing" | "modified_at" | "name" | "notes" | "offset" | "owner" | "path" | "permalink_url" | "privacy_setting" | "project_brief" | "public" | "start_on" | "team" | "team.name" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the projects for the given task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProjectsForTeam: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description Only return projects whose `archived` field takes on the value of this parameter.
                 * @example false
                 */
                archived?: components["parameters"]["archived_query_param"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_from_template",
                 *       "created_from_template.name",
                 *       "current_status",
                 *       "current_status.author",
                 *       "current_status.author.name",
                 *       "current_status.color",
                 *       "current_status.created_at",
                 *       "current_status.created_by",
                 *       "current_status.created_by.name",
                 *       "current_status.html_text",
                 *       "current_status.modified_at",
                 *       "current_status.text",
                 *       "current_status.title",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "default_view",
                 *       "due_date",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "icon",
                 *       "members",
                 *       "members.name",
                 *       "minimum_access_level_for_customization",
                 *       "minimum_access_level_for_sharing",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "offset",
                 *       "owner",
                 *       "path",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_brief",
                 *       "public",
                 *       "start_on",
                 *       "team",
                 *       "team.name",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_from_template" | "created_from_template.name" | "current_status" | "current_status.author" | "current_status.author.name" | "current_status.color" | "current_status.created_at" | "current_status.created_by" | "current_status.created_by.name" | "current_status.html_text" | "current_status.modified_at" | "current_status.text" | "current_status.title" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "default_view" | "due_date" | "due_on" | "followers" | "followers.name" | "html_notes" | "icon" | "members" | "members.name" | "minimum_access_level_for_customization" | "minimum_access_level_for_sharing" | "modified_at" | "name" | "notes" | "offset" | "owner" | "path" | "permalink_url" | "privacy_setting" | "project_brief" | "public" | "start_on" | "team" | "team.name" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested team's projects. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createProjectForTeam: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_from_template",
                 *       "created_from_template.name",
                 *       "current_status",
                 *       "current_status.author",
                 *       "current_status.author.name",
                 *       "current_status.color",
                 *       "current_status.created_at",
                 *       "current_status.created_by",
                 *       "current_status.created_by.name",
                 *       "current_status.html_text",
                 *       "current_status.modified_at",
                 *       "current_status.text",
                 *       "current_status.title",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "default_view",
                 *       "due_date",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "icon",
                 *       "members",
                 *       "members.name",
                 *       "minimum_access_level_for_customization",
                 *       "minimum_access_level_for_sharing",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "owner",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_brief",
                 *       "public",
                 *       "start_on",
                 *       "team",
                 *       "team.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_from_template" | "created_from_template.name" | "current_status" | "current_status.author" | "current_status.author.name" | "current_status.color" | "current_status.created_at" | "current_status.created_by" | "current_status.created_by.name" | "current_status.html_text" | "current_status.modified_at" | "current_status.text" | "current_status.title" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "default_view" | "due_date" | "due_on" | "followers" | "followers.name" | "html_notes" | "icon" | "members" | "members.name" | "minimum_access_level_for_customization" | "minimum_access_level_for_sharing" | "modified_at" | "name" | "notes" | "owner" | "permalink_url" | "privacy_setting" | "project_brief" | "public" | "start_on" | "team" | "team.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        /** @description The new project to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ProjectRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the specified project. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProjectsForWorkspace: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description Only return projects whose `archived` field takes on the value of this parameter.
                 * @example false
                 */
                archived?: components["parameters"]["archived_query_param"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_from_template",
                 *       "created_from_template.name",
                 *       "current_status",
                 *       "current_status.author",
                 *       "current_status.author.name",
                 *       "current_status.color",
                 *       "current_status.created_at",
                 *       "current_status.created_by",
                 *       "current_status.created_by.name",
                 *       "current_status.html_text",
                 *       "current_status.modified_at",
                 *       "current_status.text",
                 *       "current_status.title",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "default_view",
                 *       "due_date",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "icon",
                 *       "members",
                 *       "members.name",
                 *       "minimum_access_level_for_customization",
                 *       "minimum_access_level_for_sharing",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "offset",
                 *       "owner",
                 *       "path",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_brief",
                 *       "public",
                 *       "start_on",
                 *       "team",
                 *       "team.name",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_from_template" | "created_from_template.name" | "current_status" | "current_status.author" | "current_status.author.name" | "current_status.color" | "current_status.created_at" | "current_status.created_by" | "current_status.created_by.name" | "current_status.html_text" | "current_status.modified_at" | "current_status.text" | "current_status.title" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "default_view" | "due_date" | "due_on" | "followers" | "followers.name" | "html_notes" | "icon" | "members" | "members.name" | "minimum_access_level_for_customization" | "minimum_access_level_for_sharing" | "modified_at" | "name" | "notes" | "offset" | "owner" | "path" | "permalink_url" | "privacy_setting" | "project_brief" | "public" | "start_on" | "team" | "team.name" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested workspace's projects. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createProjectForWorkspace: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_from_template",
                 *       "created_from_template.name",
                 *       "current_status",
                 *       "current_status.author",
                 *       "current_status.author.name",
                 *       "current_status.color",
                 *       "current_status.created_at",
                 *       "current_status.created_by",
                 *       "current_status.created_by.name",
                 *       "current_status.html_text",
                 *       "current_status.modified_at",
                 *       "current_status.text",
                 *       "current_status.title",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "default_view",
                 *       "due_date",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "icon",
                 *       "members",
                 *       "members.name",
                 *       "minimum_access_level_for_customization",
                 *       "minimum_access_level_for_sharing",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "owner",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_brief",
                 *       "public",
                 *       "start_on",
                 *       "team",
                 *       "team.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_from_template" | "created_from_template.name" | "current_status" | "current_status.author" | "current_status.author.name" | "current_status.color" | "current_status.created_at" | "current_status.created_by" | "current_status.created_by.name" | "current_status.html_text" | "current_status.modified_at" | "current_status.text" | "current_status.title" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "default_view" | "due_date" | "due_on" | "followers" | "followers.name" | "html_notes" | "icon" | "members" | "members.name" | "minimum_access_level_for_customization" | "minimum_access_level_for_sharing" | "modified_at" | "name" | "notes" | "owner" | "permalink_url" | "privacy_setting" | "project_brief" | "public" | "start_on" | "team" | "team.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /** @description The new project to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ProjectRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created a new project in the specified workspace. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addCustomFieldSettingForProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "custom_field",
                 *       "custom_field.asana_created_field",
                 *       "custom_field.created_by",
                 *       "custom_field.created_by.name",
                 *       "custom_field.currency_code",
                 *       "custom_field.custom_label",
                 *       "custom_field.custom_label_position",
                 *       "custom_field.date_value",
                 *       "custom_field.date_value.date",
                 *       "custom_field.date_value.date_time",
                 *       "custom_field.default_access_level",
                 *       "custom_field.description",
                 *       "custom_field.display_value",
                 *       "custom_field.enabled",
                 *       "custom_field.enum_options",
                 *       "custom_field.enum_options.color",
                 *       "custom_field.enum_options.enabled",
                 *       "custom_field.enum_options.name",
                 *       "custom_field.enum_value",
                 *       "custom_field.enum_value.color",
                 *       "custom_field.enum_value.enabled",
                 *       "custom_field.enum_value.name",
                 *       "custom_field.format",
                 *       "custom_field.has_notifications_enabled",
                 *       "custom_field.id_prefix",
                 *       "custom_field.is_formula_field",
                 *       "custom_field.is_global_to_workspace",
                 *       "custom_field.is_value_read_only",
                 *       "custom_field.multi_enum_values",
                 *       "custom_field.multi_enum_values.color",
                 *       "custom_field.multi_enum_values.enabled",
                 *       "custom_field.multi_enum_values.name",
                 *       "custom_field.name",
                 *       "custom_field.number_value",
                 *       "custom_field.people_value",
                 *       "custom_field.people_value.name",
                 *       "custom_field.precision",
                 *       "custom_field.privacy_setting",
                 *       "custom_field.representation_type",
                 *       "custom_field.resource_subtype",
                 *       "custom_field.text_value",
                 *       "custom_field.type",
                 *       "is_important",
                 *       "parent",
                 *       "parent.name",
                 *       "project",
                 *       "project.name"
                 *     ]
                 */
                opt_fields?: ("custom_field" | "custom_field.asana_created_field" | "custom_field.created_by" | "custom_field.created_by.name" | "custom_field.currency_code" | "custom_field.custom_label" | "custom_field.custom_label_position" | "custom_field.date_value" | "custom_field.date_value.date" | "custom_field.date_value.date_time" | "custom_field.default_access_level" | "custom_field.description" | "custom_field.display_value" | "custom_field.enabled" | "custom_field.enum_options" | "custom_field.enum_options.color" | "custom_field.enum_options.enabled" | "custom_field.enum_options.name" | "custom_field.enum_value" | "custom_field.enum_value.color" | "custom_field.enum_value.enabled" | "custom_field.enum_value.name" | "custom_field.format" | "custom_field.has_notifications_enabled" | "custom_field.id_prefix" | "custom_field.is_formula_field" | "custom_field.is_global_to_workspace" | "custom_field.is_value_read_only" | "custom_field.multi_enum_values" | "custom_field.multi_enum_values.color" | "custom_field.multi_enum_values.enabled" | "custom_field.multi_enum_values.name" | "custom_field.name" | "custom_field.number_value" | "custom_field.people_value" | "custom_field.people_value.name" | "custom_field.precision" | "custom_field.privacy_setting" | "custom_field.representation_type" | "custom_field.resource_subtype" | "custom_field.text_value" | "custom_field.type" | "is_important" | "parent" | "parent.name" | "project" | "project.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /** @description Information about the custom field setting. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["AddCustomFieldSettingRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully added the custom field to the project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CustomFieldSettingResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeCustomFieldSettingForProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /** @description Information about the custom field setting being removed. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["RemoveCustomFieldSettingRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully removed the custom field from the project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTaskCountsForProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "num_completed_milestones",
                 *       "num_completed_tasks",
                 *       "num_incomplete_milestones",
                 *       "num_incomplete_tasks",
                 *       "num_milestones",
                 *       "num_tasks"
                 *     ]
                 */
                opt_fields?: ("num_completed_milestones" | "num_completed_tasks" | "num_incomplete_milestones" | "num_incomplete_tasks" | "num_milestones" | "num_tasks")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested project's task counts. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskCountResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addMembersForProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_from_template",
                 *       "created_from_template.name",
                 *       "current_status",
                 *       "current_status.author",
                 *       "current_status.author.name",
                 *       "current_status.color",
                 *       "current_status.created_at",
                 *       "current_status.created_by",
                 *       "current_status.created_by.name",
                 *       "current_status.html_text",
                 *       "current_status.modified_at",
                 *       "current_status.text",
                 *       "current_status.title",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "default_view",
                 *       "due_date",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "icon",
                 *       "members",
                 *       "members.name",
                 *       "minimum_access_level_for_customization",
                 *       "minimum_access_level_for_sharing",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "owner",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_brief",
                 *       "public",
                 *       "start_on",
                 *       "team",
                 *       "team.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_from_template" | "created_from_template.name" | "current_status" | "current_status.author" | "current_status.author.name" | "current_status.color" | "current_status.created_at" | "current_status.created_by" | "current_status.created_by.name" | "current_status.html_text" | "current_status.modified_at" | "current_status.text" | "current_status.title" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "default_view" | "due_date" | "due_on" | "followers" | "followers.name" | "html_notes" | "icon" | "members" | "members.name" | "minimum_access_level_for_customization" | "minimum_access_level_for_sharing" | "modified_at" | "name" | "notes" | "owner" | "permalink_url" | "privacy_setting" | "project_brief" | "public" | "start_on" | "team" | "team.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /** @description Information about the members being added. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["AddMembersRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully added members to the project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeMembersForProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_from_template",
                 *       "created_from_template.name",
                 *       "current_status",
                 *       "current_status.author",
                 *       "current_status.author.name",
                 *       "current_status.color",
                 *       "current_status.created_at",
                 *       "current_status.created_by",
                 *       "current_status.created_by.name",
                 *       "current_status.html_text",
                 *       "current_status.modified_at",
                 *       "current_status.text",
                 *       "current_status.title",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "default_view",
                 *       "due_date",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "icon",
                 *       "members",
                 *       "members.name",
                 *       "minimum_access_level_for_customization",
                 *       "minimum_access_level_for_sharing",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "owner",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_brief",
                 *       "public",
                 *       "start_on",
                 *       "team",
                 *       "team.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_from_template" | "created_from_template.name" | "current_status" | "current_status.author" | "current_status.author.name" | "current_status.color" | "current_status.created_at" | "current_status.created_by" | "current_status.created_by.name" | "current_status.html_text" | "current_status.modified_at" | "current_status.text" | "current_status.title" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "default_view" | "due_date" | "due_on" | "followers" | "followers.name" | "html_notes" | "icon" | "members" | "members.name" | "minimum_access_level_for_customization" | "minimum_access_level_for_sharing" | "modified_at" | "name" | "notes" | "owner" | "permalink_url" | "privacy_setting" | "project_brief" | "public" | "start_on" | "team" | "team.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /** @description Information about the members being removed. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["RemoveMembersRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully removed the members from the project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addFollowersForProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_from_template",
                 *       "created_from_template.name",
                 *       "current_status",
                 *       "current_status.author",
                 *       "current_status.author.name",
                 *       "current_status.color",
                 *       "current_status.created_at",
                 *       "current_status.created_by",
                 *       "current_status.created_by.name",
                 *       "current_status.html_text",
                 *       "current_status.modified_at",
                 *       "current_status.text",
                 *       "current_status.title",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "default_view",
                 *       "due_date",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "icon",
                 *       "members",
                 *       "members.name",
                 *       "minimum_access_level_for_customization",
                 *       "minimum_access_level_for_sharing",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "owner",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_brief",
                 *       "public",
                 *       "start_on",
                 *       "team",
                 *       "team.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_from_template" | "created_from_template.name" | "current_status" | "current_status.author" | "current_status.author.name" | "current_status.color" | "current_status.created_at" | "current_status.created_by" | "current_status.created_by.name" | "current_status.html_text" | "current_status.modified_at" | "current_status.text" | "current_status.title" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "default_view" | "due_date" | "due_on" | "followers" | "followers.name" | "html_notes" | "icon" | "members" | "members.name" | "minimum_access_level_for_customization" | "minimum_access_level_for_sharing" | "modified_at" | "name" | "notes" | "owner" | "permalink_url" | "privacy_setting" | "project_brief" | "public" | "start_on" | "team" | "team.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /** @description Information about the followers being added. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["AddFollowersRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully added followers to the project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeFollowersForProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "archived",
                 *       "color",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_from_template",
                 *       "created_from_template.name",
                 *       "current_status",
                 *       "current_status.author",
                 *       "current_status.author.name",
                 *       "current_status.color",
                 *       "current_status.created_at",
                 *       "current_status.created_by",
                 *       "current_status.created_by.name",
                 *       "current_status.html_text",
                 *       "current_status.modified_at",
                 *       "current_status.text",
                 *       "current_status.title",
                 *       "current_status_update",
                 *       "current_status_update.resource_subtype",
                 *       "current_status_update.title",
                 *       "custom_field_settings",
                 *       "custom_field_settings.custom_field",
                 *       "custom_field_settings.custom_field.asana_created_field",
                 *       "custom_field_settings.custom_field.created_by",
                 *       "custom_field_settings.custom_field.created_by.name",
                 *       "custom_field_settings.custom_field.currency_code",
                 *       "custom_field_settings.custom_field.custom_label",
                 *       "custom_field_settings.custom_field.custom_label_position",
                 *       "custom_field_settings.custom_field.date_value",
                 *       "custom_field_settings.custom_field.date_value.date",
                 *       "custom_field_settings.custom_field.date_value.date_time",
                 *       "custom_field_settings.custom_field.default_access_level",
                 *       "custom_field_settings.custom_field.description",
                 *       "custom_field_settings.custom_field.display_value",
                 *       "custom_field_settings.custom_field.enabled",
                 *       "custom_field_settings.custom_field.enum_options",
                 *       "custom_field_settings.custom_field.enum_options.color",
                 *       "custom_field_settings.custom_field.enum_options.enabled",
                 *       "custom_field_settings.custom_field.enum_options.name",
                 *       "custom_field_settings.custom_field.enum_value",
                 *       "custom_field_settings.custom_field.enum_value.color",
                 *       "custom_field_settings.custom_field.enum_value.enabled",
                 *       "custom_field_settings.custom_field.enum_value.name",
                 *       "custom_field_settings.custom_field.format",
                 *       "custom_field_settings.custom_field.has_notifications_enabled",
                 *       "custom_field_settings.custom_field.id_prefix",
                 *       "custom_field_settings.custom_field.is_formula_field",
                 *       "custom_field_settings.custom_field.is_global_to_workspace",
                 *       "custom_field_settings.custom_field.is_value_read_only",
                 *       "custom_field_settings.custom_field.multi_enum_values",
                 *       "custom_field_settings.custom_field.multi_enum_values.color",
                 *       "custom_field_settings.custom_field.multi_enum_values.enabled",
                 *       "custom_field_settings.custom_field.multi_enum_values.name",
                 *       "custom_field_settings.custom_field.name",
                 *       "custom_field_settings.custom_field.number_value",
                 *       "custom_field_settings.custom_field.people_value",
                 *       "custom_field_settings.custom_field.people_value.name",
                 *       "custom_field_settings.custom_field.precision",
                 *       "custom_field_settings.custom_field.privacy_setting",
                 *       "custom_field_settings.custom_field.representation_type",
                 *       "custom_field_settings.custom_field.resource_subtype",
                 *       "custom_field_settings.custom_field.text_value",
                 *       "custom_field_settings.custom_field.type",
                 *       "custom_field_settings.is_important",
                 *       "custom_field_settings.parent",
                 *       "custom_field_settings.parent.name",
                 *       "custom_field_settings.project",
                 *       "custom_field_settings.project.name",
                 *       "custom_fields",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "default_access_level",
                 *       "default_view",
                 *       "due_date",
                 *       "due_on",
                 *       "followers",
                 *       "followers.name",
                 *       "html_notes",
                 *       "icon",
                 *       "members",
                 *       "members.name",
                 *       "minimum_access_level_for_customization",
                 *       "minimum_access_level_for_sharing",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "owner",
                 *       "permalink_url",
                 *       "privacy_setting",
                 *       "project_brief",
                 *       "public",
                 *       "start_on",
                 *       "team",
                 *       "team.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("archived" | "color" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_from_template" | "created_from_template.name" | "current_status" | "current_status.author" | "current_status.author.name" | "current_status.color" | "current_status.created_at" | "current_status.created_by" | "current_status.created_by.name" | "current_status.html_text" | "current_status.modified_at" | "current_status.text" | "current_status.title" | "current_status_update" | "current_status_update.resource_subtype" | "current_status_update.title" | "custom_field_settings" | "custom_field_settings.custom_field" | "custom_field_settings.custom_field.asana_created_field" | "custom_field_settings.custom_field.created_by" | "custom_field_settings.custom_field.created_by.name" | "custom_field_settings.custom_field.currency_code" | "custom_field_settings.custom_field.custom_label" | "custom_field_settings.custom_field.custom_label_position" | "custom_field_settings.custom_field.date_value" | "custom_field_settings.custom_field.date_value.date" | "custom_field_settings.custom_field.date_value.date_time" | "custom_field_settings.custom_field.default_access_level" | "custom_field_settings.custom_field.description" | "custom_field_settings.custom_field.display_value" | "custom_field_settings.custom_field.enabled" | "custom_field_settings.custom_field.enum_options" | "custom_field_settings.custom_field.enum_options.color" | "custom_field_settings.custom_field.enum_options.enabled" | "custom_field_settings.custom_field.enum_options.name" | "custom_field_settings.custom_field.enum_value" | "custom_field_settings.custom_field.enum_value.color" | "custom_field_settings.custom_field.enum_value.enabled" | "custom_field_settings.custom_field.enum_value.name" | "custom_field_settings.custom_field.format" | "custom_field_settings.custom_field.has_notifications_enabled" | "custom_field_settings.custom_field.id_prefix" | "custom_field_settings.custom_field.is_formula_field" | "custom_field_settings.custom_field.is_global_to_workspace" | "custom_field_settings.custom_field.is_value_read_only" | "custom_field_settings.custom_field.multi_enum_values" | "custom_field_settings.custom_field.multi_enum_values.color" | "custom_field_settings.custom_field.multi_enum_values.enabled" | "custom_field_settings.custom_field.multi_enum_values.name" | "custom_field_settings.custom_field.name" | "custom_field_settings.custom_field.number_value" | "custom_field_settings.custom_field.people_value" | "custom_field_settings.custom_field.people_value.name" | "custom_field_settings.custom_field.precision" | "custom_field_settings.custom_field.privacy_setting" | "custom_field_settings.custom_field.representation_type" | "custom_field_settings.custom_field.resource_subtype" | "custom_field_settings.custom_field.text_value" | "custom_field_settings.custom_field.type" | "custom_field_settings.is_important" | "custom_field_settings.parent" | "custom_field_settings.parent.name" | "custom_field_settings.project" | "custom_field_settings.project.name" | "custom_fields" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.representation_type" | "custom_fields.text_value" | "custom_fields.type" | "default_access_level" | "default_view" | "due_date" | "due_on" | "followers" | "followers.name" | "html_notes" | "icon" | "members" | "members.name" | "minimum_access_level_for_customization" | "minimum_access_level_for_sharing" | "modified_at" | "name" | "notes" | "owner" | "permalink_url" | "privacy_setting" | "project_brief" | "public" | "start_on" | "team" | "team.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /** @description Information about the followers being removed. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["RemoveFollowersRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully removed followers from the project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProjectResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    projectSaveAsTemplate: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "new_project",
                 *       "new_project.name",
                 *       "new_project_template",
                 *       "new_project_template.name",
                 *       "new_task",
                 *       "new_task.created_by",
                 *       "new_task.name",
                 *       "new_task.resource_subtype",
                 *       "new_task_template",
                 *       "new_task_template.name",
                 *       "resource_subtype",
                 *       "status"
                 *     ]
                 */
                opt_fields?: ("new_project" | "new_project.name" | "new_project_template" | "new_project_template.name" | "new_task" | "new_task.created_by" | "new_task.name" | "new_task.resource_subtype" | "new_task_template" | "new_task_template.name" | "resource_subtype" | "status")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /** @description Describes the inputs used for creating a project template, such as the resulting project template's name, which team it should be created in. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ProjectSaveAsTemplateRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the job to handle project template creation. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["JobResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    triggerRule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the incoming web request trigger. This value is a path parameter that is automatically generated for the API endpoint.
                 * @example 12345
                 */
                rule_trigger_gid: components["parameters"]["rule_trigger_path_gid"];
            };
            cookie?: never;
        };
        /** @description A dictionary of variables accessible from within the rule. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["RuleTriggerRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully triggered a rule. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["RuleTriggerResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getSection: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "created_at",
                 *       "name",
                 *       "project",
                 *       "project.name",
                 *       "projects",
                 *       "projects.name"
                 *     ]
                 */
                opt_fields?: ("created_at" | "name" | "project" | "project.name" | "projects" | "projects.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description The globally unique identifier for the section.
                 * @example 321654
                 */
                section_gid: components["parameters"]["section_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved section. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SectionResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateSection: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "created_at",
                 *       "name",
                 *       "project",
                 *       "project.name",
                 *       "projects",
                 *       "projects.name"
                 *     ]
                 */
                opt_fields?: ("created_at" | "name" | "project" | "project.name" | "projects" | "projects.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description The globally unique identifier for the section.
                 * @example 321654
                 */
                section_gid: components["parameters"]["section_path_gid"];
            };
            cookie?: never;
        };
        /** @description The section to create. */
        requestBody?: {
            content: {
                "application/json": {
                    data?: components["schemas"]["SectionRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the specified section. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SectionResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteSection: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The globally unique identifier for the section.
                 * @example 321654
                 */
                section_gid: components["parameters"]["section_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified section. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getSectionsForProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "created_at",
                 *       "name",
                 *       "offset",
                 *       "path",
                 *       "project",
                 *       "project.name",
                 *       "projects",
                 *       "projects.name",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("created_at" | "name" | "offset" | "path" | "project" | "project.name" | "projects" | "projects.name" | "uri")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved sections in project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SectionCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createSectionForProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "created_at",
                 *       "name",
                 *       "project",
                 *       "project.name",
                 *       "projects",
                 *       "projects.name"
                 *     ]
                 */
                opt_fields?: ("created_at" | "name" | "project" | "project.name" | "projects" | "projects.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /** @description The section to create. */
        requestBody?: {
            content: {
                "application/json": {
                    data?: components["schemas"]["SectionRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the specified section. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SectionResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addTaskForSection: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The globally unique identifier for the section.
                 * @example 321654
                 */
                section_gid: components["parameters"]["section_path_gid"];
            };
            cookie?: never;
        };
        /** @description The task and optionally the insert location. */
        requestBody?: {
            content: {
                "application/json": {
                    data?: components["schemas"]["SectionTaskInsertRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully added the task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    insertSectionForProject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        /** @description The section's move action. */
        requestBody?: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ProjectSectionInsertRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully moved the specified section. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getStatus: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "author",
                 *       "author.name",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_text",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "modified_at",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "parent",
                 *       "parent.name",
                 *       "resource_subtype",
                 *       "status_type",
                 *       "text",
                 *       "title"
                 *     ]
                 */
                opt_fields?: ("author" | "author.name" | "created_at" | "created_by" | "created_by.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_text" | "liked" | "likes" | "likes.user" | "likes.user.name" | "modified_at" | "num_hearts" | "num_likes" | "parent" | "parent.name" | "resource_subtype" | "status_type" | "text" | "title")[];
            };
            header?: never;
            path: {
                /**
                 * @description The status update to get.
                 * @example 321654
                 */
                status_update_gid: components["parameters"]["status_update_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified object's status updates. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["StatusUpdateResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteStatus: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The status update to get.
                 * @example 321654
                 */
                status_update_gid: components["parameters"]["status_update_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified status. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getStatusesForObject: {
        parameters: {
            query: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description Globally unique identifier for object to fetch statuses from. Must be a GID for a project, portfolio, or goal.
                 * @example 159874
                 */
                parent: string;
                /**
                 * @description Only return statuses that have been created since the given time.
                 * @example 2012-02-22T02:06:58.158Z
                 */
                created_since?: string;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "author",
                 *       "author.name",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_text",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "modified_at",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "offset",
                 *       "parent",
                 *       "parent.name",
                 *       "path",
                 *       "resource_subtype",
                 *       "status_type",
                 *       "text",
                 *       "title",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("author" | "author.name" | "created_at" | "created_by" | "created_by.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_text" | "liked" | "likes" | "likes.user" | "likes.user.name" | "modified_at" | "num_hearts" | "num_likes" | "offset" | "parent" | "parent.name" | "path" | "resource_subtype" | "status_type" | "text" | "title" | "uri")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified object's status updates. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["StatusUpdateCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createStatusForObject: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "author",
                 *       "author.name",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_text",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "modified_at",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "parent",
                 *       "parent.name",
                 *       "resource_subtype",
                 *       "status_type",
                 *       "text",
                 *       "title"
                 *     ]
                 */
                opt_fields?: ("author" | "author.name" | "created_at" | "created_by" | "created_by.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_text" | "liked" | "likes" | "likes.user" | "likes.user.name" | "modified_at" | "num_hearts" | "num_likes" | "parent" | "parent.name" | "resource_subtype" | "status_type" | "text" | "title")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The status update to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["StatusUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created a new status update. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["StatusUpdateResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getStory: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "assignee",
                 *       "assignee.name",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "custom_field",
                 *       "custom_field.date_value",
                 *       "custom_field.date_value.date",
                 *       "custom_field.date_value.date_time",
                 *       "custom_field.display_value",
                 *       "custom_field.enabled",
                 *       "custom_field.enum_options",
                 *       "custom_field.enum_options.color",
                 *       "custom_field.enum_options.enabled",
                 *       "custom_field.enum_options.name",
                 *       "custom_field.enum_value",
                 *       "custom_field.enum_value.color",
                 *       "custom_field.enum_value.enabled",
                 *       "custom_field.enum_value.name",
                 *       "custom_field.id_prefix",
                 *       "custom_field.is_formula_field",
                 *       "custom_field.multi_enum_values",
                 *       "custom_field.multi_enum_values.color",
                 *       "custom_field.multi_enum_values.enabled",
                 *       "custom_field.multi_enum_values.name",
                 *       "custom_field.name",
                 *       "custom_field.number_value",
                 *       "custom_field.representation_type",
                 *       "custom_field.text_value",
                 *       "custom_field.type",
                 *       "dependency",
                 *       "dependency.created_by",
                 *       "dependency.name",
                 *       "dependency.resource_subtype",
                 *       "duplicate_of",
                 *       "duplicate_of.created_by",
                 *       "duplicate_of.name",
                 *       "duplicate_of.resource_subtype",
                 *       "duplicated_from",
                 *       "duplicated_from.created_by",
                 *       "duplicated_from.name",
                 *       "duplicated_from.resource_subtype",
                 *       "follower",
                 *       "follower.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_text",
                 *       "is_editable",
                 *       "is_edited",
                 *       "is_pinned",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "new_approval_status",
                 *       "new_date_value",
                 *       "new_dates",
                 *       "new_dates.due_at",
                 *       "new_dates.due_on",
                 *       "new_dates.start_on",
                 *       "new_enum_value",
                 *       "new_enum_value.color",
                 *       "new_enum_value.enabled",
                 *       "new_enum_value.name",
                 *       "new_multi_enum_values",
                 *       "new_multi_enum_values.color",
                 *       "new_multi_enum_values.enabled",
                 *       "new_multi_enum_values.name",
                 *       "new_name",
                 *       "new_number_value",
                 *       "new_people_value",
                 *       "new_people_value.name",
                 *       "new_resource_subtype",
                 *       "new_section",
                 *       "new_section.name",
                 *       "new_text_value",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "old_approval_status",
                 *       "old_date_value",
                 *       "old_dates",
                 *       "old_dates.due_at",
                 *       "old_dates.due_on",
                 *       "old_dates.start_on",
                 *       "old_enum_value",
                 *       "old_enum_value.color",
                 *       "old_enum_value.enabled",
                 *       "old_enum_value.name",
                 *       "old_multi_enum_values",
                 *       "old_multi_enum_values.color",
                 *       "old_multi_enum_values.enabled",
                 *       "old_multi_enum_values.name",
                 *       "old_name",
                 *       "old_number_value",
                 *       "old_people_value",
                 *       "old_people_value.name",
                 *       "old_resource_subtype",
                 *       "old_section",
                 *       "old_section.name",
                 *       "old_text_value",
                 *       "previews",
                 *       "previews.fallback",
                 *       "previews.footer",
                 *       "previews.header",
                 *       "previews.header_link",
                 *       "previews.html_text",
                 *       "previews.text",
                 *       "previews.title",
                 *       "previews.title_link",
                 *       "project",
                 *       "project.name",
                 *       "resource_subtype",
                 *       "source",
                 *       "sticker_name",
                 *       "story",
                 *       "story.created_at",
                 *       "story.created_by",
                 *       "story.created_by.name",
                 *       "story.resource_subtype",
                 *       "story.text",
                 *       "tag",
                 *       "tag.name",
                 *       "target",
                 *       "target.created_by",
                 *       "target.name",
                 *       "target.resource_subtype",
                 *       "task",
                 *       "task.created_by",
                 *       "task.name",
                 *       "task.resource_subtype",
                 *       "text",
                 *       "type"
                 *     ]
                 */
                opt_fields?: ("assignee" | "assignee.name" | "created_at" | "created_by" | "created_by.name" | "custom_field" | "custom_field.date_value" | "custom_field.date_value.date" | "custom_field.date_value.date_time" | "custom_field.display_value" | "custom_field.enabled" | "custom_field.enum_options" | "custom_field.enum_options.color" | "custom_field.enum_options.enabled" | "custom_field.enum_options.name" | "custom_field.enum_value" | "custom_field.enum_value.color" | "custom_field.enum_value.enabled" | "custom_field.enum_value.name" | "custom_field.id_prefix" | "custom_field.is_formula_field" | "custom_field.multi_enum_values" | "custom_field.multi_enum_values.color" | "custom_field.multi_enum_values.enabled" | "custom_field.multi_enum_values.name" | "custom_field.name" | "custom_field.number_value" | "custom_field.representation_type" | "custom_field.text_value" | "custom_field.type" | "dependency" | "dependency.created_by" | "dependency.name" | "dependency.resource_subtype" | "duplicate_of" | "duplicate_of.created_by" | "duplicate_of.name" | "duplicate_of.resource_subtype" | "duplicated_from" | "duplicated_from.created_by" | "duplicated_from.name" | "duplicated_from.resource_subtype" | "follower" | "follower.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_text" | "is_editable" | "is_edited" | "is_pinned" | "liked" | "likes" | "likes.user" | "likes.user.name" | "new_approval_status" | "new_date_value" | "new_dates" | "new_dates.due_at" | "new_dates.due_on" | "new_dates.start_on" | "new_enum_value" | "new_enum_value.color" | "new_enum_value.enabled" | "new_enum_value.name" | "new_multi_enum_values" | "new_multi_enum_values.color" | "new_multi_enum_values.enabled" | "new_multi_enum_values.name" | "new_name" | "new_number_value" | "new_people_value" | "new_people_value.name" | "new_resource_subtype" | "new_section" | "new_section.name" | "new_text_value" | "num_hearts" | "num_likes" | "old_approval_status" | "old_date_value" | "old_dates" | "old_dates.due_at" | "old_dates.due_on" | "old_dates.start_on" | "old_enum_value" | "old_enum_value.color" | "old_enum_value.enabled" | "old_enum_value.name" | "old_multi_enum_values" | "old_multi_enum_values.color" | "old_multi_enum_values.enabled" | "old_multi_enum_values.name" | "old_name" | "old_number_value" | "old_people_value" | "old_people_value.name" | "old_resource_subtype" | "old_section" | "old_section.name" | "old_text_value" | "previews" | "previews.fallback" | "previews.footer" | "previews.header" | "previews.header_link" | "previews.html_text" | "previews.text" | "previews.title" | "previews.title_link" | "project" | "project.name" | "resource_subtype" | "source" | "sticker_name" | "story" | "story.created_at" | "story.created_by" | "story.created_by.name" | "story.resource_subtype" | "story.text" | "tag" | "tag.name" | "target" | "target.created_by" | "target.name" | "target.resource_subtype" | "task" | "task.created_by" | "task.name" | "task.resource_subtype" | "text" | "type")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the story.
                 * @example 35678
                 */
                story_gid: components["parameters"]["story_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified story. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["StoryResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateStory: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "assignee",
                 *       "assignee.name",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "custom_field",
                 *       "custom_field.date_value",
                 *       "custom_field.date_value.date",
                 *       "custom_field.date_value.date_time",
                 *       "custom_field.display_value",
                 *       "custom_field.enabled",
                 *       "custom_field.enum_options",
                 *       "custom_field.enum_options.color",
                 *       "custom_field.enum_options.enabled",
                 *       "custom_field.enum_options.name",
                 *       "custom_field.enum_value",
                 *       "custom_field.enum_value.color",
                 *       "custom_field.enum_value.enabled",
                 *       "custom_field.enum_value.name",
                 *       "custom_field.id_prefix",
                 *       "custom_field.is_formula_field",
                 *       "custom_field.multi_enum_values",
                 *       "custom_field.multi_enum_values.color",
                 *       "custom_field.multi_enum_values.enabled",
                 *       "custom_field.multi_enum_values.name",
                 *       "custom_field.name",
                 *       "custom_field.number_value",
                 *       "custom_field.representation_type",
                 *       "custom_field.text_value",
                 *       "custom_field.type",
                 *       "dependency",
                 *       "dependency.created_by",
                 *       "dependency.name",
                 *       "dependency.resource_subtype",
                 *       "duplicate_of",
                 *       "duplicate_of.created_by",
                 *       "duplicate_of.name",
                 *       "duplicate_of.resource_subtype",
                 *       "duplicated_from",
                 *       "duplicated_from.created_by",
                 *       "duplicated_from.name",
                 *       "duplicated_from.resource_subtype",
                 *       "follower",
                 *       "follower.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_text",
                 *       "is_editable",
                 *       "is_edited",
                 *       "is_pinned",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "new_approval_status",
                 *       "new_date_value",
                 *       "new_dates",
                 *       "new_dates.due_at",
                 *       "new_dates.due_on",
                 *       "new_dates.start_on",
                 *       "new_enum_value",
                 *       "new_enum_value.color",
                 *       "new_enum_value.enabled",
                 *       "new_enum_value.name",
                 *       "new_multi_enum_values",
                 *       "new_multi_enum_values.color",
                 *       "new_multi_enum_values.enabled",
                 *       "new_multi_enum_values.name",
                 *       "new_name",
                 *       "new_number_value",
                 *       "new_people_value",
                 *       "new_people_value.name",
                 *       "new_resource_subtype",
                 *       "new_section",
                 *       "new_section.name",
                 *       "new_text_value",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "old_approval_status",
                 *       "old_date_value",
                 *       "old_dates",
                 *       "old_dates.due_at",
                 *       "old_dates.due_on",
                 *       "old_dates.start_on",
                 *       "old_enum_value",
                 *       "old_enum_value.color",
                 *       "old_enum_value.enabled",
                 *       "old_enum_value.name",
                 *       "old_multi_enum_values",
                 *       "old_multi_enum_values.color",
                 *       "old_multi_enum_values.enabled",
                 *       "old_multi_enum_values.name",
                 *       "old_name",
                 *       "old_number_value",
                 *       "old_people_value",
                 *       "old_people_value.name",
                 *       "old_resource_subtype",
                 *       "old_section",
                 *       "old_section.name",
                 *       "old_text_value",
                 *       "previews",
                 *       "previews.fallback",
                 *       "previews.footer",
                 *       "previews.header",
                 *       "previews.header_link",
                 *       "previews.html_text",
                 *       "previews.text",
                 *       "previews.title",
                 *       "previews.title_link",
                 *       "project",
                 *       "project.name",
                 *       "resource_subtype",
                 *       "source",
                 *       "sticker_name",
                 *       "story",
                 *       "story.created_at",
                 *       "story.created_by",
                 *       "story.created_by.name",
                 *       "story.resource_subtype",
                 *       "story.text",
                 *       "tag",
                 *       "tag.name",
                 *       "target",
                 *       "target.created_by",
                 *       "target.name",
                 *       "target.resource_subtype",
                 *       "task",
                 *       "task.created_by",
                 *       "task.name",
                 *       "task.resource_subtype",
                 *       "text",
                 *       "type"
                 *     ]
                 */
                opt_fields?: ("assignee" | "assignee.name" | "created_at" | "created_by" | "created_by.name" | "custom_field" | "custom_field.date_value" | "custom_field.date_value.date" | "custom_field.date_value.date_time" | "custom_field.display_value" | "custom_field.enabled" | "custom_field.enum_options" | "custom_field.enum_options.color" | "custom_field.enum_options.enabled" | "custom_field.enum_options.name" | "custom_field.enum_value" | "custom_field.enum_value.color" | "custom_field.enum_value.enabled" | "custom_field.enum_value.name" | "custom_field.id_prefix" | "custom_field.is_formula_field" | "custom_field.multi_enum_values" | "custom_field.multi_enum_values.color" | "custom_field.multi_enum_values.enabled" | "custom_field.multi_enum_values.name" | "custom_field.name" | "custom_field.number_value" | "custom_field.representation_type" | "custom_field.text_value" | "custom_field.type" | "dependency" | "dependency.created_by" | "dependency.name" | "dependency.resource_subtype" | "duplicate_of" | "duplicate_of.created_by" | "duplicate_of.name" | "duplicate_of.resource_subtype" | "duplicated_from" | "duplicated_from.created_by" | "duplicated_from.name" | "duplicated_from.resource_subtype" | "follower" | "follower.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_text" | "is_editable" | "is_edited" | "is_pinned" | "liked" | "likes" | "likes.user" | "likes.user.name" | "new_approval_status" | "new_date_value" | "new_dates" | "new_dates.due_at" | "new_dates.due_on" | "new_dates.start_on" | "new_enum_value" | "new_enum_value.color" | "new_enum_value.enabled" | "new_enum_value.name" | "new_multi_enum_values" | "new_multi_enum_values.color" | "new_multi_enum_values.enabled" | "new_multi_enum_values.name" | "new_name" | "new_number_value" | "new_people_value" | "new_people_value.name" | "new_resource_subtype" | "new_section" | "new_section.name" | "new_text_value" | "num_hearts" | "num_likes" | "old_approval_status" | "old_date_value" | "old_dates" | "old_dates.due_at" | "old_dates.due_on" | "old_dates.start_on" | "old_enum_value" | "old_enum_value.color" | "old_enum_value.enabled" | "old_enum_value.name" | "old_multi_enum_values" | "old_multi_enum_values.color" | "old_multi_enum_values.enabled" | "old_multi_enum_values.name" | "old_name" | "old_number_value" | "old_people_value" | "old_people_value.name" | "old_resource_subtype" | "old_section" | "old_section.name" | "old_text_value" | "previews" | "previews.fallback" | "previews.footer" | "previews.header" | "previews.header_link" | "previews.html_text" | "previews.text" | "previews.title" | "previews.title_link" | "project" | "project.name" | "resource_subtype" | "source" | "sticker_name" | "story" | "story.created_at" | "story.created_by" | "story.created_by.name" | "story.resource_subtype" | "story.text" | "tag" | "tag.name" | "target" | "target.created_by" | "target.name" | "target.resource_subtype" | "task" | "task.created_by" | "task.name" | "task.resource_subtype" | "text" | "type")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the story.
                 * @example 35678
                 */
                story_gid: components["parameters"]["story_path_gid"];
            };
            cookie?: never;
        };
        /** @description The comment story to update. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["StoryRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully retrieved the specified story. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["StoryResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteStory: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the story.
                 * @example 35678
                 */
                story_gid: components["parameters"]["story_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified story. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getStoriesForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "assignee",
                 *       "assignee.name",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "custom_field",
                 *       "custom_field.date_value",
                 *       "custom_field.date_value.date",
                 *       "custom_field.date_value.date_time",
                 *       "custom_field.display_value",
                 *       "custom_field.enabled",
                 *       "custom_field.enum_options",
                 *       "custom_field.enum_options.color",
                 *       "custom_field.enum_options.enabled",
                 *       "custom_field.enum_options.name",
                 *       "custom_field.enum_value",
                 *       "custom_field.enum_value.color",
                 *       "custom_field.enum_value.enabled",
                 *       "custom_field.enum_value.name",
                 *       "custom_field.id_prefix",
                 *       "custom_field.is_formula_field",
                 *       "custom_field.multi_enum_values",
                 *       "custom_field.multi_enum_values.color",
                 *       "custom_field.multi_enum_values.enabled",
                 *       "custom_field.multi_enum_values.name",
                 *       "custom_field.name",
                 *       "custom_field.number_value",
                 *       "custom_field.representation_type",
                 *       "custom_field.text_value",
                 *       "custom_field.type",
                 *       "dependency",
                 *       "dependency.created_by",
                 *       "dependency.name",
                 *       "dependency.resource_subtype",
                 *       "duplicate_of",
                 *       "duplicate_of.created_by",
                 *       "duplicate_of.name",
                 *       "duplicate_of.resource_subtype",
                 *       "duplicated_from",
                 *       "duplicated_from.created_by",
                 *       "duplicated_from.name",
                 *       "duplicated_from.resource_subtype",
                 *       "follower",
                 *       "follower.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_text",
                 *       "is_editable",
                 *       "is_edited",
                 *       "is_pinned",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "new_approval_status",
                 *       "new_date_value",
                 *       "new_dates",
                 *       "new_dates.due_at",
                 *       "new_dates.due_on",
                 *       "new_dates.start_on",
                 *       "new_enum_value",
                 *       "new_enum_value.color",
                 *       "new_enum_value.enabled",
                 *       "new_enum_value.name",
                 *       "new_multi_enum_values",
                 *       "new_multi_enum_values.color",
                 *       "new_multi_enum_values.enabled",
                 *       "new_multi_enum_values.name",
                 *       "new_name",
                 *       "new_number_value",
                 *       "new_people_value",
                 *       "new_people_value.name",
                 *       "new_resource_subtype",
                 *       "new_section",
                 *       "new_section.name",
                 *       "new_text_value",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "offset",
                 *       "old_approval_status",
                 *       "old_date_value",
                 *       "old_dates",
                 *       "old_dates.due_at",
                 *       "old_dates.due_on",
                 *       "old_dates.start_on",
                 *       "old_enum_value",
                 *       "old_enum_value.color",
                 *       "old_enum_value.enabled",
                 *       "old_enum_value.name",
                 *       "old_multi_enum_values",
                 *       "old_multi_enum_values.color",
                 *       "old_multi_enum_values.enabled",
                 *       "old_multi_enum_values.name",
                 *       "old_name",
                 *       "old_number_value",
                 *       "old_people_value",
                 *       "old_people_value.name",
                 *       "old_resource_subtype",
                 *       "old_section",
                 *       "old_section.name",
                 *       "old_text_value",
                 *       "path",
                 *       "previews",
                 *       "previews.fallback",
                 *       "previews.footer",
                 *       "previews.header",
                 *       "previews.header_link",
                 *       "previews.html_text",
                 *       "previews.text",
                 *       "previews.title",
                 *       "previews.title_link",
                 *       "project",
                 *       "project.name",
                 *       "resource_subtype",
                 *       "source",
                 *       "sticker_name",
                 *       "story",
                 *       "story.created_at",
                 *       "story.created_by",
                 *       "story.created_by.name",
                 *       "story.resource_subtype",
                 *       "story.text",
                 *       "tag",
                 *       "tag.name",
                 *       "target",
                 *       "target.created_by",
                 *       "target.name",
                 *       "target.resource_subtype",
                 *       "task",
                 *       "task.created_by",
                 *       "task.name",
                 *       "task.resource_subtype",
                 *       "text",
                 *       "type",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("assignee" | "assignee.name" | "created_at" | "created_by" | "created_by.name" | "custom_field" | "custom_field.date_value" | "custom_field.date_value.date" | "custom_field.date_value.date_time" | "custom_field.display_value" | "custom_field.enabled" | "custom_field.enum_options" | "custom_field.enum_options.color" | "custom_field.enum_options.enabled" | "custom_field.enum_options.name" | "custom_field.enum_value" | "custom_field.enum_value.color" | "custom_field.enum_value.enabled" | "custom_field.enum_value.name" | "custom_field.id_prefix" | "custom_field.is_formula_field" | "custom_field.multi_enum_values" | "custom_field.multi_enum_values.color" | "custom_field.multi_enum_values.enabled" | "custom_field.multi_enum_values.name" | "custom_field.name" | "custom_field.number_value" | "custom_field.representation_type" | "custom_field.text_value" | "custom_field.type" | "dependency" | "dependency.created_by" | "dependency.name" | "dependency.resource_subtype" | "duplicate_of" | "duplicate_of.created_by" | "duplicate_of.name" | "duplicate_of.resource_subtype" | "duplicated_from" | "duplicated_from.created_by" | "duplicated_from.name" | "duplicated_from.resource_subtype" | "follower" | "follower.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_text" | "is_editable" | "is_edited" | "is_pinned" | "liked" | "likes" | "likes.user" | "likes.user.name" | "new_approval_status" | "new_date_value" | "new_dates" | "new_dates.due_at" | "new_dates.due_on" | "new_dates.start_on" | "new_enum_value" | "new_enum_value.color" | "new_enum_value.enabled" | "new_enum_value.name" | "new_multi_enum_values" | "new_multi_enum_values.color" | "new_multi_enum_values.enabled" | "new_multi_enum_values.name" | "new_name" | "new_number_value" | "new_people_value" | "new_people_value.name" | "new_resource_subtype" | "new_section" | "new_section.name" | "new_text_value" | "num_hearts" | "num_likes" | "offset" | "old_approval_status" | "old_date_value" | "old_dates" | "old_dates.due_at" | "old_dates.due_on" | "old_dates.start_on" | "old_enum_value" | "old_enum_value.color" | "old_enum_value.enabled" | "old_enum_value.name" | "old_multi_enum_values" | "old_multi_enum_values.color" | "old_multi_enum_values.enabled" | "old_multi_enum_values.name" | "old_name" | "old_number_value" | "old_people_value" | "old_people_value.name" | "old_resource_subtype" | "old_section" | "old_section.name" | "old_text_value" | "path" | "previews" | "previews.fallback" | "previews.footer" | "previews.header" | "previews.header_link" | "previews.html_text" | "previews.text" | "previews.title" | "previews.title_link" | "project" | "project.name" | "resource_subtype" | "source" | "sticker_name" | "story" | "story.created_at" | "story.created_by" | "story.created_by.name" | "story.resource_subtype" | "story.text" | "tag" | "tag.name" | "target" | "target.created_by" | "target.name" | "target.resource_subtype" | "task" | "task.created_by" | "task.name" | "task.resource_subtype" | "text" | "type" | "uri")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified task's stories. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["StoryCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createStoryForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "assignee",
                 *       "assignee.name",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "custom_field",
                 *       "custom_field.date_value",
                 *       "custom_field.date_value.date",
                 *       "custom_field.date_value.date_time",
                 *       "custom_field.display_value",
                 *       "custom_field.enabled",
                 *       "custom_field.enum_options",
                 *       "custom_field.enum_options.color",
                 *       "custom_field.enum_options.enabled",
                 *       "custom_field.enum_options.name",
                 *       "custom_field.enum_value",
                 *       "custom_field.enum_value.color",
                 *       "custom_field.enum_value.enabled",
                 *       "custom_field.enum_value.name",
                 *       "custom_field.id_prefix",
                 *       "custom_field.is_formula_field",
                 *       "custom_field.multi_enum_values",
                 *       "custom_field.multi_enum_values.color",
                 *       "custom_field.multi_enum_values.enabled",
                 *       "custom_field.multi_enum_values.name",
                 *       "custom_field.name",
                 *       "custom_field.number_value",
                 *       "custom_field.representation_type",
                 *       "custom_field.text_value",
                 *       "custom_field.type",
                 *       "dependency",
                 *       "dependency.created_by",
                 *       "dependency.name",
                 *       "dependency.resource_subtype",
                 *       "duplicate_of",
                 *       "duplicate_of.created_by",
                 *       "duplicate_of.name",
                 *       "duplicate_of.resource_subtype",
                 *       "duplicated_from",
                 *       "duplicated_from.created_by",
                 *       "duplicated_from.name",
                 *       "duplicated_from.resource_subtype",
                 *       "follower",
                 *       "follower.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_text",
                 *       "is_editable",
                 *       "is_edited",
                 *       "is_pinned",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "new_approval_status",
                 *       "new_date_value",
                 *       "new_dates",
                 *       "new_dates.due_at",
                 *       "new_dates.due_on",
                 *       "new_dates.start_on",
                 *       "new_enum_value",
                 *       "new_enum_value.color",
                 *       "new_enum_value.enabled",
                 *       "new_enum_value.name",
                 *       "new_multi_enum_values",
                 *       "new_multi_enum_values.color",
                 *       "new_multi_enum_values.enabled",
                 *       "new_multi_enum_values.name",
                 *       "new_name",
                 *       "new_number_value",
                 *       "new_people_value",
                 *       "new_people_value.name",
                 *       "new_resource_subtype",
                 *       "new_section",
                 *       "new_section.name",
                 *       "new_text_value",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "old_approval_status",
                 *       "old_date_value",
                 *       "old_dates",
                 *       "old_dates.due_at",
                 *       "old_dates.due_on",
                 *       "old_dates.start_on",
                 *       "old_enum_value",
                 *       "old_enum_value.color",
                 *       "old_enum_value.enabled",
                 *       "old_enum_value.name",
                 *       "old_multi_enum_values",
                 *       "old_multi_enum_values.color",
                 *       "old_multi_enum_values.enabled",
                 *       "old_multi_enum_values.name",
                 *       "old_name",
                 *       "old_number_value",
                 *       "old_people_value",
                 *       "old_people_value.name",
                 *       "old_resource_subtype",
                 *       "old_section",
                 *       "old_section.name",
                 *       "old_text_value",
                 *       "previews",
                 *       "previews.fallback",
                 *       "previews.footer",
                 *       "previews.header",
                 *       "previews.header_link",
                 *       "previews.html_text",
                 *       "previews.text",
                 *       "previews.title",
                 *       "previews.title_link",
                 *       "project",
                 *       "project.name",
                 *       "resource_subtype",
                 *       "source",
                 *       "sticker_name",
                 *       "story",
                 *       "story.created_at",
                 *       "story.created_by",
                 *       "story.created_by.name",
                 *       "story.resource_subtype",
                 *       "story.text",
                 *       "tag",
                 *       "tag.name",
                 *       "target",
                 *       "target.created_by",
                 *       "target.name",
                 *       "target.resource_subtype",
                 *       "task",
                 *       "task.created_by",
                 *       "task.name",
                 *       "task.resource_subtype",
                 *       "text",
                 *       "type"
                 *     ]
                 */
                opt_fields?: ("assignee" | "assignee.name" | "created_at" | "created_by" | "created_by.name" | "custom_field" | "custom_field.date_value" | "custom_field.date_value.date" | "custom_field.date_value.date_time" | "custom_field.display_value" | "custom_field.enabled" | "custom_field.enum_options" | "custom_field.enum_options.color" | "custom_field.enum_options.enabled" | "custom_field.enum_options.name" | "custom_field.enum_value" | "custom_field.enum_value.color" | "custom_field.enum_value.enabled" | "custom_field.enum_value.name" | "custom_field.id_prefix" | "custom_field.is_formula_field" | "custom_field.multi_enum_values" | "custom_field.multi_enum_values.color" | "custom_field.multi_enum_values.enabled" | "custom_field.multi_enum_values.name" | "custom_field.name" | "custom_field.number_value" | "custom_field.representation_type" | "custom_field.text_value" | "custom_field.type" | "dependency" | "dependency.created_by" | "dependency.name" | "dependency.resource_subtype" | "duplicate_of" | "duplicate_of.created_by" | "duplicate_of.name" | "duplicate_of.resource_subtype" | "duplicated_from" | "duplicated_from.created_by" | "duplicated_from.name" | "duplicated_from.resource_subtype" | "follower" | "follower.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_text" | "is_editable" | "is_edited" | "is_pinned" | "liked" | "likes" | "likes.user" | "likes.user.name" | "new_approval_status" | "new_date_value" | "new_dates" | "new_dates.due_at" | "new_dates.due_on" | "new_dates.start_on" | "new_enum_value" | "new_enum_value.color" | "new_enum_value.enabled" | "new_enum_value.name" | "new_multi_enum_values" | "new_multi_enum_values.color" | "new_multi_enum_values.enabled" | "new_multi_enum_values.name" | "new_name" | "new_number_value" | "new_people_value" | "new_people_value.name" | "new_resource_subtype" | "new_section" | "new_section.name" | "new_text_value" | "num_hearts" | "num_likes" | "old_approval_status" | "old_date_value" | "old_dates" | "old_dates.due_at" | "old_dates.due_on" | "old_dates.start_on" | "old_enum_value" | "old_enum_value.color" | "old_enum_value.enabled" | "old_enum_value.name" | "old_multi_enum_values" | "old_multi_enum_values.color" | "old_multi_enum_values.enabled" | "old_multi_enum_values.name" | "old_name" | "old_number_value" | "old_people_value" | "old_people_value.name" | "old_resource_subtype" | "old_section" | "old_section.name" | "old_text_value" | "previews" | "previews.fallback" | "previews.footer" | "previews.header" | "previews.header_link" | "previews.html_text" | "previews.text" | "previews.title" | "previews.title_link" | "project" | "project.name" | "resource_subtype" | "source" | "sticker_name" | "story" | "story.created_at" | "story.created_by" | "story.created_by.name" | "story.resource_subtype" | "story.text" | "tag" | "tag.name" | "target" | "target.created_by" | "target.name" | "target.resource_subtype" | "task" | "task.created_by" | "task.name" | "task.resource_subtype" | "text" | "type")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description The story to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["StoryRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created a new story. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["StoryResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTags: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description The workspace to filter tags on.
                 * @example 1331
                 */
                workspace?: string;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "color",
                 *       "created_at",
                 *       "followers",
                 *       "followers.name",
                 *       "name",
                 *       "notes",
                 *       "offset",
                 *       "path",
                 *       "permalink_url",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("color" | "created_at" | "followers" | "followers.name" | "name" | "notes" | "offset" | "path" | "permalink_url" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified set of tags. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TagCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createTag: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "color",
                 *       "created_at",
                 *       "followers",
                 *       "followers.name",
                 *       "name",
                 *       "notes",
                 *       "permalink_url",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("color" | "created_at" | "followers" | "followers.name" | "name" | "notes" | "permalink_url" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The tag to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TagCreateRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the newly specified tag. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TagResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTag: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "color",
                 *       "created_at",
                 *       "followers",
                 *       "followers.name",
                 *       "name",
                 *       "notes",
                 *       "permalink_url",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("color" | "created_at" | "followers" | "followers.name" | "name" | "notes" | "permalink_url" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the tag.
                 * @example 11235
                 */
                tag_gid: components["parameters"]["tag_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified tag. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TagResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateTag: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "color",
                 *       "created_at",
                 *       "followers",
                 *       "followers.name",
                 *       "name",
                 *       "notes",
                 *       "permalink_url",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("color" | "created_at" | "followers" | "followers.name" | "name" | "notes" | "permalink_url" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the tag.
                 * @example 11235
                 */
                tag_gid: components["parameters"]["tag_path_gid"];
            };
            cookie?: never;
        };
        /** @description The tag to update. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TagUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the specified tag. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TagResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteTag: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the tag.
                 * @example 11235
                 */
                tag_gid: components["parameters"]["tag_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified tag. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTagsForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "color",
                 *       "created_at",
                 *       "followers",
                 *       "followers.name",
                 *       "name",
                 *       "notes",
                 *       "offset",
                 *       "path",
                 *       "permalink_url",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("color" | "created_at" | "followers" | "followers.name" | "name" | "notes" | "offset" | "path" | "permalink_url" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the tags for the given task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TagCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTagsForWorkspace: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "color",
                 *       "created_at",
                 *       "followers",
                 *       "followers.name",
                 *       "name",
                 *       "notes",
                 *       "offset",
                 *       "path",
                 *       "permalink_url",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("color" | "created_at" | "followers" | "followers.name" | "name" | "notes" | "offset" | "path" | "permalink_url" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified set of tags. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TagCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createTagForWorkspace: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "color",
                 *       "created_at",
                 *       "followers",
                 *       "followers.name",
                 *       "name",
                 *       "notes",
                 *       "permalink_url",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("color" | "created_at" | "followers" | "followers.name" | "name" | "notes" | "permalink_url" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /** @description The tag to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TagCreateTagForWorkspaceRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the newly specified tag. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TagResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTaskTemplates: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description The project to filter task templates on.
                 * @example 321654
                 */
                project?: string;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "created_at",
                 *       "created_by",
                 *       "name",
                 *       "project",
                 *       "template"
                 *     ]
                 */
                opt_fields?: ("created_at" | "created_by" | "name" | "project" | "template")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved requested task templates */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskTemplateCompact"][];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTaskTemplate: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "created_at",
                 *       "created_by",
                 *       "name",
                 *       "project",
                 *       "template"
                 *     ]
                 */
                opt_fields?: ("created_at" | "created_by" | "name" | "project" | "template")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the task template.
                 * @example 1331
                 */
                task_template_gid: components["parameters"]["task_template_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved requested task template */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskTemplateResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteTaskTemplate: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the task template.
                 * @example 1331
                 */
                task_template_gid: components["parameters"]["task_template_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified task template. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    instantiateTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "new_project",
                 *       "new_project.name",
                 *       "new_project_template",
                 *       "new_project_template.name",
                 *       "new_task",
                 *       "new_task.created_by",
                 *       "new_task.name",
                 *       "new_task.resource_subtype",
                 *       "new_task_template",
                 *       "new_task_template.name",
                 *       "resource_subtype",
                 *       "status"
                 *     ]
                 */
                opt_fields?: ("new_project" | "new_project.name" | "new_project_template" | "new_project_template.name" | "new_task" | "new_task.created_by" | "new_task.name" | "new_task.resource_subtype" | "new_task_template" | "new_task_template.name" | "resource_subtype" | "status")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the task template.
                 * @example 1331
                 */
                task_template_gid: components["parameters"]["task_template_path_gid"];
            };
            cookie?: never;
        };
        /** @description Describes the inputs used for instantiating a task - the task's name. */
        requestBody?: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TaskTemplateInstantiateTaskRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the job to handle task instantiation. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["JobResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTasks: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description The assignee to filter tasks on. If searching for unassigned tasks, assignee.any = null can be specified.
                 *     *Note: If you specify `assignee`, you must also specify the `workspace` to filter on.*
                 * @example 14641
                 */
                assignee?: string;
                /**
                 * @description The project to filter tasks on.
                 * @example 321654
                 */
                project?: string;
                /**
                 * @description The section to filter tasks on.
                 * @example 321654
                 */
                section?: string;
                /**
                 * @description The workspace to filter tasks on.
                 *     *Note: If you specify `workspace`, you must also specify the `assignee` to filter on.*
                 * @example 321654
                 */
                workspace?: string;
                /** @description Only return tasks that are either incomplete or that have been completed since this time. */
                completed_since?: string;
                /**
                 * @description Only return tasks that have been modified since the given time.
                 *
                 *     *Note: A task is considered “modified” if any of its properties
                 *     change, or associations between it and other objects are modified
                 *     (e.g.  a task being added to a project). A task is not considered
                 *     modified just because another object it is associated with (e.g. a
                 *     subtask) is modified. Actions that count as modifying the task
                 *     include assigning, renaming, completing, and adding stories.*
                 * @example 2012-02-22T02:06:58.158Z
                 */
                modified_since?: string;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "offset",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "path",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "offset" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "path" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved requested tasks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The task to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TaskRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created a new task. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description The task to update. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TaskRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the specified task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    duplicateTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "new_project",
                 *       "new_project.name",
                 *       "new_project_template",
                 *       "new_project_template.name",
                 *       "new_task",
                 *       "new_task.created_by",
                 *       "new_task.name",
                 *       "new_task.resource_subtype",
                 *       "new_task_template",
                 *       "new_task_template.name",
                 *       "resource_subtype",
                 *       "status"
                 *     ]
                 */
                opt_fields?: ("new_project" | "new_project.name" | "new_project_template" | "new_project_template.name" | "new_task" | "new_task.created_by" | "new_task.name" | "new_task.resource_subtype" | "new_task_template" | "new_task_template.name" | "resource_subtype" | "status")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description Describes the duplicate's name and the fields that will be duplicated. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TaskDuplicateRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the job to handle duplication. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["JobResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTasksForProject: {
        parameters: {
            query?: {
                /**
                 * @description Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.
                 *
                 * @example 2012-02-22T02:06:58.158Z
                 */
                completed_since?: components["parameters"]["completed_since"];
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "offset",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "path",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "offset" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "path" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the project.
                 * @example 1331
                 */
                project_gid: components["parameters"]["project_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested project's tasks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTasksForSection: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.
                 *
                 * @example 2012-02-22T02:06:58.158Z
                 */
                completed_since?: components["parameters"]["completed_since"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "offset",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "path",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "offset" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "path" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description The globally unique identifier for the section.
                 * @example 321654
                 */
                section_gid: components["parameters"]["section_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the section's tasks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTasksForTag: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "offset",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "path",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "offset" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "path" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the tag.
                 * @example 11235
                 */
                tag_gid: components["parameters"]["tag_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the tasks associated with the specified tag. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTasksForUserTaskList: {
        parameters: {
            query?: {
                /**
                 * @description Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.
                 *
                 * @example 2012-02-22T02:06:58.158Z
                 */
                completed_since?: components["parameters"]["completed_since"];
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "offset",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "path",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "offset" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "path" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the user task list.
                 * @example 12345
                 */
                user_task_list_gid: components["parameters"]["user_task_list_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the user task list's tasks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getSubtasksForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "offset",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "path",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "offset" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "path" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified task's subtasks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createSubtaskForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description The new subtask to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TaskRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the specified subtask. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    setParentForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description The new parent of the subtask. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TaskSetParentRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully changed the parent of the specified subtask. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getDependenciesForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "offset",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "path",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "offset" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "path" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified task's dependencies. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addDependenciesForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description The list of tasks to set as dependencies. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ModifyDependenciesRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully set the specified dependencies on the task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeDependenciesForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description The list of tasks to unlink as dependencies. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ModifyDependenciesRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully unlinked the dependencies from the specified task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getDependentsForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "offset",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "path",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "uri",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "offset" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "path" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "uri" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the specified dependents of the task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addDependentsForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description The list of tasks to add as dependents. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ModifyDependentsRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully set the specified dependents on the given task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeDependentsForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description The list of tasks to remove as dependents. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["ModifyDependentsRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully unlinked the specified tasks as dependents. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            402: components["responses"]["PaymentRequired"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addProjectForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description The project to add the task to. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TaskAddProjectRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully added the specified project to the task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeProjectForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description The project to remove the task from. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TaskRemoveProjectRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully removed the specified project from the task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addTagForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description The tag to add to the task. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TaskAddTagRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully added the specified tag to the task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeTagForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description The tag to remove from the task. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TaskRemoveTagRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully removed the specified tag from the task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addFollowersForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description The followers to add to the task. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TaskAddFollowersRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully added the specified followers to the task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeFollowerForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description The followers to remove from the task. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TaskRemoveFollowersRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully removed the specified followers from the task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTaskForCustomID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
                /**
                 * @description Generated custom ID for a task.
                 * @example EX-1
                 */
                custom_id: components["parameters"]["custom_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved task for given custom ID. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    searchTasksForWorkspace: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Performs full-text search on both task name and description
                 * @example Bug
                 */
                text?: string;
                /** @description Filters results by the task's resource_subtype */
                resource_subtype?: "default_task" | "milestone";
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "assignee.any"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "assignee.not"?: string;
                /**
                 * @description Comma-separated list of portfolio IDs
                 * @example 12345,23456,34567
                 */
                "portfolios.any"?: string;
                /**
                 * @description Comma-separated list of project IDs
                 * @example 12345,23456,34567
                 */
                "projects.any"?: string;
                /**
                 * @description Comma-separated list of project IDs
                 * @example 12345,23456,34567
                 */
                "projects.not"?: string;
                /**
                 * @description Comma-separated list of project IDs
                 * @example 12345,23456,34567
                 */
                "projects.all"?: string;
                /**
                 * @description Comma-separated list of section or column IDs
                 * @example 12345,23456,34567
                 */
                "sections.any"?: string;
                /**
                 * @description Comma-separated list of section or column IDs
                 * @example 12345,23456,34567
                 */
                "sections.not"?: string;
                /**
                 * @description Comma-separated list of section or column IDs
                 * @example 12345,23456,34567
                 */
                "sections.all"?: string;
                /**
                 * @description Comma-separated list of tag IDs
                 * @example 12345,23456,34567
                 */
                "tags.any"?: string;
                /**
                 * @description Comma-separated list of tag IDs
                 * @example 12345,23456,34567
                 */
                "tags.not"?: string;
                /**
                 * @description Comma-separated list of tag IDs
                 * @example 12345,23456,34567
                 */
                "tags.all"?: string;
                /**
                 * @description Comma-separated list of team IDs
                 * @example 12345,23456,34567
                 */
                "teams.any"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "followers.any"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "followers.not"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "created_by.any"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "created_by.not"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "assigned_by.any"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "assigned_by.not"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "liked_by.not"?: string;
                /**
                 * @description Comma-separated list of user identifiers
                 * @example 12345,23456,34567
                 */
                "commented_on_by.not"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "due_on.before"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "due_on.after"?: string;
                /**
                 * @description ISO 8601 date string or `null`
                 * @example 2019-09-15
                 */
                due_on?: string | null;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "due_at.before"?: string;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "due_at.after"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "start_on.before"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "start_on.after"?: string;
                /**
                 * @description ISO 8601 date string or `null`
                 * @example 2019-09-15
                 */
                start_on?: string | null;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "created_on.before"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "created_on.after"?: string;
                /**
                 * @description ISO 8601 date string or `null`
                 * @example 2019-09-15
                 */
                created_on?: string | null;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "created_at.before"?: string;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "created_at.after"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "completed_on.before"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "completed_on.after"?: string;
                /**
                 * @description ISO 8601 date string or `null`
                 * @example 2019-09-15
                 */
                completed_on?: string | null;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "completed_at.before"?: string;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "completed_at.after"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "modified_on.before"?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                "modified_on.after"?: string;
                /**
                 * @description ISO 8601 date string or `null`
                 * @example 2019-09-15
                 */
                modified_on?: string | null;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "modified_at.before"?: string;
                /**
                 * @description ISO 8601 datetime string
                 * @example 2019-04-15T01:01:46.055Z
                 */
                "modified_at.after"?: string;
                /**
                 * @description Filter to incomplete tasks with dependents
                 * @example false
                 */
                is_blocking?: boolean;
                /**
                 * @description Filter to tasks with incomplete dependencies
                 * @example false
                 */
                is_blocked?: boolean;
                /**
                 * @description Filter to tasks with attachments
                 * @example false
                 */
                has_attachment?: boolean;
                /**
                 * @description Filter to completed tasks
                 * @example false
                 */
                completed?: boolean;
                /**
                 * @description Filter to subtasks
                 * @example false
                 */
                is_subtask?: boolean;
                /**
                 * @description One of `due_date`, `created_at`, `completed_at`, `likes`, or `modified_at`, defaults to `modified_at`
                 * @example likes
                 */
                sort_by?: "due_date" | "created_at" | "completed_at" | "likes" | "modified_at";
                /**
                 * @description Default `false`
                 * @example true
                 */
                sort_ascending?: boolean;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "actual_time_minutes",
                 *       "approval_status",
                 *       "assignee",
                 *       "assignee.name",
                 *       "assignee_section",
                 *       "assignee_section.name",
                 *       "assignee_status",
                 *       "completed",
                 *       "completed_at",
                 *       "completed_by",
                 *       "completed_by.name",
                 *       "created_at",
                 *       "created_by",
                 *       "custom_fields",
                 *       "custom_fields.asana_created_field",
                 *       "custom_fields.created_by",
                 *       "custom_fields.created_by.name",
                 *       "custom_fields.currency_code",
                 *       "custom_fields.custom_label",
                 *       "custom_fields.custom_label_position",
                 *       "custom_fields.date_value",
                 *       "custom_fields.date_value.date",
                 *       "custom_fields.date_value.date_time",
                 *       "custom_fields.default_access_level",
                 *       "custom_fields.description",
                 *       "custom_fields.display_value",
                 *       "custom_fields.enabled",
                 *       "custom_fields.enum_options",
                 *       "custom_fields.enum_options.color",
                 *       "custom_fields.enum_options.enabled",
                 *       "custom_fields.enum_options.name",
                 *       "custom_fields.enum_value",
                 *       "custom_fields.enum_value.color",
                 *       "custom_fields.enum_value.enabled",
                 *       "custom_fields.enum_value.name",
                 *       "custom_fields.format",
                 *       "custom_fields.has_notifications_enabled",
                 *       "custom_fields.id_prefix",
                 *       "custom_fields.is_formula_field",
                 *       "custom_fields.is_global_to_workspace",
                 *       "custom_fields.is_value_read_only",
                 *       "custom_fields.multi_enum_values",
                 *       "custom_fields.multi_enum_values.color",
                 *       "custom_fields.multi_enum_values.enabled",
                 *       "custom_fields.multi_enum_values.name",
                 *       "custom_fields.name",
                 *       "custom_fields.number_value",
                 *       "custom_fields.people_value",
                 *       "custom_fields.people_value.name",
                 *       "custom_fields.precision",
                 *       "custom_fields.privacy_setting",
                 *       "custom_fields.representation_type",
                 *       "custom_fields.resource_subtype",
                 *       "custom_fields.text_value",
                 *       "custom_fields.type",
                 *       "custom_type",
                 *       "custom_type.name",
                 *       "custom_type_status_option",
                 *       "custom_type_status_option.name",
                 *       "dependencies",
                 *       "dependents",
                 *       "due_at",
                 *       "due_on",
                 *       "external",
                 *       "external.data",
                 *       "followers",
                 *       "followers.name",
                 *       "hearted",
                 *       "hearts",
                 *       "hearts.user",
                 *       "hearts.user.name",
                 *       "html_notes",
                 *       "is_rendered_as_separator",
                 *       "liked",
                 *       "likes",
                 *       "likes.user",
                 *       "likes.user.name",
                 *       "memberships",
                 *       "memberships.project",
                 *       "memberships.project.name",
                 *       "memberships.section",
                 *       "memberships.section.name",
                 *       "modified_at",
                 *       "name",
                 *       "notes",
                 *       "num_hearts",
                 *       "num_likes",
                 *       "num_subtasks",
                 *       "parent",
                 *       "parent.created_by",
                 *       "parent.name",
                 *       "parent.resource_subtype",
                 *       "permalink_url",
                 *       "projects",
                 *       "projects.name",
                 *       "resource_subtype",
                 *       "start_at",
                 *       "start_on",
                 *       "tags",
                 *       "tags.name",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("actual_time_minutes" | "approval_status" | "assignee" | "assignee.name" | "assignee_section" | "assignee_section.name" | "assignee_status" | "completed" | "completed_at" | "completed_by" | "completed_by.name" | "created_at" | "created_by" | "custom_fields" | "custom_fields.asana_created_field" | "custom_fields.created_by" | "custom_fields.created_by.name" | "custom_fields.currency_code" | "custom_fields.custom_label" | "custom_fields.custom_label_position" | "custom_fields.date_value" | "custom_fields.date_value.date" | "custom_fields.date_value.date_time" | "custom_fields.default_access_level" | "custom_fields.description" | "custom_fields.display_value" | "custom_fields.enabled" | "custom_fields.enum_options" | "custom_fields.enum_options.color" | "custom_fields.enum_options.enabled" | "custom_fields.enum_options.name" | "custom_fields.enum_value" | "custom_fields.enum_value.color" | "custom_fields.enum_value.enabled" | "custom_fields.enum_value.name" | "custom_fields.format" | "custom_fields.has_notifications_enabled" | "custom_fields.id_prefix" | "custom_fields.is_formula_field" | "custom_fields.is_global_to_workspace" | "custom_fields.is_value_read_only" | "custom_fields.multi_enum_values" | "custom_fields.multi_enum_values.color" | "custom_fields.multi_enum_values.enabled" | "custom_fields.multi_enum_values.name" | "custom_fields.name" | "custom_fields.number_value" | "custom_fields.people_value" | "custom_fields.people_value.name" | "custom_fields.precision" | "custom_fields.privacy_setting" | "custom_fields.representation_type" | "custom_fields.resource_subtype" | "custom_fields.text_value" | "custom_fields.type" | "custom_type" | "custom_type.name" | "custom_type_status_option" | "custom_type_status_option.name" | "dependencies" | "dependents" | "due_at" | "due_on" | "external" | "external.data" | "followers" | "followers.name" | "hearted" | "hearts" | "hearts.user" | "hearts.user.name" | "html_notes" | "is_rendered_as_separator" | "liked" | "likes" | "likes.user" | "likes.user.name" | "memberships" | "memberships.project" | "memberships.project.name" | "memberships.section" | "memberships.section.name" | "modified_at" | "name" | "notes" | "num_hearts" | "num_likes" | "num_subtasks" | "parent" | "parent.created_by" | "parent.name" | "parent.resource_subtype" | "permalink_url" | "projects" | "projects.name" | "resource_subtype" | "start_at" | "start_on" | "tags" | "tags.name" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the section's tasks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TaskCompact"][];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTeamMembership: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "is_admin",
                 *       "is_guest",
                 *       "is_limited_access",
                 *       "team",
                 *       "team.name",
                 *       "user",
                 *       "user.name"
                 *     ]
                 */
                opt_fields?: ("is_admin" | "is_guest" | "is_limited_access" | "team" | "team.name" | "user" | "user.name")[];
            };
            header?: never;
            path: {
                /** @example 724362 */
                team_membership_gid: components["parameters"]["team_membership_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested team membership. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TeamMembershipResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTeamMemberships: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team?: string;
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user. This parameter must be used with the workspace parameter.
                 * @example 512241
                 */
                user?: string;
                /**
                 * @description Globally unique identifier for the workspace. This parameter must be used with the user parameter.
                 * @example 31326
                 */
                workspace?: string;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "is_admin",
                 *       "is_guest",
                 *       "is_limited_access",
                 *       "offset",
                 *       "path",
                 *       "team",
                 *       "team.name",
                 *       "uri",
                 *       "user",
                 *       "user.name"
                 *     ]
                 */
                opt_fields?: ("is_admin" | "is_guest" | "is_limited_access" | "offset" | "path" | "team" | "team.name" | "uri" | "user" | "user.name")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested team memberships. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TeamMembershipCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTeamMembershipsForTeam: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "is_admin",
                 *       "is_guest",
                 *       "is_limited_access",
                 *       "offset",
                 *       "path",
                 *       "team",
                 *       "team.name",
                 *       "uri",
                 *       "user",
                 *       "user.name"
                 *     ]
                 */
                opt_fields?: ("is_admin" | "is_guest" | "is_limited_access" | "offset" | "path" | "team" | "team.name" | "uri" | "user" | "user.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested team's memberships. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TeamMembershipCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTeamMembershipsForUser: {
        parameters: {
            query: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description Globally unique identifier for the workspace.
                 * @example 31326
                 */
                workspace: string;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "is_admin",
                 *       "is_guest",
                 *       "is_limited_access",
                 *       "offset",
                 *       "path",
                 *       "team",
                 *       "team.name",
                 *       "uri",
                 *       "user",
                 *       "user.name"
                 *     ]
                 */
                opt_fields?: ("is_admin" | "is_guest" | "is_limited_access" | "offset" | "path" | "team" | "team.name" | "uri" | "user" | "user.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user_gid: components["parameters"]["user_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested users's memberships. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TeamMembershipCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createTeam: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "description",
                 *       "edit_team_name_or_description_access_level",
                 *       "edit_team_visibility_or_trash_team_access_level",
                 *       "endorsed",
                 *       "guest_invite_management_access_level",
                 *       "html_description",
                 *       "join_request_management_access_level",
                 *       "member_invite_management_access_level",
                 *       "name",
                 *       "organization",
                 *       "organization.name",
                 *       "permalink_url",
                 *       "team_content_management_access_level",
                 *       "team_member_removal_access_level",
                 *       "visibility"
                 *     ]
                 */
                opt_fields?: ("description" | "edit_team_name_or_description_access_level" | "edit_team_visibility_or_trash_team_access_level" | "endorsed" | "guest_invite_management_access_level" | "html_description" | "join_request_management_access_level" | "member_invite_management_access_level" | "name" | "organization" | "organization.name" | "permalink_url" | "team_content_management_access_level" | "team_member_removal_access_level" | "visibility")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The team to create. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TeamRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created a new team. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TeamResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTeam: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "description",
                 *       "edit_team_name_or_description_access_level",
                 *       "edit_team_visibility_or_trash_team_access_level",
                 *       "endorsed",
                 *       "guest_invite_management_access_level",
                 *       "html_description",
                 *       "join_request_management_access_level",
                 *       "member_invite_management_access_level",
                 *       "name",
                 *       "organization",
                 *       "organization.name",
                 *       "permalink_url",
                 *       "team_content_management_access_level",
                 *       "team_member_removal_access_level",
                 *       "visibility"
                 *     ]
                 */
                opt_fields?: ("description" | "edit_team_name_or_description_access_level" | "edit_team_visibility_or_trash_team_access_level" | "endorsed" | "guest_invite_management_access_level" | "html_description" | "join_request_management_access_level" | "member_invite_management_access_level" | "name" | "organization" | "organization.name" | "permalink_url" | "team_content_management_access_level" | "team_member_removal_access_level" | "visibility")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the record for a single team. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TeamResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateTeam: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "description",
                 *       "edit_team_name_or_description_access_level",
                 *       "edit_team_visibility_or_trash_team_access_level",
                 *       "endorsed",
                 *       "guest_invite_management_access_level",
                 *       "html_description",
                 *       "join_request_management_access_level",
                 *       "member_invite_management_access_level",
                 *       "name",
                 *       "organization",
                 *       "organization.name",
                 *       "permalink_url",
                 *       "team_content_management_access_level",
                 *       "team_member_removal_access_level",
                 *       "visibility"
                 *     ]
                 */
                opt_fields?: ("description" | "edit_team_name_or_description_access_level" | "edit_team_visibility_or_trash_team_access_level" | "endorsed" | "guest_invite_management_access_level" | "html_description" | "join_request_management_access_level" | "member_invite_management_access_level" | "name" | "organization" | "organization.name" | "permalink_url" | "team_content_management_access_level" | "team_member_removal_access_level" | "visibility")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        /** @description The team to update. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TeamRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the team. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TeamResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTeamsForWorkspace: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "description",
                 *       "edit_team_name_or_description_access_level",
                 *       "edit_team_visibility_or_trash_team_access_level",
                 *       "endorsed",
                 *       "guest_invite_management_access_level",
                 *       "html_description",
                 *       "join_request_management_access_level",
                 *       "member_invite_management_access_level",
                 *       "name",
                 *       "offset",
                 *       "organization",
                 *       "organization.name",
                 *       "path",
                 *       "permalink_url",
                 *       "team_content_management_access_level",
                 *       "team_member_removal_access_level",
                 *       "uri",
                 *       "visibility"
                 *     ]
                 */
                opt_fields?: ("description" | "edit_team_name_or_description_access_level" | "edit_team_visibility_or_trash_team_access_level" | "endorsed" | "guest_invite_management_access_level" | "html_description" | "join_request_management_access_level" | "member_invite_management_access_level" | "name" | "offset" | "organization" | "organization.name" | "path" | "permalink_url" | "team_content_management_access_level" | "team_member_removal_access_level" | "uri" | "visibility")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the team records for all teams in the organization or workspace accessible to the authenticated user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TeamCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTeamsForUser: {
        parameters: {
            query: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description The workspace or organization to filter teams on.
                 * @example 1331
                 */
                organization: string;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "description",
                 *       "edit_team_name_or_description_access_level",
                 *       "edit_team_visibility_or_trash_team_access_level",
                 *       "endorsed",
                 *       "guest_invite_management_access_level",
                 *       "html_description",
                 *       "join_request_management_access_level",
                 *       "member_invite_management_access_level",
                 *       "name",
                 *       "offset",
                 *       "organization",
                 *       "organization.name",
                 *       "path",
                 *       "permalink_url",
                 *       "team_content_management_access_level",
                 *       "team_member_removal_access_level",
                 *       "uri",
                 *       "visibility"
                 *     ]
                 */
                opt_fields?: ("description" | "edit_team_name_or_description_access_level" | "edit_team_visibility_or_trash_team_access_level" | "endorsed" | "guest_invite_management_access_level" | "html_description" | "join_request_management_access_level" | "member_invite_management_access_level" | "name" | "offset" | "organization" | "organization.name" | "path" | "permalink_url" | "team_content_management_access_level" | "team_member_removal_access_level" | "uri" | "visibility")[];
            };
            header?: never;
            path: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user_gid: components["parameters"]["user_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the team records for all teams in the organization or workspace to which the given user is assigned. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TeamCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addUserForTeam: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "is_admin",
                 *       "is_guest",
                 *       "is_limited_access",
                 *       "team",
                 *       "team.name",
                 *       "user",
                 *       "user.name"
                 *     ]
                 */
                opt_fields?: ("is_admin" | "is_guest" | "is_limited_access" | "team" | "team.name" | "user" | "user.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        /** @description The user to add to the team. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TeamAddUserRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully added user to the team. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TeamMembershipResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeUserForTeam: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        /** @description The user to remove from the team. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["TeamRemoveUserRequest"];
                };
            };
        };
        responses: {
            /** @description Returns an empty data record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTimePeriod: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "display_name",
                 *       "end_on",
                 *       "parent",
                 *       "parent.display_name",
                 *       "parent.end_on",
                 *       "parent.period",
                 *       "parent.start_on",
                 *       "period",
                 *       "start_on"
                 *     ]
                 */
                opt_fields?: ("display_name" | "end_on" | "parent" | "parent.display_name" | "parent.end_on" | "parent.period" | "parent.start_on" | "period" | "start_on")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the time period.
                 * @example 917392
                 */
                time_period_gid: components["parameters"]["time_period_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the record for a single time period. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TimePeriodResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTimePeriods: {
        parameters: {
            query: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                start_on?: string;
                /**
                 * @description ISO 8601 date string
                 * @example 2019-09-15
                 */
                end_on?: string;
                /**
                 * @description Globally unique identifier for the workspace.
                 * @example 31326
                 */
                workspace: string;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "display_name",
                 *       "end_on",
                 *       "offset",
                 *       "parent",
                 *       "parent.display_name",
                 *       "parent.end_on",
                 *       "parent.period",
                 *       "parent.start_on",
                 *       "path",
                 *       "period",
                 *       "start_on",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("display_name" | "end_on" | "offset" | "parent" | "parent.display_name" | "parent.end_on" | "parent.period" | "parent.start_on" | "path" | "period" | "start_on" | "uri")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested time periods. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TimePeriodCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTimeTrackingEntriesForTask: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "attributable_to",
                 *       "attributable_to.name",
                 *       "created_by",
                 *       "created_by.name",
                 *       "duration_minutes",
                 *       "entered_on",
                 *       "offset",
                 *       "path",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("attributable_to" | "attributable_to.name" | "created_by" | "created_by.name" | "duration_minutes" | "entered_on" | "offset" | "path" | "uri")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested time tracking entries. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TimeTrackingEntryCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createTimeTrackingEntry: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "attributable_to",
                 *       "attributable_to.name",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "duration_minutes",
                 *       "entered_on",
                 *       "task",
                 *       "task.created_by",
                 *       "task.name",
                 *       "task.resource_subtype"
                 *     ]
                 */
                opt_fields?: ("attributable_to" | "attributable_to.name" | "created_at" | "created_by" | "created_by.name" | "duration_minutes" | "entered_on" | "task" | "task.created_by" | "task.name" | "task.resource_subtype")[];
            };
            header?: never;
            path: {
                /**
                 * @description The task to operate on.
                 * @example 321654
                 */
                task_gid: components["parameters"]["task_path_gid"];
            };
            cookie?: never;
        };
        /** @description Information about the time tracking entry. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["CreateTimeTrackingEntryRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created a time tracking entry for the task. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TimeTrackingEntryBase"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTimeTrackingEntry: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "attributable_to",
                 *       "attributable_to.name",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "duration_minutes",
                 *       "entered_on",
                 *       "task",
                 *       "task.created_by",
                 *       "task.name",
                 *       "task.resource_subtype"
                 *     ]
                 */
                opt_fields?: ("attributable_to" | "attributable_to.name" | "created_at" | "created_by" | "created_by.name" | "duration_minutes" | "entered_on" | "task" | "task.created_by" | "task.name" | "task.resource_subtype")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the time tracking entry.
                 * @example 917392
                 */
                time_tracking_entry_gid: components["parameters"]["time_tracking_entry_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested time tracking entry. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TimeTrackingEntryBase"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateTimeTrackingEntry: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "attributable_to",
                 *       "attributable_to.name",
                 *       "created_at",
                 *       "created_by",
                 *       "created_by.name",
                 *       "duration_minutes",
                 *       "entered_on",
                 *       "task",
                 *       "task.created_by",
                 *       "task.name",
                 *       "task.resource_subtype"
                 *     ]
                 */
                opt_fields?: ("attributable_to" | "attributable_to.name" | "created_at" | "created_by" | "created_by.name" | "duration_minutes" | "entered_on" | "task" | "task.created_by" | "task.name" | "task.resource_subtype")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the time tracking entry.
                 * @example 917392
                 */
                time_tracking_entry_gid: components["parameters"]["time_tracking_entry_path_gid"];
            };
            cookie?: never;
        };
        /** @description The updated fields for the time tracking entry. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["UpdateTimeTrackingEntryRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the time tracking entry. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TimeTrackingEntryBase"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteTimeTrackingEntry: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the time tracking entry.
                 * @example 917392
                 */
                time_tracking_entry_gid: components["parameters"]["time_tracking_entry_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the specified time tracking entry. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    typeaheadForWorkspace: {
        parameters: {
            query: {
                /** @description The type of values the typeahead should return. You can choose from one of the following: `custom_field`, `goal`, `project`, `project_template`, `portfolio`, `tag`, `task`, `team`, and `user`. Note that unlike in the names of endpoints, the types listed here are in singular form (e.g. `task`). Using multiple types is not yet supported. */
                resource_type: "custom_field" | "goal" | "project" | "project_template" | "portfolio" | "tag" | "task" | "team" | "user";
                /** @description *Deprecated: new integrations should prefer the resource_type field.* */
                type?: "custom_field" | "portfolio" | "project" | "tag" | "task" | "user";
                /**
                 * @description The string that will be used to search for relevant objects. If an empty string is passed in, the API will return results.
                 * @example Greg
                 */
                query?: string;
                /**
                 * @description The number of results to return. The default is 20 if this parameter is omitted, with a minimum of 1 and a maximum of 100. If there are fewer results found than requested, all will be returned.
                 * @example 20
                 */
                count?: number;
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "name"
                 *     ]
                 */
                opt_fields?: "name"[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved objects via a typeahead search algorithm. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AsanaNamedResource"][];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getUserTaskList: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "name",
                 *       "owner",
                 *       "workspace"
                 *     ]
                 */
                opt_fields?: ("name" | "owner" | "workspace")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the user task list.
                 * @example 12345
                 */
                user_task_list_gid: components["parameters"]["user_task_list_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the user task list. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserTaskListResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getUserTaskListForUser: {
        parameters: {
            query: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description The workspace in which to get the user task list.
                 * @example 1234
                 */
                workspace: string;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "name",
                 *       "owner",
                 *       "workspace"
                 *     ]
                 */
                opt_fields?: ("name" | "owner" | "workspace")[];
            };
            header?: never;
            path: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user_gid: components["parameters"]["user_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the user's task list. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserTaskListResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getUsers: {
        parameters: {
            query?: {
                /**
                 * @description The workspace or organization ID to filter users on.
                 * @example 1331
                 */
                workspace?: string;
                /**
                 * @description The team ID to filter users on.
                 * @example 15627
                 */
                team?: string;
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "email",
                 *       "name",
                 *       "offset",
                 *       "path",
                 *       "photo",
                 *       "photo.image_1024x1024",
                 *       "photo.image_128x128",
                 *       "photo.image_21x21",
                 *       "photo.image_27x27",
                 *       "photo.image_36x36",
                 *       "photo.image_60x60",
                 *       "uri",
                 *       "workspaces",
                 *       "workspaces.name"
                 *     ]
                 */
                opt_fields?: ("email" | "name" | "offset" | "path" | "photo" | "photo.image_1024x1024" | "photo.image_128x128" | "photo.image_21x21" | "photo.image_27x27" | "photo.image_36x36" | "photo.image_60x60" | "uri" | "workspaces" | "workspaces.name")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested user records. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getUser: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "email",
                 *       "name",
                 *       "photo",
                 *       "photo.image_1024x1024",
                 *       "photo.image_128x128",
                 *       "photo.image_21x21",
                 *       "photo.image_27x27",
                 *       "photo.image_36x36",
                 *       "photo.image_60x60",
                 *       "workspaces",
                 *       "workspaces.name"
                 *     ]
                 */
                opt_fields?: ("email" | "name" | "photo" | "photo.image_1024x1024" | "photo.image_128x128" | "photo.image_21x21" | "photo.image_27x27" | "photo.image_36x36" | "photo.image_60x60" | "workspaces" | "workspaces.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user_gid: components["parameters"]["user_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the user specified. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getFavoritesForUser: {
        parameters: {
            query: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /** @description The resource type of favorites to be returned. */
                resource_type: "portfolio" | "project" | "tag" | "task" | "user" | "project_template";
                /**
                 * @description The workspace in which to get favorites.
                 * @example 1234
                 */
                workspace: string;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "name",
                 *       "offset",
                 *       "path",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("name" | "offset" | "path" | "uri")[];
            };
            header?: never;
            path: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user_gid: components["parameters"]["user_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the specified user's favorites. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AsanaNamedResource"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getUsersForTeam: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "email",
                 *       "name",
                 *       "photo",
                 *       "photo.image_1024x1024",
                 *       "photo.image_128x128",
                 *       "photo.image_21x21",
                 *       "photo.image_27x27",
                 *       "photo.image_36x36",
                 *       "photo.image_60x60",
                 *       "workspaces",
                 *       "workspaces.name"
                 *     ]
                 */
                opt_fields?: ("email" | "name" | "photo" | "photo.image_1024x1024" | "photo.image_128x128" | "photo.image_21x21" | "photo.image_27x27" | "photo.image_36x36" | "photo.image_60x60" | "workspaces" | "workspaces.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the team.
                 * @example 159874
                 */
                team_gid: components["parameters"]["team_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the user records for all the members of the team, including guests and limited access users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserCompact"][];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getUsersForWorkspace: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "email",
                 *       "name",
                 *       "photo",
                 *       "photo.image_1024x1024",
                 *       "photo.image_128x128",
                 *       "photo.image_21x21",
                 *       "photo.image_27x27",
                 *       "photo.image_36x36",
                 *       "photo.image_60x60",
                 *       "workspaces",
                 *       "workspaces.name"
                 *     ]
                 */
                opt_fields?: ("email" | "name" | "photo" | "photo.image_1024x1024" | "photo.image_128x128" | "photo.image_21x21" | "photo.image_27x27" | "photo.image_36x36" | "photo.image_60x60" | "workspaces" | "workspaces.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return the users in the specified workspace or org. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserCompact"][];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getWebhooks: {
        parameters: {
            query: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description The workspace to query for webhooks in.
                 * @example 1331
                 */
                workspace: string;
                /**
                 * @description Only return webhooks for the given resource.
                 * @example 51648
                 */
                resource?: string;
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "active",
                 *       "created_at",
                 *       "delivery_retry_count",
                 *       "failure_deletion_timestamp",
                 *       "filters",
                 *       "filters.action",
                 *       "filters.fields",
                 *       "filters.resource_subtype",
                 *       "last_failure_at",
                 *       "last_failure_content",
                 *       "last_success_at",
                 *       "next_attempt_after",
                 *       "offset",
                 *       "path",
                 *       "resource",
                 *       "resource.name",
                 *       "target",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("active" | "created_at" | "delivery_retry_count" | "failure_deletion_timestamp" | "filters" | "filters.action" | "filters.fields" | "filters.resource_subtype" | "last_failure_at" | "last_failure_content" | "last_success_at" | "next_attempt_after" | "offset" | "path" | "resource" | "resource.name" | "target" | "uri")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested webhooks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["WebhookResponse"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createWebhook: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "active",
                 *       "created_at",
                 *       "delivery_retry_count",
                 *       "failure_deletion_timestamp",
                 *       "filters",
                 *       "filters.action",
                 *       "filters.fields",
                 *       "filters.resource_subtype",
                 *       "last_failure_at",
                 *       "last_failure_content",
                 *       "last_success_at",
                 *       "next_attempt_after",
                 *       "resource",
                 *       "resource.name",
                 *       "target"
                 *     ]
                 */
                opt_fields?: ("active" | "created_at" | "delivery_retry_count" | "failure_deletion_timestamp" | "filters" | "filters.action" | "filters.fields" | "filters.resource_subtype" | "last_failure_at" | "last_failure_content" | "last_success_at" | "next_attempt_after" | "resource" | "resource.name" | "target")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The webhook workspace and target. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["WebhookRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully created the requested webhook. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["WebhookResponse"];
                        /**
                         * @description The secret to be used to verify future webhook event signatures.
                         * @example b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81
                         */
                        "X-Hook-Secret"?: string;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getWebhook: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "active",
                 *       "created_at",
                 *       "delivery_retry_count",
                 *       "failure_deletion_timestamp",
                 *       "filters",
                 *       "filters.action",
                 *       "filters.fields",
                 *       "filters.resource_subtype",
                 *       "last_failure_at",
                 *       "last_failure_content",
                 *       "last_success_at",
                 *       "next_attempt_after",
                 *       "resource",
                 *       "resource.name",
                 *       "target"
                 *     ]
                 */
                opt_fields?: ("active" | "created_at" | "delivery_retry_count" | "failure_deletion_timestamp" | "filters" | "filters.action" | "filters.fields" | "filters.resource_subtype" | "last_failure_at" | "last_failure_content" | "last_success_at" | "next_attempt_after" | "resource" | "resource.name" | "target")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the webhook.
                 * @example 12345
                 */
                webhook_gid: components["parameters"]["webhook_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested webhook. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["WebhookResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateWebhook: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "active",
                 *       "created_at",
                 *       "delivery_retry_count",
                 *       "failure_deletion_timestamp",
                 *       "filters",
                 *       "filters.action",
                 *       "filters.fields",
                 *       "filters.resource_subtype",
                 *       "last_failure_at",
                 *       "last_failure_content",
                 *       "last_success_at",
                 *       "next_attempt_after",
                 *       "resource",
                 *       "resource.name",
                 *       "target"
                 *     ]
                 */
                opt_fields?: ("active" | "created_at" | "delivery_retry_count" | "failure_deletion_timestamp" | "filters" | "filters.action" | "filters.fields" | "filters.resource_subtype" | "last_failure_at" | "last_failure_content" | "last_success_at" | "next_attempt_after" | "resource" | "resource.name" | "target")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the webhook.
                 * @example 12345
                 */
                webhook_gid: components["parameters"]["webhook_path_gid"];
            };
            cookie?: never;
        };
        /** @description The updated filters for the webhook. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["WebhookUpdateRequest"];
                };
            };
        };
        responses: {
            /** @description Successfully updated the webhook. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["WebhookResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteWebhook: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the webhook.
                 * @example 12345
                 */
                webhook_gid: components["parameters"]["webhook_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested webhook. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getWorkspaceMembership: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "created_at",
                 *       "is_active",
                 *       "is_admin",
                 *       "is_guest",
                 *       "is_view_only",
                 *       "user",
                 *       "user.name",
                 *       "user_task_list",
                 *       "user_task_list.name",
                 *       "user_task_list.owner",
                 *       "user_task_list.workspace",
                 *       "vacation_dates",
                 *       "vacation_dates.end_on",
                 *       "vacation_dates.start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("created_at" | "is_active" | "is_admin" | "is_guest" | "is_view_only" | "user" | "user.name" | "user_task_list" | "user_task_list.name" | "user_task_list.owner" | "user_task_list.workspace" | "vacation_dates" | "vacation_dates.end_on" | "vacation_dates.start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /** @example 12345 */
                workspace_membership_gid: components["parameters"]["workspace_membership_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested workspace membership. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["WorkspaceMembershipResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getWorkspaceMembershipsForUser: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "created_at",
                 *       "is_active",
                 *       "is_admin",
                 *       "is_guest",
                 *       "is_view_only",
                 *       "offset",
                 *       "path",
                 *       "uri",
                 *       "user",
                 *       "user.name",
                 *       "user_task_list",
                 *       "user_task_list.name",
                 *       "user_task_list.owner",
                 *       "user_task_list.workspace",
                 *       "vacation_dates",
                 *       "vacation_dates.end_on",
                 *       "vacation_dates.start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("created_at" | "is_active" | "is_admin" | "is_guest" | "is_view_only" | "offset" | "path" | "uri" | "user" | "user.name" | "user_task_list" | "user_task_list.name" | "user_task_list.owner" | "user_task_list.workspace" | "vacation_dates" | "vacation_dates.end_on" | "vacation_dates.start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user_gid: components["parameters"]["user_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested user's workspace memberships. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["WorkspaceMembershipCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getWorkspaceMembershipsForWorkspace: {
        parameters: {
            query?: {
                /**
                 * @description A string identifying a user. This can either be the string "me", an email, or the gid of a user.
                 * @example me
                 */
                user?: components["parameters"]["user_query_param"];
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "created_at",
                 *       "is_active",
                 *       "is_admin",
                 *       "is_guest",
                 *       "is_view_only",
                 *       "offset",
                 *       "path",
                 *       "uri",
                 *       "user",
                 *       "user.name",
                 *       "user_task_list",
                 *       "user_task_list.name",
                 *       "user_task_list.owner",
                 *       "user_task_list.workspace",
                 *       "vacation_dates",
                 *       "vacation_dates.end_on",
                 *       "vacation_dates.start_on",
                 *       "workspace",
                 *       "workspace.name"
                 *     ]
                 */
                opt_fields?: ("created_at" | "is_active" | "is_admin" | "is_guest" | "is_view_only" | "offset" | "path" | "uri" | "user" | "user.name" | "user_task_list" | "user_task_list.name" | "user_task_list.owner" | "user_task_list.workspace" | "vacation_dates" | "vacation_dates.end_on" | "vacation_dates.start_on" | "workspace" | "workspace.name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested workspace's memberships. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["WorkspaceMembershipCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
        };
    };
    getWorkspaces: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description Results per page.
                 *     The number of objects to return per page. The value must be between 1 and 100.
                 * @example 50
                 */
                limit?: components["parameters"]["limit"];
                /**
                 * @description Offset token.
                 *     An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results.
                 *     *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
                 * @example eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
                 */
                offset?: components["parameters"]["offset"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "email_domains",
                 *       "is_organization",
                 *       "name",
                 *       "offset",
                 *       "path",
                 *       "uri"
                 *     ]
                 */
                opt_fields?: ("email_domains" | "is_organization" | "name" | "offset" | "path" | "uri")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all workspaces visible to the authorized user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["WorkspaceCompact"][];
                        next_page?: components["schemas"]["NextPage"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getWorkspace: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "email_domains",
                 *       "is_organization",
                 *       "name"
                 *     ]
                 */
                opt_fields?: ("email_domains" | "is_organization" | "name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return the full workspace record. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["WorkspaceResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateWorkspace: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "email_domains",
                 *       "is_organization",
                 *       "name"
                 *     ]
                 */
                opt_fields?: ("email_domains" | "is_organization" | "name")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /** @description The workspace object with all updated properties. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["WorkspaceRequest"];
                };
            };
        };
        responses: {
            /** @description Update for the workspace was successful. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["WorkspaceResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addUserForWorkspace: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description This endpoint returns a resource which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
                 * @example [
                 *       "email",
                 *       "name",
                 *       "photo",
                 *       "photo.image_1024x1024",
                 *       "photo.image_128x128",
                 *       "photo.image_21x21",
                 *       "photo.image_27x27",
                 *       "photo.image_36x36",
                 *       "photo.image_60x60"
                 *     ]
                 */
                opt_fields?: ("email" | "name" | "photo" | "photo.image_1024x1024" | "photo.image_128x128" | "photo.image_21x21" | "photo.image_27x27" | "photo.image_36x36" | "photo.image_60x60")[];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /** @description The user to add to the workspace. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["WorkspaceAddUserRequest"];
                };
            };
        };
        responses: {
            /** @description The user was added successfully to the workspace or organization. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserBaseResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    removeUserForWorkspace: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        /** @description The user to remove from the workspace. */
        requestBody: {
            content: {
                "application/json": {
                    data?: components["schemas"]["WorkspaceRemoveUserRequest"];
                };
            };
        };
        responses: {
            /** @description The user was removed successfully to the workspace or organization. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EmptyResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getWorkspaceEvents: {
        parameters: {
            query?: {
                /**
                 * @description Provides “pretty” output.
                 *     Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
                 * @example true
                 */
                opt_pretty?: components["parameters"]["pretty"];
                /**
                 * @description A sync token received from the last request, or none on first sync. Events will be returned from the point in time that the sync token was generated.
                 *     *Note: On your first request, omit the sync token. The response will be the same as for an expired sync token, and will include a new valid sync token. If the sync token is too old (which may happen from time to time) the API will return a `412 Precondition Failed` error, and include a fresh sync token in the response.*
                 * @example de4774f6915eae04714ca93bb2f5ee81
                 */
                sync?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Globally unique identifier for the workspace or organization.
                 * @example 12345
                 */
                workspace_gid: components["parameters"]["workspace_path_gid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved events. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["EventResponse"][];
                        /**
                         * @description A sync token to be used with the next call to the /events endpoint.
                         * @example de4774f6915eae04714ca93bb2f5ee81
                         */
                        sync?: string;
                        /**
                         * @description Indicates whether there are more events to pull.
                         * @example true
                         */
                        has_more?: boolean;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
}
